<?php
/**
 * DocumentManagementApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shopware Admin API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Admin API.  For a better overview, all CRUD-endpoints are hidden by default. If you want to show also CRUD-endpoints add the query parameter `type=jsonapi`.
 *
 * OpenAPI spec version: 6.4.7.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.31
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * DocumentManagementApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DocumentManagementApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createDocument
     *
     * Create a document for an order
     *
     * @param  string $order_id Identifier of the order the document should be generated for (required)
     * @param  string $document_type_name &#x60;technicalName&#x60; of the document type. Available types can be fetched with the &#x60;/api/document-type&#x60; endpoint. (required)
     * @param  \Swagger\Client\Model\DocumentDocumentTypeNameBody $body body (optional)
     * @param  string $file_type Filetype of the document beeing created (optional, default to pdf)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2001
     */
    public function createDocument($order_id, $document_type_name, $body = null, $file_type = 'pdf')
    {
        list($response) = $this->createDocumentWithHttpInfo($order_id, $document_type_name, $body, $file_type);
        return $response;
    }

    /**
     * Operation createDocumentWithHttpInfo
     *
     * Create a document for an order
     *
     * @param  string $order_id Identifier of the order the document should be generated for (required)
     * @param  string $document_type_name &#x60;technicalName&#x60; of the document type. Available types can be fetched with the &#x60;/api/document-type&#x60; endpoint. (required)
     * @param  \Swagger\Client\Model\DocumentDocumentTypeNameBody $body (optional)
     * @param  string $file_type Filetype of the document beeing created (optional, default to pdf)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function createDocumentWithHttpInfo($order_id, $document_type_name, $body = null, $file_type = 'pdf')
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2001';
        $request = $this->createDocumentRequest($order_id, $document_type_name, $body, $file_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createDocumentAsync
     *
     * Create a document for an order
     *
     * @param  string $order_id Identifier of the order the document should be generated for (required)
     * @param  string $document_type_name &#x60;technicalName&#x60; of the document type. Available types can be fetched with the &#x60;/api/document-type&#x60; endpoint. (required)
     * @param  \Swagger\Client\Model\DocumentDocumentTypeNameBody $body (optional)
     * @param  string $file_type Filetype of the document beeing created (optional, default to pdf)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDocumentAsync($order_id, $document_type_name, $body = null, $file_type = 'pdf')
    {
        return $this->createDocumentAsyncWithHttpInfo($order_id, $document_type_name, $body, $file_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createDocumentAsyncWithHttpInfo
     *
     * Create a document for an order
     *
     * @param  string $order_id Identifier of the order the document should be generated for (required)
     * @param  string $document_type_name &#x60;technicalName&#x60; of the document type. Available types can be fetched with the &#x60;/api/document-type&#x60; endpoint. (required)
     * @param  \Swagger\Client\Model\DocumentDocumentTypeNameBody $body (optional)
     * @param  string $file_type Filetype of the document beeing created (optional, default to pdf)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDocumentAsyncWithHttpInfo($order_id, $document_type_name, $body = null, $file_type = 'pdf')
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2001';
        $request = $this->createDocumentRequest($order_id, $document_type_name, $body, $file_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createDocument'
     *
     * @param  string $order_id Identifier of the order the document should be generated for (required)
     * @param  string $document_type_name &#x60;technicalName&#x60; of the document type. Available types can be fetched with the &#x60;/api/document-type&#x60; endpoint. (required)
     * @param  \Swagger\Client\Model\DocumentDocumentTypeNameBody $body (optional)
     * @param  string $file_type Filetype of the document beeing created (optional, default to pdf)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createDocumentRequest($order_id, $document_type_name, $body = null, $file_type = 'pdf')
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling createDocument'
            );
        }
        // verify the required parameter 'document_type_name' is set
        if ($document_type_name === null || (is_array($document_type_name) && count($document_type_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_type_name when calling createDocument'
            );
        }

        $resourcePath = '/_action/order/{orderId}/document/{documentTypeName}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($file_type !== null) {
            $queryParams['fileType'] = ObjectSerializer::toQueryValue($file_type, null);
        }

        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }
        // path params
        if ($document_type_name !== null) {
            $resourcePath = str_replace(
                '{' . 'documentTypeName' . '}',
                ObjectSerializer::toPathValue($document_type_name),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation downloadDocument
     *
     * Download a document
     *
     * @param  string $document_id Identifier of the document to be downloaded. (required)
     * @param  string $deep_link_code A unique hash code which was generated when the document was created. (required)
     * @param  bool $download This parameter controls the &#x60;Content-Disposition&#x60; header. If set to &#x60;true&#x60; the header will be set to &#x60;attachment&#x60; else &#x60;inline&#x60;. (optional, default to false)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function downloadDocument($document_id, $deep_link_code, $download = 'false')
    {
        list($response) = $this->downloadDocumentWithHttpInfo($document_id, $deep_link_code, $download);
        return $response;
    }

    /**
     * Operation downloadDocumentWithHttpInfo
     *
     * Download a document
     *
     * @param  string $document_id Identifier of the document to be downloaded. (required)
     * @param  string $deep_link_code A unique hash code which was generated when the document was created. (required)
     * @param  bool $download This parameter controls the &#x60;Content-Disposition&#x60; header. If set to &#x60;true&#x60; the header will be set to &#x60;attachment&#x60; else &#x60;inline&#x60;. (optional, default to false)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function downloadDocumentWithHttpInfo($document_id, $deep_link_code, $download = 'false')
    {
        $returnType = 'string';
        $request = $this->downloadDocumentRequest($document_id, $deep_link_code, $download);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation downloadDocumentAsync
     *
     * Download a document
     *
     * @param  string $document_id Identifier of the document to be downloaded. (required)
     * @param  string $deep_link_code A unique hash code which was generated when the document was created. (required)
     * @param  bool $download This parameter controls the &#x60;Content-Disposition&#x60; header. If set to &#x60;true&#x60; the header will be set to &#x60;attachment&#x60; else &#x60;inline&#x60;. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadDocumentAsync($document_id, $deep_link_code, $download = 'false')
    {
        return $this->downloadDocumentAsyncWithHttpInfo($document_id, $deep_link_code, $download)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation downloadDocumentAsyncWithHttpInfo
     *
     * Download a document
     *
     * @param  string $document_id Identifier of the document to be downloaded. (required)
     * @param  string $deep_link_code A unique hash code which was generated when the document was created. (required)
     * @param  bool $download This parameter controls the &#x60;Content-Disposition&#x60; header. If set to &#x60;true&#x60; the header will be set to &#x60;attachment&#x60; else &#x60;inline&#x60;. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function downloadDocumentAsyncWithHttpInfo($document_id, $deep_link_code, $download = 'false')
    {
        $returnType = 'string';
        $request = $this->downloadDocumentRequest($document_id, $deep_link_code, $download);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'downloadDocument'
     *
     * @param  string $document_id Identifier of the document to be downloaded. (required)
     * @param  string $deep_link_code A unique hash code which was generated when the document was created. (required)
     * @param  bool $download This parameter controls the &#x60;Content-Disposition&#x60; header. If set to &#x60;true&#x60; the header will be set to &#x60;attachment&#x60; else &#x60;inline&#x60;. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function downloadDocumentRequest($document_id, $deep_link_code, $download = 'false')
    {
        // verify the required parameter 'document_id' is set
        if ($document_id === null || (is_array($document_id) && count($document_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_id when calling downloadDocument'
            );
        }
        // verify the required parameter 'deep_link_code' is set
        if ($deep_link_code === null || (is_array($deep_link_code) && count($deep_link_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $deep_link_code when calling downloadDocument'
            );
        }

        $resourcePath = '/_action/document/{documentId}/{deepLinkCode}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($download !== null) {
            $queryParams['download'] = ObjectSerializer::toQueryValue($download, null);
        }

        // path params
        if ($document_id !== null) {
            $resourcePath = str_replace(
                '{' . 'documentId' . '}',
                ObjectSerializer::toPathValue($document_id),
                $resourcePath
            );
        }
        // path params
        if ($deep_link_code !== null) {
            $resourcePath = str_replace(
                '{' . 'deepLinkCode' . '}',
                ObjectSerializer::toPathValue($deep_link_code),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation numberRangeReserve
     *
     * Reserve or preview a document number
     *
     * @param  string $type &#x60;technicalName&#x60; of the document type (e.g. &#x60;document_invoice&#x60;). Available types can be fetched with the &#x60;/api/document-type endpoint&#x60;. (required)
     * @param  string $saleschannel Sales channel for the number range. Number ranges can be defined per sales channel, so you can pass a sales channel ID here. (required)
     * @param  bool $preview If this parameter has a true value, the number will not actually be incremented, but only previewed. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse20011
     */
    public function numberRangeReserve($type, $saleschannel, $preview = null)
    {
        list($response) = $this->numberRangeReserveWithHttpInfo($type, $saleschannel, $preview);
        return $response;
    }

    /**
     * Operation numberRangeReserveWithHttpInfo
     *
     * Reserve or preview a document number
     *
     * @param  string $type &#x60;technicalName&#x60; of the document type (e.g. &#x60;document_invoice&#x60;). Available types can be fetched with the &#x60;/api/document-type endpoint&#x60;. (required)
     * @param  string $saleschannel Sales channel for the number range. Number ranges can be defined per sales channel, so you can pass a sales channel ID here. (required)
     * @param  bool $preview If this parameter has a true value, the number will not actually be incremented, but only previewed. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse20011, HTTP status code, HTTP response headers (array of strings)
     */
    public function numberRangeReserveWithHttpInfo($type, $saleschannel, $preview = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20011';
        $request = $this->numberRangeReserveRequest($type, $saleschannel, $preview);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse20011',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation numberRangeReserveAsync
     *
     * Reserve or preview a document number
     *
     * @param  string $type &#x60;technicalName&#x60; of the document type (e.g. &#x60;document_invoice&#x60;). Available types can be fetched with the &#x60;/api/document-type endpoint&#x60;. (required)
     * @param  string $saleschannel Sales channel for the number range. Number ranges can be defined per sales channel, so you can pass a sales channel ID here. (required)
     * @param  bool $preview If this parameter has a true value, the number will not actually be incremented, but only previewed. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function numberRangeReserveAsync($type, $saleschannel, $preview = null)
    {
        return $this->numberRangeReserveAsyncWithHttpInfo($type, $saleschannel, $preview)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation numberRangeReserveAsyncWithHttpInfo
     *
     * Reserve or preview a document number
     *
     * @param  string $type &#x60;technicalName&#x60; of the document type (e.g. &#x60;document_invoice&#x60;). Available types can be fetched with the &#x60;/api/document-type endpoint&#x60;. (required)
     * @param  string $saleschannel Sales channel for the number range. Number ranges can be defined per sales channel, so you can pass a sales channel ID here. (required)
     * @param  bool $preview If this parameter has a true value, the number will not actually be incremented, but only previewed. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function numberRangeReserveAsyncWithHttpInfo($type, $saleschannel, $preview = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse20011';
        $request = $this->numberRangeReserveRequest($type, $saleschannel, $preview);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'numberRangeReserve'
     *
     * @param  string $type &#x60;technicalName&#x60; of the document type (e.g. &#x60;document_invoice&#x60;). Available types can be fetched with the &#x60;/api/document-type endpoint&#x60;. (required)
     * @param  string $saleschannel Sales channel for the number range. Number ranges can be defined per sales channel, so you can pass a sales channel ID here. (required)
     * @param  bool $preview If this parameter has a true value, the number will not actually be incremented, but only previewed. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function numberRangeReserveRequest($type, $saleschannel, $preview = null)
    {
        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling numberRangeReserve'
            );
        }
        // verify the required parameter 'saleschannel' is set
        if ($saleschannel === null || (is_array($saleschannel) && count($saleschannel) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $saleschannel when calling numberRangeReserve'
            );
        }

        $resourcePath = '/_action/number-range/reserve/{type}/{saleschannel?}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($preview !== null) {
            $queryParams['preview'] = ObjectSerializer::toQueryValue($preview, null);
        }

        // path params
        if ($type !== null) {
            $resourcePath = str_replace(
                '{' . 'type' . '}',
                ObjectSerializer::toPathValue($type),
                $resourcePath
            );
        }
        // path params
        if ($saleschannel !== null) {
            $resourcePath = str_replace(
                '{' . 'saleschannel' . '}',
                ObjectSerializer::toPathValue($saleschannel),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation uploadToDocument
     *
     * Upload a file for a document
     *
     * @param  string $file_name Name of the uploaded file. (required)
     * @param  string $extension Extension of the uploaded file. For example &#x60;pdf&#x60; (required)
     * @param  string $document_id Identifier of the document the new file should be added to. (required)
     * @param  Object $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2001
     */
    public function uploadToDocument($file_name, $extension, $document_id, $body = null)
    {
        list($response) = $this->uploadToDocumentWithHttpInfo($file_name, $extension, $document_id, $body);
        return $response;
    }

    /**
     * Operation uploadToDocumentWithHttpInfo
     *
     * Upload a file for a document
     *
     * @param  string $file_name Name of the uploaded file. (required)
     * @param  string $extension Extension of the uploaded file. For example &#x60;pdf&#x60; (required)
     * @param  string $document_id Identifier of the document the new file should be added to. (required)
     * @param  Object $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function uploadToDocumentWithHttpInfo($file_name, $extension, $document_id, $body = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2001';
        $request = $this->uploadToDocumentRequest($file_name, $extension, $document_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation uploadToDocumentAsync
     *
     * Upload a file for a document
     *
     * @param  string $file_name Name of the uploaded file. (required)
     * @param  string $extension Extension of the uploaded file. For example &#x60;pdf&#x60; (required)
     * @param  string $document_id Identifier of the document the new file should be added to. (required)
     * @param  Object $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadToDocumentAsync($file_name, $extension, $document_id, $body = null)
    {
        return $this->uploadToDocumentAsyncWithHttpInfo($file_name, $extension, $document_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation uploadToDocumentAsyncWithHttpInfo
     *
     * Upload a file for a document
     *
     * @param  string $file_name Name of the uploaded file. (required)
     * @param  string $extension Extension of the uploaded file. For example &#x60;pdf&#x60; (required)
     * @param  string $document_id Identifier of the document the new file should be added to. (required)
     * @param  Object $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadToDocumentAsyncWithHttpInfo($file_name, $extension, $document_id, $body = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2001';
        $request = $this->uploadToDocumentRequest($file_name, $extension, $document_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'uploadToDocument'
     *
     * @param  string $file_name Name of the uploaded file. (required)
     * @param  string $extension Extension of the uploaded file. For example &#x60;pdf&#x60; (required)
     * @param  string $document_id Identifier of the document the new file should be added to. (required)
     * @param  Object $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function uploadToDocumentRequest($file_name, $extension, $document_id, $body = null)
    {
        // verify the required parameter 'file_name' is set
        if ($file_name === null || (is_array($file_name) && count($file_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_name when calling uploadToDocument'
            );
        }
        // verify the required parameter 'extension' is set
        if ($extension === null || (is_array($extension) && count($extension) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $extension when calling uploadToDocument'
            );
        }
        // verify the required parameter 'document_id' is set
        if ($document_id === null || (is_array($document_id) && count($document_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_id when calling uploadToDocument'
            );
        }

        $resourcePath = '/_action/document/{documentId}/upload';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($file_name !== null) {
            $queryParams['fileName'] = ObjectSerializer::toQueryValue($file_name, null);
        }
        // query params
        if ($extension !== null) {
            $queryParams['extension'] = ObjectSerializer::toQueryValue($extension, null);
        }

        // path params
        if ($document_id !== null) {
            $resourcePath = str_replace(
                '{' . 'documentId' . '}',
                ObjectSerializer::toPathValue($document_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/octet-stream', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation uploadToDocument
     *
     * Upload a file for a document
     *
     * @param  string $file_name Name of the uploaded file. (required)
     * @param  string $extension Extension of the uploaded file. For example &#x60;pdf&#x60; (required)
     * @param  string $document_id Identifier of the document the new file should be added to. (required)
     * @param  Object $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse2001
     */
    public function uploadToDocument($file_name, $extension, $document_id, $body = null)
    {
        list($response) = $this->uploadToDocumentWithHttpInfo($file_name, $extension, $document_id, $body);
        return $response;
    }

    /**
     * Operation uploadToDocumentWithHttpInfo
     *
     * Upload a file for a document
     *
     * @param  string $file_name Name of the uploaded file. (required)
     * @param  string $extension Extension of the uploaded file. For example &#x60;pdf&#x60; (required)
     * @param  string $document_id Identifier of the document the new file should be added to. (required)
     * @param  Object $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function uploadToDocumentWithHttpInfo($file_name, $extension, $document_id, $body = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2001';
        $request = $this->uploadToDocumentRequest($file_name, $extension, $document_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse2001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation uploadToDocumentAsync
     *
     * Upload a file for a document
     *
     * @param  string $file_name Name of the uploaded file. (required)
     * @param  string $extension Extension of the uploaded file. For example &#x60;pdf&#x60; (required)
     * @param  string $document_id Identifier of the document the new file should be added to. (required)
     * @param  Object $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadToDocumentAsync($file_name, $extension, $document_id, $body = null)
    {
        return $this->uploadToDocumentAsyncWithHttpInfo($file_name, $extension, $document_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation uploadToDocumentAsyncWithHttpInfo
     *
     * Upload a file for a document
     *
     * @param  string $file_name Name of the uploaded file. (required)
     * @param  string $extension Extension of the uploaded file. For example &#x60;pdf&#x60; (required)
     * @param  string $document_id Identifier of the document the new file should be added to. (required)
     * @param  Object $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function uploadToDocumentAsyncWithHttpInfo($file_name, $extension, $document_id, $body = null)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse2001';
        $request = $this->uploadToDocumentRequest($file_name, $extension, $document_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'uploadToDocument'
     *
     * @param  string $file_name Name of the uploaded file. (required)
     * @param  string $extension Extension of the uploaded file. For example &#x60;pdf&#x60; (required)
     * @param  string $document_id Identifier of the document the new file should be added to. (required)
     * @param  Object $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function uploadToDocumentRequest($file_name, $extension, $document_id, $body = null)
    {
        // verify the required parameter 'file_name' is set
        if ($file_name === null || (is_array($file_name) && count($file_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_name when calling uploadToDocument'
            );
        }
        // verify the required parameter 'extension' is set
        if ($extension === null || (is_array($extension) && count($extension) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $extension when calling uploadToDocument'
            );
        }
        // verify the required parameter 'document_id' is set
        if ($document_id === null || (is_array($document_id) && count($document_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_id when calling uploadToDocument'
            );
        }

        $resourcePath = '/_action/document/{documentId}/upload';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($file_name !== null) {
            $queryParams['fileName'] = ObjectSerializer::toQueryValue($file_name, null);
        }
        // query params
        if ($extension !== null) {
            $queryParams['extension'] = ObjectSerializer::toQueryValue($extension, null);
        }

        // path params
        if ($document_id !== null) {
            $resourcePath = str_replace(
                '{' . 'documentId' . '}',
                ObjectSerializer::toPathValue($document_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/octet-stream', 'application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
