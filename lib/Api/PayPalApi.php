<?php
/**
 * PayPalApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shopware Admin API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Admin API.  For a better overview, all CRUD-endpoints are hidden by default. If you want to show also CRUD-endpoints add the query parameter `type=jsonapi`.
 *
 * OpenAPI spec version: 6.4.7.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.31
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * PayPalApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PayPalApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation authorizationDetails
     *
     * @param  string $order_transaction_id ID of the order transaction which contains the PayPal payment (required)
     * @param  string $authorization_id ID of the PayPal authorization (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SwagPaypalV2OrderAuthorization
     */
    public function authorizationDetails($order_transaction_id, $authorization_id)
    {
        list($response) = $this->authorizationDetailsWithHttpInfo($order_transaction_id, $authorization_id);
        return $response;
    }

    /**
     * Operation authorizationDetailsWithHttpInfo
     *
     * @param  string $order_transaction_id ID of the order transaction which contains the PayPal payment (required)
     * @param  string $authorization_id ID of the PayPal authorization (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SwagPaypalV2OrderAuthorization, HTTP status code, HTTP response headers (array of strings)
     */
    public function authorizationDetailsWithHttpInfo($order_transaction_id, $authorization_id)
    {
        $returnType = '\Swagger\Client\Model\SwagPaypalV2OrderAuthorization';
        $request = $this->authorizationDetailsRequest($order_transaction_id, $authorization_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SwagPaypalV2OrderAuthorization',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation authorizationDetailsAsync
     *
     * 
     *
     * @param  string $order_transaction_id ID of the order transaction which contains the PayPal payment (required)
     * @param  string $authorization_id ID of the PayPal authorization (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authorizationDetailsAsync($order_transaction_id, $authorization_id)
    {
        return $this->authorizationDetailsAsyncWithHttpInfo($order_transaction_id, $authorization_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation authorizationDetailsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $order_transaction_id ID of the order transaction which contains the PayPal payment (required)
     * @param  string $authorization_id ID of the PayPal authorization (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function authorizationDetailsAsyncWithHttpInfo($order_transaction_id, $authorization_id)
    {
        $returnType = '\Swagger\Client\Model\SwagPaypalV2OrderAuthorization';
        $request = $this->authorizationDetailsRequest($order_transaction_id, $authorization_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'authorizationDetails'
     *
     * @param  string $order_transaction_id ID of the order transaction which contains the PayPal payment (required)
     * @param  string $authorization_id ID of the PayPal authorization (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function authorizationDetailsRequest($order_transaction_id, $authorization_id)
    {
        // verify the required parameter 'order_transaction_id' is set
        if ($order_transaction_id === null || (is_array($order_transaction_id) && count($order_transaction_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_transaction_id when calling authorizationDetails'
            );
        }
        // verify the required parameter 'authorization_id' is set
        if ($authorization_id === null || (is_array($authorization_id) && count($authorization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization_id when calling authorizationDetails'
            );
        }

        $resourcePath = '/paypal-v2/authorization/{orderTransactionId}/{authorizationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_transaction_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderTransactionId' . '}',
                ObjectSerializer::toPathValue($order_transaction_id),
                $resourcePath
            );
        }
        // path params
        if ($authorization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'authorizationId' . '}',
                ObjectSerializer::toPathValue($authorization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation captureAuthorization
     *
     * @param  string $order_transaction_id ID of the order transaction which contains the PayPal payment (required)
     * @param  string $authorization_id ID of the PayPal authorization (required)
     * @param  \Swagger\Client\Model\OrderTransactionIdAuthorizationIdBody $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SwagPaypalV2OrderCapture
     */
    public function captureAuthorization($order_transaction_id, $authorization_id, $body = null)
    {
        list($response) = $this->captureAuthorizationWithHttpInfo($order_transaction_id, $authorization_id, $body);
        return $response;
    }

    /**
     * Operation captureAuthorizationWithHttpInfo
     *
     * @param  string $order_transaction_id ID of the order transaction which contains the PayPal payment (required)
     * @param  string $authorization_id ID of the PayPal authorization (required)
     * @param  \Swagger\Client\Model\OrderTransactionIdAuthorizationIdBody $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SwagPaypalV2OrderCapture, HTTP status code, HTTP response headers (array of strings)
     */
    public function captureAuthorizationWithHttpInfo($order_transaction_id, $authorization_id, $body = null)
    {
        $returnType = '\Swagger\Client\Model\SwagPaypalV2OrderCapture';
        $request = $this->captureAuthorizationRequest($order_transaction_id, $authorization_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SwagPaypalV2OrderCapture',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation captureAuthorizationAsync
     *
     * 
     *
     * @param  string $order_transaction_id ID of the order transaction which contains the PayPal payment (required)
     * @param  string $authorization_id ID of the PayPal authorization (required)
     * @param  \Swagger\Client\Model\OrderTransactionIdAuthorizationIdBody $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function captureAuthorizationAsync($order_transaction_id, $authorization_id, $body = null)
    {
        return $this->captureAuthorizationAsyncWithHttpInfo($order_transaction_id, $authorization_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation captureAuthorizationAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $order_transaction_id ID of the order transaction which contains the PayPal payment (required)
     * @param  string $authorization_id ID of the PayPal authorization (required)
     * @param  \Swagger\Client\Model\OrderTransactionIdAuthorizationIdBody $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function captureAuthorizationAsyncWithHttpInfo($order_transaction_id, $authorization_id, $body = null)
    {
        $returnType = '\Swagger\Client\Model\SwagPaypalV2OrderCapture';
        $request = $this->captureAuthorizationRequest($order_transaction_id, $authorization_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'captureAuthorization'
     *
     * @param  string $order_transaction_id ID of the order transaction which contains the PayPal payment (required)
     * @param  string $authorization_id ID of the PayPal authorization (required)
     * @param  \Swagger\Client\Model\OrderTransactionIdAuthorizationIdBody $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function captureAuthorizationRequest($order_transaction_id, $authorization_id, $body = null)
    {
        // verify the required parameter 'order_transaction_id' is set
        if ($order_transaction_id === null || (is_array($order_transaction_id) && count($order_transaction_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_transaction_id when calling captureAuthorization'
            );
        }
        // verify the required parameter 'authorization_id' is set
        if ($authorization_id === null || (is_array($authorization_id) && count($authorization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization_id when calling captureAuthorization'
            );
        }

        $resourcePath = '/_action/paypal-v2/capture-authorization/{orderTransactionId}/{authorizationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_transaction_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderTransactionId' . '}',
                ObjectSerializer::toPathValue($order_transaction_id),
                $resourcePath
            );
        }
        // path params
        if ($authorization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'authorizationId' . '}',
                ObjectSerializer::toPathValue($authorization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation captureDetails
     *
     * @param  string $order_transaction_id ID of the order transaction which contains the PayPal payment (required)
     * @param  string $capture_id ID of the PayPal capture (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SwagPaypalV2OrderCapture
     */
    public function captureDetails($order_transaction_id, $capture_id)
    {
        list($response) = $this->captureDetailsWithHttpInfo($order_transaction_id, $capture_id);
        return $response;
    }

    /**
     * Operation captureDetailsWithHttpInfo
     *
     * @param  string $order_transaction_id ID of the order transaction which contains the PayPal payment (required)
     * @param  string $capture_id ID of the PayPal capture (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SwagPaypalV2OrderCapture, HTTP status code, HTTP response headers (array of strings)
     */
    public function captureDetailsWithHttpInfo($order_transaction_id, $capture_id)
    {
        $returnType = '\Swagger\Client\Model\SwagPaypalV2OrderCapture';
        $request = $this->captureDetailsRequest($order_transaction_id, $capture_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SwagPaypalV2OrderCapture',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation captureDetailsAsync
     *
     * 
     *
     * @param  string $order_transaction_id ID of the order transaction which contains the PayPal payment (required)
     * @param  string $capture_id ID of the PayPal capture (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function captureDetailsAsync($order_transaction_id, $capture_id)
    {
        return $this->captureDetailsAsyncWithHttpInfo($order_transaction_id, $capture_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation captureDetailsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $order_transaction_id ID of the order transaction which contains the PayPal payment (required)
     * @param  string $capture_id ID of the PayPal capture (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function captureDetailsAsyncWithHttpInfo($order_transaction_id, $capture_id)
    {
        $returnType = '\Swagger\Client\Model\SwagPaypalV2OrderCapture';
        $request = $this->captureDetailsRequest($order_transaction_id, $capture_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'captureDetails'
     *
     * @param  string $order_transaction_id ID of the order transaction which contains the PayPal payment (required)
     * @param  string $capture_id ID of the PayPal capture (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function captureDetailsRequest($order_transaction_id, $capture_id)
    {
        // verify the required parameter 'order_transaction_id' is set
        if ($order_transaction_id === null || (is_array($order_transaction_id) && count($order_transaction_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_transaction_id when calling captureDetails'
            );
        }
        // verify the required parameter 'capture_id' is set
        if ($capture_id === null || (is_array($capture_id) && count($capture_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $capture_id when calling captureDetails'
            );
        }

        $resourcePath = '/paypal-v2/capture/{orderTransactionId}/{captureId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_transaction_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderTransactionId' . '}',
                ObjectSerializer::toPathValue($order_transaction_id),
                $resourcePath
            );
        }
        // path params
        if ($capture_id !== null) {
            $resourcePath = str_replace(
                '{' . 'captureId' . '}',
                ObjectSerializer::toPathValue($capture_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation disputeDetails
     *
     * @param  string $dispute_id ID of the dispute (required)
     * @param  string $sales_channel_id ID of the sales channel to which the dispute belongs (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SwagPaypalV1DisputesItem
     */
    public function disputeDetails($dispute_id, $sales_channel_id = null)
    {
        list($response) = $this->disputeDetailsWithHttpInfo($dispute_id, $sales_channel_id);
        return $response;
    }

    /**
     * Operation disputeDetailsWithHttpInfo
     *
     * @param  string $dispute_id ID of the dispute (required)
     * @param  string $sales_channel_id ID of the sales channel to which the dispute belongs (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SwagPaypalV1DisputesItem, HTTP status code, HTTP response headers (array of strings)
     */
    public function disputeDetailsWithHttpInfo($dispute_id, $sales_channel_id = null)
    {
        $returnType = '\Swagger\Client\Model\SwagPaypalV1DisputesItem';
        $request = $this->disputeDetailsRequest($dispute_id, $sales_channel_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SwagPaypalV1DisputesItem',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation disputeDetailsAsync
     *
     * 
     *
     * @param  string $dispute_id ID of the dispute (required)
     * @param  string $sales_channel_id ID of the sales channel to which the dispute belongs (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function disputeDetailsAsync($dispute_id, $sales_channel_id = null)
    {
        return $this->disputeDetailsAsyncWithHttpInfo($dispute_id, $sales_channel_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation disputeDetailsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $dispute_id ID of the dispute (required)
     * @param  string $sales_channel_id ID of the sales channel to which the dispute belongs (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function disputeDetailsAsyncWithHttpInfo($dispute_id, $sales_channel_id = null)
    {
        $returnType = '\Swagger\Client\Model\SwagPaypalV1DisputesItem';
        $request = $this->disputeDetailsRequest($dispute_id, $sales_channel_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'disputeDetails'
     *
     * @param  string $dispute_id ID of the dispute (required)
     * @param  string $sales_channel_id ID of the sales channel to which the dispute belongs (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function disputeDetailsRequest($dispute_id, $sales_channel_id = null)
    {
        // verify the required parameter 'dispute_id' is set
        if ($dispute_id === null || (is_array($dispute_id) && count($dispute_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dispute_id when calling disputeDetails'
            );
        }

        $resourcePath = '/paypal/dispute/{disputeId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($sales_channel_id !== null) {
            $queryParams['salesChannelId'] = ObjectSerializer::toQueryValue($sales_channel_id, null);
        }

        // path params
        if ($dispute_id !== null) {
            $resourcePath = str_replace(
                '{' . 'disputeId' . '}',
                ObjectSerializer::toPathValue($dispute_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation disputeList
     *
     * @param  string $sales_channel_id ID of the sales channel to which the disputes belong (optional)
     * @param  string $dispute_state_filter Filter for dispute state. Seperate multiple states with a comma. Must one of these values: Swag\\PayPal\\RestApi\\V1\\Api\\Disputes\\Item::DISPUTE_STATES (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SwagPaypalV1Disputes
     */
    public function disputeList($sales_channel_id = null, $dispute_state_filter = null)
    {
        list($response) = $this->disputeListWithHttpInfo($sales_channel_id, $dispute_state_filter);
        return $response;
    }

    /**
     * Operation disputeListWithHttpInfo
     *
     * @param  string $sales_channel_id ID of the sales channel to which the disputes belong (optional)
     * @param  string $dispute_state_filter Filter for dispute state. Seperate multiple states with a comma. Must one of these values: Swag\\PayPal\\RestApi\\V1\\Api\\Disputes\\Item::DISPUTE_STATES (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SwagPaypalV1Disputes, HTTP status code, HTTP response headers (array of strings)
     */
    public function disputeListWithHttpInfo($sales_channel_id = null, $dispute_state_filter = null)
    {
        $returnType = '\Swagger\Client\Model\SwagPaypalV1Disputes';
        $request = $this->disputeListRequest($sales_channel_id, $dispute_state_filter);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SwagPaypalV1Disputes',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation disputeListAsync
     *
     * 
     *
     * @param  string $sales_channel_id ID of the sales channel to which the disputes belong (optional)
     * @param  string $dispute_state_filter Filter for dispute state. Seperate multiple states with a comma. Must one of these values: Swag\\PayPal\\RestApi\\V1\\Api\\Disputes\\Item::DISPUTE_STATES (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function disputeListAsync($sales_channel_id = null, $dispute_state_filter = null)
    {
        return $this->disputeListAsyncWithHttpInfo($sales_channel_id, $dispute_state_filter)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation disputeListAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $sales_channel_id ID of the sales channel to which the disputes belong (optional)
     * @param  string $dispute_state_filter Filter for dispute state. Seperate multiple states with a comma. Must one of these values: Swag\\PayPal\\RestApi\\V1\\Api\\Disputes\\Item::DISPUTE_STATES (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function disputeListAsyncWithHttpInfo($sales_channel_id = null, $dispute_state_filter = null)
    {
        $returnType = '\Swagger\Client\Model\SwagPaypalV1Disputes';
        $request = $this->disputeListRequest($sales_channel_id, $dispute_state_filter);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'disputeList'
     *
     * @param  string $sales_channel_id ID of the sales channel to which the disputes belong (optional)
     * @param  string $dispute_state_filter Filter for dispute state. Seperate multiple states with a comma. Must one of these values: Swag\\PayPal\\RestApi\\V1\\Api\\Disputes\\Item::DISPUTE_STATES (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function disputeListRequest($sales_channel_id = null, $dispute_state_filter = null)
    {

        $resourcePath = '/paypal/dispute';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($sales_channel_id !== null) {
            $queryParams['salesChannelId'] = ObjectSerializer::toQueryValue($sales_channel_id, null);
        }
        // query params
        if ($dispute_state_filter !== null) {
            $queryParams['disputeStateFilter'] = ObjectSerializer::toQueryValue($dispute_state_filter, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation orderDetails
     *
     * @param  string $order_transaction_id ID of the order transaction which contains the PayPal payment (required)
     * @param  string $paypal_order_id ID of the PayPal order (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SwagPaypalV2Order
     */
    public function orderDetails($order_transaction_id, $paypal_order_id)
    {
        list($response) = $this->orderDetailsWithHttpInfo($order_transaction_id, $paypal_order_id);
        return $response;
    }

    /**
     * Operation orderDetailsWithHttpInfo
     *
     * @param  string $order_transaction_id ID of the order transaction which contains the PayPal payment (required)
     * @param  string $paypal_order_id ID of the PayPal order (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SwagPaypalV2Order, HTTP status code, HTTP response headers (array of strings)
     */
    public function orderDetailsWithHttpInfo($order_transaction_id, $paypal_order_id)
    {
        $returnType = '\Swagger\Client\Model\SwagPaypalV2Order';
        $request = $this->orderDetailsRequest($order_transaction_id, $paypal_order_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SwagPaypalV2Order',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation orderDetailsAsync
     *
     * 
     *
     * @param  string $order_transaction_id ID of the order transaction which contains the PayPal payment (required)
     * @param  string $paypal_order_id ID of the PayPal order (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderDetailsAsync($order_transaction_id, $paypal_order_id)
    {
        return $this->orderDetailsAsyncWithHttpInfo($order_transaction_id, $paypal_order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation orderDetailsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $order_transaction_id ID of the order transaction which contains the PayPal payment (required)
     * @param  string $paypal_order_id ID of the PayPal order (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function orderDetailsAsyncWithHttpInfo($order_transaction_id, $paypal_order_id)
    {
        $returnType = '\Swagger\Client\Model\SwagPaypalV2Order';
        $request = $this->orderDetailsRequest($order_transaction_id, $paypal_order_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'orderDetails'
     *
     * @param  string $order_transaction_id ID of the order transaction which contains the PayPal payment (required)
     * @param  string $paypal_order_id ID of the PayPal order (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function orderDetailsRequest($order_transaction_id, $paypal_order_id)
    {
        // verify the required parameter 'order_transaction_id' is set
        if ($order_transaction_id === null || (is_array($order_transaction_id) && count($order_transaction_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_transaction_id when calling orderDetails'
            );
        }
        // verify the required parameter 'paypal_order_id' is set
        if ($paypal_order_id === null || (is_array($paypal_order_id) && count($paypal_order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $paypal_order_id when calling orderDetails'
            );
        }

        $resourcePath = '/paypal-v2/order/{orderTransactionId}/{paypalOrderId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_transaction_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderTransactionId' . '}',
                ObjectSerializer::toPathValue($order_transaction_id),
                $resourcePath
            );
        }
        // path params
        if ($paypal_order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paypalOrderId' . '}',
                ObjectSerializer::toPathValue($paypal_order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation paymentDetails
     *
     * @param  string $order_id ID of the order which contains the PayPal payment (required)
     * @param  string $payment_id ID of the PayPal payment (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SwagPaypalV1Payment
     */
    public function paymentDetails($order_id, $payment_id)
    {
        list($response) = $this->paymentDetailsWithHttpInfo($order_id, $payment_id);
        return $response;
    }

    /**
     * Operation paymentDetailsWithHttpInfo
     *
     * @param  string $order_id ID of the order which contains the PayPal payment (required)
     * @param  string $payment_id ID of the PayPal payment (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SwagPaypalV1Payment, HTTP status code, HTTP response headers (array of strings)
     */
    public function paymentDetailsWithHttpInfo($order_id, $payment_id)
    {
        $returnType = '\Swagger\Client\Model\SwagPaypalV1Payment';
        $request = $this->paymentDetailsRequest($order_id, $payment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SwagPaypalV1Payment',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation paymentDetailsAsync
     *
     * 
     *
     * @param  string $order_id ID of the order which contains the PayPal payment (required)
     * @param  string $payment_id ID of the PayPal payment (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paymentDetailsAsync($order_id, $payment_id)
    {
        return $this->paymentDetailsAsyncWithHttpInfo($order_id, $payment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation paymentDetailsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $order_id ID of the order which contains the PayPal payment (required)
     * @param  string $payment_id ID of the PayPal payment (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function paymentDetailsAsyncWithHttpInfo($order_id, $payment_id)
    {
        $returnType = '\Swagger\Client\Model\SwagPaypalV1Payment';
        $request = $this->paymentDetailsRequest($order_id, $payment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'paymentDetails'
     *
     * @param  string $order_id ID of the order which contains the PayPal payment (required)
     * @param  string $payment_id ID of the PayPal payment (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function paymentDetailsRequest($order_id, $payment_id)
    {
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling paymentDetails'
            );
        }
        // verify the required parameter 'payment_id' is set
        if ($payment_id === null || (is_array($payment_id) && count($payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_id when calling paymentDetails'
            );
        }

        $resourcePath = '/paypal/payment-details/{orderId}/{paymentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }
        // path params
        if ($payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentId' . '}',
                ObjectSerializer::toPathValue($payment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation refundCapture
     *
     * @param  string $order_transaction_id ID of the order transaction which contains the PayPal payment (required)
     * @param  string $capture_id ID of the PayPal capture (required)
     * @param  string $paypal_order_id ID of the PayPal order (required)
     * @param  \Swagger\Client\Model\CaptureIdPaypalOrderIdBody $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SwagPaypalV2OrderRefund
     */
    public function refundCapture($order_transaction_id, $capture_id, $paypal_order_id, $body = null)
    {
        list($response) = $this->refundCaptureWithHttpInfo($order_transaction_id, $capture_id, $paypal_order_id, $body);
        return $response;
    }

    /**
     * Operation refundCaptureWithHttpInfo
     *
     * @param  string $order_transaction_id ID of the order transaction which contains the PayPal payment (required)
     * @param  string $capture_id ID of the PayPal capture (required)
     * @param  string $paypal_order_id ID of the PayPal order (required)
     * @param  \Swagger\Client\Model\CaptureIdPaypalOrderIdBody $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SwagPaypalV2OrderRefund, HTTP status code, HTTP response headers (array of strings)
     */
    public function refundCaptureWithHttpInfo($order_transaction_id, $capture_id, $paypal_order_id, $body = null)
    {
        $returnType = '\Swagger\Client\Model\SwagPaypalV2OrderRefund';
        $request = $this->refundCaptureRequest($order_transaction_id, $capture_id, $paypal_order_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SwagPaypalV2OrderRefund',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation refundCaptureAsync
     *
     * 
     *
     * @param  string $order_transaction_id ID of the order transaction which contains the PayPal payment (required)
     * @param  string $capture_id ID of the PayPal capture (required)
     * @param  string $paypal_order_id ID of the PayPal order (required)
     * @param  \Swagger\Client\Model\CaptureIdPaypalOrderIdBody $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refundCaptureAsync($order_transaction_id, $capture_id, $paypal_order_id, $body = null)
    {
        return $this->refundCaptureAsyncWithHttpInfo($order_transaction_id, $capture_id, $paypal_order_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation refundCaptureAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $order_transaction_id ID of the order transaction which contains the PayPal payment (required)
     * @param  string $capture_id ID of the PayPal capture (required)
     * @param  string $paypal_order_id ID of the PayPal order (required)
     * @param  \Swagger\Client\Model\CaptureIdPaypalOrderIdBody $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refundCaptureAsyncWithHttpInfo($order_transaction_id, $capture_id, $paypal_order_id, $body = null)
    {
        $returnType = '\Swagger\Client\Model\SwagPaypalV2OrderRefund';
        $request = $this->refundCaptureRequest($order_transaction_id, $capture_id, $paypal_order_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'refundCapture'
     *
     * @param  string $order_transaction_id ID of the order transaction which contains the PayPal payment (required)
     * @param  string $capture_id ID of the PayPal capture (required)
     * @param  string $paypal_order_id ID of the PayPal order (required)
     * @param  \Swagger\Client\Model\CaptureIdPaypalOrderIdBody $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function refundCaptureRequest($order_transaction_id, $capture_id, $paypal_order_id, $body = null)
    {
        // verify the required parameter 'order_transaction_id' is set
        if ($order_transaction_id === null || (is_array($order_transaction_id) && count($order_transaction_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_transaction_id when calling refundCapture'
            );
        }
        // verify the required parameter 'capture_id' is set
        if ($capture_id === null || (is_array($capture_id) && count($capture_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $capture_id when calling refundCapture'
            );
        }
        // verify the required parameter 'paypal_order_id' is set
        if ($paypal_order_id === null || (is_array($paypal_order_id) && count($paypal_order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $paypal_order_id when calling refundCapture'
            );
        }

        $resourcePath = '/_action/paypal-v2/refund-capture/{orderTransactionId}/{captureId}/{paypalOrderId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_transaction_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderTransactionId' . '}',
                ObjectSerializer::toPathValue($order_transaction_id),
                $resourcePath
            );
        }
        // path params
        if ($capture_id !== null) {
            $resourcePath = str_replace(
                '{' . 'captureId' . '}',
                ObjectSerializer::toPathValue($capture_id),
                $resourcePath
            );
        }
        // path params
        if ($paypal_order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paypalOrderId' . '}',
                ObjectSerializer::toPathValue($paypal_order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation refundDetails
     *
     * @param  string $order_transaction_id ID of the order transaction which contains the PayPal payment (required)
     * @param  string $refund_id ID of the PayPal refund (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\SwagPaypalV2OrderRefund
     */
    public function refundDetails($order_transaction_id, $refund_id)
    {
        list($response) = $this->refundDetailsWithHttpInfo($order_transaction_id, $refund_id);
        return $response;
    }

    /**
     * Operation refundDetailsWithHttpInfo
     *
     * @param  string $order_transaction_id ID of the order transaction which contains the PayPal payment (required)
     * @param  string $refund_id ID of the PayPal refund (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\SwagPaypalV2OrderRefund, HTTP status code, HTTP response headers (array of strings)
     */
    public function refundDetailsWithHttpInfo($order_transaction_id, $refund_id)
    {
        $returnType = '\Swagger\Client\Model\SwagPaypalV2OrderRefund';
        $request = $this->refundDetailsRequest($order_transaction_id, $refund_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\SwagPaypalV2OrderRefund',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation refundDetailsAsync
     *
     * 
     *
     * @param  string $order_transaction_id ID of the order transaction which contains the PayPal payment (required)
     * @param  string $refund_id ID of the PayPal refund (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refundDetailsAsync($order_transaction_id, $refund_id)
    {
        return $this->refundDetailsAsyncWithHttpInfo($order_transaction_id, $refund_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation refundDetailsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $order_transaction_id ID of the order transaction which contains the PayPal payment (required)
     * @param  string $refund_id ID of the PayPal refund (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function refundDetailsAsyncWithHttpInfo($order_transaction_id, $refund_id)
    {
        $returnType = '\Swagger\Client\Model\SwagPaypalV2OrderRefund';
        $request = $this->refundDetailsRequest($order_transaction_id, $refund_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'refundDetails'
     *
     * @param  string $order_transaction_id ID of the order transaction which contains the PayPal payment (required)
     * @param  string $refund_id ID of the PayPal refund (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function refundDetailsRequest($order_transaction_id, $refund_id)
    {
        // verify the required parameter 'order_transaction_id' is set
        if ($order_transaction_id === null || (is_array($order_transaction_id) && count($order_transaction_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_transaction_id when calling refundDetails'
            );
        }
        // verify the required parameter 'refund_id' is set
        if ($refund_id === null || (is_array($refund_id) && count($refund_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $refund_id when calling refundDetails'
            );
        }

        $resourcePath = '/paypal-v2/refund/{orderTransactionId}/{refundId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_transaction_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderTransactionId' . '}',
                ObjectSerializer::toPathValue($order_transaction_id),
                $resourcePath
            );
        }
        // path params
        if ($refund_id !== null) {
            $resourcePath = str_replace(
                '{' . 'refundId' . '}',
                ObjectSerializer::toPathValue($refund_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation resourceDetails
     *
     * @param  string $resource_type Type of the resource. Possible values: sale, authorization, order, capture, refund (required)
     * @param  string $resource_id ID of the PayPal resource (required)
     * @param  string $order_id ID of the order which contains the PayPal resource (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InlineResponse200
     */
    public function resourceDetails($resource_type, $resource_id, $order_id)
    {
        list($response) = $this->resourceDetailsWithHttpInfo($resource_type, $resource_id, $order_id);
        return $response;
    }

    /**
     * Operation resourceDetailsWithHttpInfo
     *
     * @param  string $resource_type Type of the resource. Possible values: sale, authorization, order, capture, refund (required)
     * @param  string $resource_id ID of the PayPal resource (required)
     * @param  string $order_id ID of the order which contains the PayPal resource (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InlineResponse200, HTTP status code, HTTP response headers (array of strings)
     */
    public function resourceDetailsWithHttpInfo($resource_type, $resource_id, $order_id)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse200';
        $request = $this->resourceDetailsRequest($resource_type, $resource_id, $order_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InlineResponse200',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation resourceDetailsAsync
     *
     * 
     *
     * @param  string $resource_type Type of the resource. Possible values: sale, authorization, order, capture, refund (required)
     * @param  string $resource_id ID of the PayPal resource (required)
     * @param  string $order_id ID of the order which contains the PayPal resource (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resourceDetailsAsync($resource_type, $resource_id, $order_id)
    {
        return $this->resourceDetailsAsyncWithHttpInfo($resource_type, $resource_id, $order_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation resourceDetailsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $resource_type Type of the resource. Possible values: sale, authorization, order, capture, refund (required)
     * @param  string $resource_id ID of the PayPal resource (required)
     * @param  string $order_id ID of the order which contains the PayPal resource (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function resourceDetailsAsyncWithHttpInfo($resource_type, $resource_id, $order_id)
    {
        $returnType = '\Swagger\Client\Model\InlineResponse200';
        $request = $this->resourceDetailsRequest($resource_type, $resource_id, $order_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'resourceDetails'
     *
     * @param  string $resource_type Type of the resource. Possible values: sale, authorization, order, capture, refund (required)
     * @param  string $resource_id ID of the PayPal resource (required)
     * @param  string $order_id ID of the order which contains the PayPal resource (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function resourceDetailsRequest($resource_type, $resource_id, $order_id)
    {
        // verify the required parameter 'resource_type' is set
        if ($resource_type === null || (is_array($resource_type) && count($resource_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $resource_type when calling resourceDetails'
            );
        }
        // verify the required parameter 'resource_id' is set
        if ($resource_id === null || (is_array($resource_id) && count($resource_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $resource_id when calling resourceDetails'
            );
        }
        // verify the required parameter 'order_id' is set
        if ($order_id === null || (is_array($order_id) && count($order_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_id when calling resourceDetails'
            );
        }

        $resourcePath = '/paypal/resource-details/{resourceType}/{resourceId}/{orderId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($resource_type !== null) {
            $resourcePath = str_replace(
                '{' . 'resourceType' . '}',
                ObjectSerializer::toPathValue($resource_type),
                $resourcePath
            );
        }
        // path params
        if ($resource_id !== null) {
            $resourcePath = str_replace(
                '{' . 'resourceId' . '}',
                ObjectSerializer::toPathValue($resource_id),
                $resourcePath
            );
        }
        // path params
        if ($order_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderId' . '}',
                ObjectSerializer::toPathValue($order_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation voidAuthorization
     *
     * @param  string $order_transaction_id ID of the order transaction which contains the PayPal payment (required)
     * @param  string $authorization_id ID of the PayPal authorization (required)
     * @param  \Swagger\Client\Model\OrderTransactionIdAuthorizationIdBody1 $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function voidAuthorization($order_transaction_id, $authorization_id, $body = null)
    {
        $this->voidAuthorizationWithHttpInfo($order_transaction_id, $authorization_id, $body);
    }

    /**
     * Operation voidAuthorizationWithHttpInfo
     *
     * @param  string $order_transaction_id ID of the order transaction which contains the PayPal payment (required)
     * @param  string $authorization_id ID of the PayPal authorization (required)
     * @param  \Swagger\Client\Model\OrderTransactionIdAuthorizationIdBody1 $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function voidAuthorizationWithHttpInfo($order_transaction_id, $authorization_id, $body = null)
    {
        $returnType = '';
        $request = $this->voidAuthorizationRequest($order_transaction_id, $authorization_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation voidAuthorizationAsync
     *
     * 
     *
     * @param  string $order_transaction_id ID of the order transaction which contains the PayPal payment (required)
     * @param  string $authorization_id ID of the PayPal authorization (required)
     * @param  \Swagger\Client\Model\OrderTransactionIdAuthorizationIdBody1 $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function voidAuthorizationAsync($order_transaction_id, $authorization_id, $body = null)
    {
        return $this->voidAuthorizationAsyncWithHttpInfo($order_transaction_id, $authorization_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation voidAuthorizationAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $order_transaction_id ID of the order transaction which contains the PayPal payment (required)
     * @param  string $authorization_id ID of the PayPal authorization (required)
     * @param  \Swagger\Client\Model\OrderTransactionIdAuthorizationIdBody1 $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function voidAuthorizationAsyncWithHttpInfo($order_transaction_id, $authorization_id, $body = null)
    {
        $returnType = '';
        $request = $this->voidAuthorizationRequest($order_transaction_id, $authorization_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'voidAuthorization'
     *
     * @param  string $order_transaction_id ID of the order transaction which contains the PayPal payment (required)
     * @param  string $authorization_id ID of the PayPal authorization (required)
     * @param  \Swagger\Client\Model\OrderTransactionIdAuthorizationIdBody1 $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function voidAuthorizationRequest($order_transaction_id, $authorization_id, $body = null)
    {
        // verify the required parameter 'order_transaction_id' is set
        if ($order_transaction_id === null || (is_array($order_transaction_id) && count($order_transaction_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $order_transaction_id when calling voidAuthorization'
            );
        }
        // verify the required parameter 'authorization_id' is set
        if ($authorization_id === null || (is_array($authorization_id) && count($authorization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorization_id when calling voidAuthorization'
            );
        }

        $resourcePath = '/_action/paypal-v2/void-authorization/{orderTransactionId}/{authorizationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($order_transaction_id !== null) {
            $resourcePath = str_replace(
                '{' . 'orderTransactionId' . '}',
                ObjectSerializer::toPathValue($order_transaction_id),
                $resourcePath
            );
        }
        // path params
        if ($authorization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'authorizationId' . '}',
                ObjectSerializer::toPathValue($authorization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
