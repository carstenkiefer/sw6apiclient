<?php
/**
 * UserJsonApiRelationships
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shopware Admin API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Admin API.  For a better overview, all CRUD-endpoints are hidden by default. If you want to show also CRUD-endpoints add the query parameter `type=jsonapi`.
 *
 * OpenAPI spec version: 6.4.7.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.31
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * UserJsonApiRelationships Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserJsonApiRelationships implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UserJsonApi_relationships';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'locale' => '\Swagger\Client\Model\UserJsonApiRelationshipsLocale',
'avatar_media' => '\Swagger\Client\Model\UserJsonApiRelationshipsAvatarMedia',
'media' => '\Swagger\Client\Model\UserJsonApiRelationshipsMedia',
'access_keys' => '\Swagger\Client\Model\UserJsonApiRelationshipsAccessKeys',
'configs' => '\Swagger\Client\Model\UserJsonApiRelationshipsConfigs',
'state_machine_history_entries' => '\Swagger\Client\Model\UserJsonApiRelationshipsStateMachineHistoryEntries',
'import_export_log_entries' => '\Swagger\Client\Model\UserJsonApiRelationshipsImportExportLogEntries',
'acl_roles' => '\Swagger\Client\Model\UserJsonApiRelationshipsAclRoles',
'recovery_user' => '\Swagger\Client\Model\UserJsonApiRelationshipsRecoveryUser',
'created_orders' => '\Swagger\Client\Model\UserJsonApiRelationshipsCreatedOrders',
'updated_orders' => '\Swagger\Client\Model\UserJsonApiRelationshipsUpdatedOrders'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'locale' => null,
'avatar_media' => null,
'media' => null,
'access_keys' => null,
'configs' => null,
'state_machine_history_entries' => null,
'import_export_log_entries' => null,
'acl_roles' => null,
'recovery_user' => null,
'created_orders' => null,
'updated_orders' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'locale' => 'locale',
'avatar_media' => 'avatarMedia',
'media' => 'media',
'access_keys' => 'accessKeys',
'configs' => 'configs',
'state_machine_history_entries' => 'stateMachineHistoryEntries',
'import_export_log_entries' => 'importExportLogEntries',
'acl_roles' => 'aclRoles',
'recovery_user' => 'recoveryUser',
'created_orders' => 'createdOrders',
'updated_orders' => 'updatedOrders'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'locale' => 'setLocale',
'avatar_media' => 'setAvatarMedia',
'media' => 'setMedia',
'access_keys' => 'setAccessKeys',
'configs' => 'setConfigs',
'state_machine_history_entries' => 'setStateMachineHistoryEntries',
'import_export_log_entries' => 'setImportExportLogEntries',
'acl_roles' => 'setAclRoles',
'recovery_user' => 'setRecoveryUser',
'created_orders' => 'setCreatedOrders',
'updated_orders' => 'setUpdatedOrders'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'locale' => 'getLocale',
'avatar_media' => 'getAvatarMedia',
'media' => 'getMedia',
'access_keys' => 'getAccessKeys',
'configs' => 'getConfigs',
'state_machine_history_entries' => 'getStateMachineHistoryEntries',
'import_export_log_entries' => 'getImportExportLogEntries',
'acl_roles' => 'getAclRoles',
'recovery_user' => 'getRecoveryUser',
'created_orders' => 'getCreatedOrders',
'updated_orders' => 'getUpdatedOrders'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['locale'] = isset($data['locale']) ? $data['locale'] : null;
        $this->container['avatar_media'] = isset($data['avatar_media']) ? $data['avatar_media'] : null;
        $this->container['media'] = isset($data['media']) ? $data['media'] : null;
        $this->container['access_keys'] = isset($data['access_keys']) ? $data['access_keys'] : null;
        $this->container['configs'] = isset($data['configs']) ? $data['configs'] : null;
        $this->container['state_machine_history_entries'] = isset($data['state_machine_history_entries']) ? $data['state_machine_history_entries'] : null;
        $this->container['import_export_log_entries'] = isset($data['import_export_log_entries']) ? $data['import_export_log_entries'] : null;
        $this->container['acl_roles'] = isset($data['acl_roles']) ? $data['acl_roles'] : null;
        $this->container['recovery_user'] = isset($data['recovery_user']) ? $data['recovery_user'] : null;
        $this->container['created_orders'] = isset($data['created_orders']) ? $data['created_orders'] : null;
        $this->container['updated_orders'] = isset($data['updated_orders']) ? $data['updated_orders'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets locale
     *
     * @return \Swagger\Client\Model\UserJsonApiRelationshipsLocale
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param \Swagger\Client\Model\UserJsonApiRelationshipsLocale $locale locale
     *
     * @return $this
     */
    public function setLocale($locale)
    {
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets avatar_media
     *
     * @return \Swagger\Client\Model\UserJsonApiRelationshipsAvatarMedia
     */
    public function getAvatarMedia()
    {
        return $this->container['avatar_media'];
    }

    /**
     * Sets avatar_media
     *
     * @param \Swagger\Client\Model\UserJsonApiRelationshipsAvatarMedia $avatar_media avatar_media
     *
     * @return $this
     */
    public function setAvatarMedia($avatar_media)
    {
        $this->container['avatar_media'] = $avatar_media;

        return $this;
    }

    /**
     * Gets media
     *
     * @return \Swagger\Client\Model\UserJsonApiRelationshipsMedia
     */
    public function getMedia()
    {
        return $this->container['media'];
    }

    /**
     * Sets media
     *
     * @param \Swagger\Client\Model\UserJsonApiRelationshipsMedia $media media
     *
     * @return $this
     */
    public function setMedia($media)
    {
        $this->container['media'] = $media;

        return $this;
    }

    /**
     * Gets access_keys
     *
     * @return \Swagger\Client\Model\UserJsonApiRelationshipsAccessKeys
     */
    public function getAccessKeys()
    {
        return $this->container['access_keys'];
    }

    /**
     * Sets access_keys
     *
     * @param \Swagger\Client\Model\UserJsonApiRelationshipsAccessKeys $access_keys access_keys
     *
     * @return $this
     */
    public function setAccessKeys($access_keys)
    {
        $this->container['access_keys'] = $access_keys;

        return $this;
    }

    /**
     * Gets configs
     *
     * @return \Swagger\Client\Model\UserJsonApiRelationshipsConfigs
     */
    public function getConfigs()
    {
        return $this->container['configs'];
    }

    /**
     * Sets configs
     *
     * @param \Swagger\Client\Model\UserJsonApiRelationshipsConfigs $configs configs
     *
     * @return $this
     */
    public function setConfigs($configs)
    {
        $this->container['configs'] = $configs;

        return $this;
    }

    /**
     * Gets state_machine_history_entries
     *
     * @return \Swagger\Client\Model\UserJsonApiRelationshipsStateMachineHistoryEntries
     */
    public function getStateMachineHistoryEntries()
    {
        return $this->container['state_machine_history_entries'];
    }

    /**
     * Sets state_machine_history_entries
     *
     * @param \Swagger\Client\Model\UserJsonApiRelationshipsStateMachineHistoryEntries $state_machine_history_entries state_machine_history_entries
     *
     * @return $this
     */
    public function setStateMachineHistoryEntries($state_machine_history_entries)
    {
        $this->container['state_machine_history_entries'] = $state_machine_history_entries;

        return $this;
    }

    /**
     * Gets import_export_log_entries
     *
     * @return \Swagger\Client\Model\UserJsonApiRelationshipsImportExportLogEntries
     */
    public function getImportExportLogEntries()
    {
        return $this->container['import_export_log_entries'];
    }

    /**
     * Sets import_export_log_entries
     *
     * @param \Swagger\Client\Model\UserJsonApiRelationshipsImportExportLogEntries $import_export_log_entries import_export_log_entries
     *
     * @return $this
     */
    public function setImportExportLogEntries($import_export_log_entries)
    {
        $this->container['import_export_log_entries'] = $import_export_log_entries;

        return $this;
    }

    /**
     * Gets acl_roles
     *
     * @return \Swagger\Client\Model\UserJsonApiRelationshipsAclRoles
     */
    public function getAclRoles()
    {
        return $this->container['acl_roles'];
    }

    /**
     * Sets acl_roles
     *
     * @param \Swagger\Client\Model\UserJsonApiRelationshipsAclRoles $acl_roles acl_roles
     *
     * @return $this
     */
    public function setAclRoles($acl_roles)
    {
        $this->container['acl_roles'] = $acl_roles;

        return $this;
    }

    /**
     * Gets recovery_user
     *
     * @return \Swagger\Client\Model\UserJsonApiRelationshipsRecoveryUser
     */
    public function getRecoveryUser()
    {
        return $this->container['recovery_user'];
    }

    /**
     * Sets recovery_user
     *
     * @param \Swagger\Client\Model\UserJsonApiRelationshipsRecoveryUser $recovery_user recovery_user
     *
     * @return $this
     */
    public function setRecoveryUser($recovery_user)
    {
        $this->container['recovery_user'] = $recovery_user;

        return $this;
    }

    /**
     * Gets created_orders
     *
     * @return \Swagger\Client\Model\UserJsonApiRelationshipsCreatedOrders
     */
    public function getCreatedOrders()
    {
        return $this->container['created_orders'];
    }

    /**
     * Sets created_orders
     *
     * @param \Swagger\Client\Model\UserJsonApiRelationshipsCreatedOrders $created_orders created_orders
     *
     * @return $this
     */
    public function setCreatedOrders($created_orders)
    {
        $this->container['created_orders'] = $created_orders;

        return $this;
    }

    /**
     * Gets updated_orders
     *
     * @return \Swagger\Client\Model\UserJsonApiRelationshipsUpdatedOrders
     */
    public function getUpdatedOrders()
    {
        return $this->container['updated_orders'];
    }

    /**
     * Sets updated_orders
     *
     * @param \Swagger\Client\Model\UserJsonApiRelationshipsUpdatedOrders $updated_orders updated_orders
     *
     * @return $this
     */
    public function setUpdatedOrders($updated_orders)
    {
        $this->container['updated_orders'] = $updated_orders;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
