<?php
/**
 * SwagAmazonPayPaymentNotification
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shopware Admin API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Admin API.  For a better overview, all CRUD-endpoints are hidden by default. If you want to show also CRUD-endpoints add the query parameter `type=jsonapi`.
 *
 * OpenAPI spec version: 6.4.7.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.31
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SwagAmazonPayPaymentNotification Class Doc Comment
 *
 * @category Class
 * @description Added since version:
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SwagAmazonPayPaymentNotification implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SwagAmazonPayPaymentNotification';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'order_transaction_id' => 'string',
'order_transaction_version_id' => 'string',
'object_type' => 'string',
'object_id' => 'string',
'charge_permission_id' => 'string',
'notification_id' => 'string',
'notification_version' => 'string',
'notification_type' => 'string',
'processed' => 'bool',
'created_at' => '\DateTime',
'updated_at' => '\DateTime',
'order_transaction' => '\Swagger\Client\Model\OrderTransaction'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'order_transaction_id' => null,
'order_transaction_version_id' => null,
'object_type' => null,
'object_id' => null,
'charge_permission_id' => null,
'notification_id' => null,
'notification_version' => null,
'notification_type' => null,
'processed' => null,
'created_at' => 'date-time',
'updated_at' => 'date-time',
'order_transaction' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'order_transaction_id' => 'orderTransactionId',
'order_transaction_version_id' => 'orderTransactionVersionId',
'object_type' => 'objectType',
'object_id' => 'objectId',
'charge_permission_id' => 'chargePermissionId',
'notification_id' => 'notificationId',
'notification_version' => 'notificationVersion',
'notification_type' => 'notificationType',
'processed' => 'processed',
'created_at' => 'createdAt',
'updated_at' => 'updatedAt',
'order_transaction' => 'orderTransaction'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'order_transaction_id' => 'setOrderTransactionId',
'order_transaction_version_id' => 'setOrderTransactionVersionId',
'object_type' => 'setObjectType',
'object_id' => 'setObjectId',
'charge_permission_id' => 'setChargePermissionId',
'notification_id' => 'setNotificationId',
'notification_version' => 'setNotificationVersion',
'notification_type' => 'setNotificationType',
'processed' => 'setProcessed',
'created_at' => 'setCreatedAt',
'updated_at' => 'setUpdatedAt',
'order_transaction' => 'setOrderTransaction'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'order_transaction_id' => 'getOrderTransactionId',
'order_transaction_version_id' => 'getOrderTransactionVersionId',
'object_type' => 'getObjectType',
'object_id' => 'getObjectId',
'charge_permission_id' => 'getChargePermissionId',
'notification_id' => 'getNotificationId',
'notification_version' => 'getNotificationVersion',
'notification_type' => 'getNotificationType',
'processed' => 'getProcessed',
'created_at' => 'getCreatedAt',
'updated_at' => 'getUpdatedAt',
'order_transaction' => 'getOrderTransaction'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['order_transaction_id'] = isset($data['order_transaction_id']) ? $data['order_transaction_id'] : null;
        $this->container['order_transaction_version_id'] = isset($data['order_transaction_version_id']) ? $data['order_transaction_version_id'] : null;
        $this->container['object_type'] = isset($data['object_type']) ? $data['object_type'] : null;
        $this->container['object_id'] = isset($data['object_id']) ? $data['object_id'] : null;
        $this->container['charge_permission_id'] = isset($data['charge_permission_id']) ? $data['charge_permission_id'] : null;
        $this->container['notification_id'] = isset($data['notification_id']) ? $data['notification_id'] : null;
        $this->container['notification_version'] = isset($data['notification_version']) ? $data['notification_version'] : null;
        $this->container['notification_type'] = isset($data['notification_type']) ? $data['notification_type'] : null;
        $this->container['processed'] = isset($data['processed']) ? $data['processed'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['order_transaction'] = isset($data['order_transaction']) ? $data['order_transaction'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['object_type'] === null) {
            $invalidProperties[] = "'object_type' can't be null";
        }
        if ($this->container['object_id'] === null) {
            $invalidProperties[] = "'object_id' can't be null";
        }
        if ($this->container['notification_id'] === null) {
            $invalidProperties[] = "'notification_id' can't be null";
        }
        if ($this->container['notification_version'] === null) {
            $invalidProperties[] = "'notification_version' can't be null";
        }
        if ($this->container['notification_type'] === null) {
            $invalidProperties[] = "'notification_type' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets order_transaction_id
     *
     * @return string
     */
    public function getOrderTransactionId()
    {
        return $this->container['order_transaction_id'];
    }

    /**
     * Sets order_transaction_id
     *
     * @param string $order_transaction_id order_transaction_id
     *
     * @return $this
     */
    public function setOrderTransactionId($order_transaction_id)
    {
        $this->container['order_transaction_id'] = $order_transaction_id;

        return $this;
    }

    /**
     * Gets order_transaction_version_id
     *
     * @return string
     */
    public function getOrderTransactionVersionId()
    {
        return $this->container['order_transaction_version_id'];
    }

    /**
     * Sets order_transaction_version_id
     *
     * @param string $order_transaction_version_id order_transaction_version_id
     *
     * @return $this
     */
    public function setOrderTransactionVersionId($order_transaction_version_id)
    {
        $this->container['order_transaction_version_id'] = $order_transaction_version_id;

        return $this;
    }

    /**
     * Gets object_type
     *
     * @return string
     */
    public function getObjectType()
    {
        return $this->container['object_type'];
    }

    /**
     * Sets object_type
     *
     * @param string $object_type object_type
     *
     * @return $this
     */
    public function setObjectType($object_type)
    {
        $this->container['object_type'] = $object_type;

        return $this;
    }

    /**
     * Gets object_id
     *
     * @return string
     */
    public function getObjectId()
    {
        return $this->container['object_id'];
    }

    /**
     * Sets object_id
     *
     * @param string $object_id object_id
     *
     * @return $this
     */
    public function setObjectId($object_id)
    {
        $this->container['object_id'] = $object_id;

        return $this;
    }

    /**
     * Gets charge_permission_id
     *
     * @return string
     */
    public function getChargePermissionId()
    {
        return $this->container['charge_permission_id'];
    }

    /**
     * Sets charge_permission_id
     *
     * @param string $charge_permission_id charge_permission_id
     *
     * @return $this
     */
    public function setChargePermissionId($charge_permission_id)
    {
        $this->container['charge_permission_id'] = $charge_permission_id;

        return $this;
    }

    /**
     * Gets notification_id
     *
     * @return string
     */
    public function getNotificationId()
    {
        return $this->container['notification_id'];
    }

    /**
     * Sets notification_id
     *
     * @param string $notification_id notification_id
     *
     * @return $this
     */
    public function setNotificationId($notification_id)
    {
        $this->container['notification_id'] = $notification_id;

        return $this;
    }

    /**
     * Gets notification_version
     *
     * @return string
     */
    public function getNotificationVersion()
    {
        return $this->container['notification_version'];
    }

    /**
     * Sets notification_version
     *
     * @param string $notification_version notification_version
     *
     * @return $this
     */
    public function setNotificationVersion($notification_version)
    {
        $this->container['notification_version'] = $notification_version;

        return $this;
    }

    /**
     * Gets notification_type
     *
     * @return string
     */
    public function getNotificationType()
    {
        return $this->container['notification_type'];
    }

    /**
     * Sets notification_type
     *
     * @param string $notification_type notification_type
     *
     * @return $this
     */
    public function setNotificationType($notification_type)
    {
        $this->container['notification_type'] = $notification_type;

        return $this;
    }

    /**
     * Gets processed
     *
     * @return bool
     */
    public function getProcessed()
    {
        return $this->container['processed'];
    }

    /**
     * Sets processed
     *
     * @param bool $processed processed
     *
     * @return $this
     */
    public function setProcessed($processed)
    {
        $this->container['processed'] = $processed;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets order_transaction
     *
     * @return \Swagger\Client\Model\OrderTransaction
     */
    public function getOrderTransaction()
    {
        return $this->container['order_transaction'];
    }

    /**
     * Sets order_transaction
     *
     * @param \Swagger\Client\Model\OrderTransaction $order_transaction order_transaction
     *
     * @return $this
     */
    public function setOrderTransaction($order_transaction)
    {
        $this->container['order_transaction'] = $order_transaction;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
