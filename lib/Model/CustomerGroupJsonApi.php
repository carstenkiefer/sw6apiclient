<?php
/**
 * CustomerGroupJsonApi
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shopware Admin API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Admin API.  For a better overview, all CRUD-endpoints are hidden by default. If you want to show also CRUD-endpoints add the query parameter `type=jsonapi`.
 *
 * OpenAPI spec version: 6.4.7.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.31
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * CustomerGroupJsonApi Class Doc Comment
 *
 * @category Class
 * @description Added since version: 6.0.0.0
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomerGroupJsonApi extends Resource 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CustomerGroupJsonApi';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'name' => 'string',
'display_gross' => 'bool',
'custom_fields' => 'object',
'registration_active' => 'bool',
'registration_title' => 'string',
'registration_introduction' => 'string',
'registration_only_company_registration' => 'bool',
'registration_seo_meta_description' => 'string',
'created_at' => '\DateTime',
'updated_at' => '\DateTime',
'translated' => 'object',
'relationships' => '\Swagger\Client\Model\CustomerGroupJsonApiRelationships'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'name' => null,
'display_gross' => null,
'custom_fields' => null,
'registration_active' => null,
'registration_title' => null,
'registration_introduction' => null,
'registration_only_company_registration' => null,
'registration_seo_meta_description' => null,
'created_at' => 'date-time',
'updated_at' => 'date-time',
'translated' => null,
'relationships' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'name' => 'name',
'display_gross' => 'displayGross',
'custom_fields' => 'customFields',
'registration_active' => 'registrationActive',
'registration_title' => 'registrationTitle',
'registration_introduction' => 'registrationIntroduction',
'registration_only_company_registration' => 'registrationOnlyCompanyRegistration',
'registration_seo_meta_description' => 'registrationSeoMetaDescription',
'created_at' => 'createdAt',
'updated_at' => 'updatedAt',
'translated' => 'translated',
'relationships' => 'relationships'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'name' => 'setName',
'display_gross' => 'setDisplayGross',
'custom_fields' => 'setCustomFields',
'registration_active' => 'setRegistrationActive',
'registration_title' => 'setRegistrationTitle',
'registration_introduction' => 'setRegistrationIntroduction',
'registration_only_company_registration' => 'setRegistrationOnlyCompanyRegistration',
'registration_seo_meta_description' => 'setRegistrationSeoMetaDescription',
'created_at' => 'setCreatedAt',
'updated_at' => 'setUpdatedAt',
'translated' => 'setTranslated',
'relationships' => 'setRelationships'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'name' => 'getName',
'display_gross' => 'getDisplayGross',
'custom_fields' => 'getCustomFields',
'registration_active' => 'getRegistrationActive',
'registration_title' => 'getRegistrationTitle',
'registration_introduction' => 'getRegistrationIntroduction',
'registration_only_company_registration' => 'getRegistrationOnlyCompanyRegistration',
'registration_seo_meta_description' => 'getRegistrationSeoMetaDescription',
'created_at' => 'getCreatedAt',
'updated_at' => 'getUpdatedAt',
'translated' => 'getTranslated',
'relationships' => 'getRelationships'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['display_gross'] = isset($data['display_gross']) ? $data['display_gross'] : null;
        $this->container['custom_fields'] = isset($data['custom_fields']) ? $data['custom_fields'] : null;
        $this->container['registration_active'] = isset($data['registration_active']) ? $data['registration_active'] : null;
        $this->container['registration_title'] = isset($data['registration_title']) ? $data['registration_title'] : null;
        $this->container['registration_introduction'] = isset($data['registration_introduction']) ? $data['registration_introduction'] : null;
        $this->container['registration_only_company_registration'] = isset($data['registration_only_company_registration']) ? $data['registration_only_company_registration'] : null;
        $this->container['registration_seo_meta_description'] = isset($data['registration_seo_meta_description']) ? $data['registration_seo_meta_description'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['translated'] = isset($data['translated']) ? $data['translated'] : null;
        $this->container['relationships'] = isset($data['relationships']) ? $data['relationships'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets display_gross
     *
     * @return bool
     */
    public function getDisplayGross()
    {
        return $this->container['display_gross'];
    }

    /**
     * Sets display_gross
     *
     * @param bool $display_gross display_gross
     *
     * @return $this
     */
    public function setDisplayGross($display_gross)
    {
        $this->container['display_gross'] = $display_gross;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return object
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param object $custom_fields custom_fields
     *
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets registration_active
     *
     * @return bool
     */
    public function getRegistrationActive()
    {
        return $this->container['registration_active'];
    }

    /**
     * Sets registration_active
     *
     * @param bool $registration_active registration_active
     *
     * @return $this
     */
    public function setRegistrationActive($registration_active)
    {
        $this->container['registration_active'] = $registration_active;

        return $this;
    }

    /**
     * Gets registration_title
     *
     * @return string
     */
    public function getRegistrationTitle()
    {
        return $this->container['registration_title'];
    }

    /**
     * Sets registration_title
     *
     * @param string $registration_title registration_title
     *
     * @return $this
     */
    public function setRegistrationTitle($registration_title)
    {
        $this->container['registration_title'] = $registration_title;

        return $this;
    }

    /**
     * Gets registration_introduction
     *
     * @return string
     */
    public function getRegistrationIntroduction()
    {
        return $this->container['registration_introduction'];
    }

    /**
     * Sets registration_introduction
     *
     * @param string $registration_introduction registration_introduction
     *
     * @return $this
     */
    public function setRegistrationIntroduction($registration_introduction)
    {
        $this->container['registration_introduction'] = $registration_introduction;

        return $this;
    }

    /**
     * Gets registration_only_company_registration
     *
     * @return bool
     */
    public function getRegistrationOnlyCompanyRegistration()
    {
        return $this->container['registration_only_company_registration'];
    }

    /**
     * Sets registration_only_company_registration
     *
     * @param bool $registration_only_company_registration registration_only_company_registration
     *
     * @return $this
     */
    public function setRegistrationOnlyCompanyRegistration($registration_only_company_registration)
    {
        $this->container['registration_only_company_registration'] = $registration_only_company_registration;

        return $this;
    }

    /**
     * Gets registration_seo_meta_description
     *
     * @return string
     */
    public function getRegistrationSeoMetaDescription()
    {
        return $this->container['registration_seo_meta_description'];
    }

    /**
     * Sets registration_seo_meta_description
     *
     * @param string $registration_seo_meta_description registration_seo_meta_description
     *
     * @return $this
     */
    public function setRegistrationSeoMetaDescription($registration_seo_meta_description)
    {
        $this->container['registration_seo_meta_description'] = $registration_seo_meta_description;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets translated
     *
     * @return object
     */
    public function getTranslated()
    {
        return $this->container['translated'];
    }

    /**
     * Sets translated
     *
     * @param object $translated translated
     *
     * @return $this
     */
    public function setTranslated($translated)
    {
        $this->container['translated'] = $translated;

        return $this;
    }

    /**
     * Gets relationships
     *
     * @return \Swagger\Client\Model\CustomerGroupJsonApiRelationships
     */
    public function getRelationships()
    {
        return $this->container['relationships'];
    }

    /**
     * Sets relationships
     *
     * @param \Swagger\Client\Model\CustomerGroupJsonApiRelationships $relationships relationships
     *
     * @return $this
     */
    public function setRelationships($relationships)
    {
        $this->container['relationships'] = $relationships;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
