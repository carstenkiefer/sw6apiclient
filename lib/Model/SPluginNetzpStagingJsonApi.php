<?php
/**
 * SPluginNetzpStagingJsonApi
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shopware Admin API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Admin API.  For a better overview, all CRUD-endpoints are hidden by default. If you want to show also CRUD-endpoints add the query parameter `type=jsonapi`.
 *
 * OpenAPI spec version: 6.4.7.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.31
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * SPluginNetzpStagingJsonApi Class Doc Comment
 *
 * @category Class
 * @description Added since version:
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SPluginNetzpStagingJsonApi extends Resource 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SPluginNetzpStagingJsonApi';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'name' => 'string',
'staging_directory' => 'string',
'anonymizing' => 'string',
'use_cron_job' => 'bool',
'db_server' => 'string',
'db_port' => 'int',
'db_name' => 'string',
'db_user' => 'string',
'db_password' => 'string',
'dirs_excluded' => 'string',
'dirs_initial' => 'string',
'secret' => 'string',
'maintenance_mode' => 'bool',
'access_user' => 'string',
'access_pass' => 'string',
'debugging' => 'bool',
'caching' => 'bool',
'block_robots' => 'bool',
'block_mails' => 'bool',
'db_status' => 'int',
'db_progress' => 'int',
'db_last_creation' => '\DateTime',
'db_count' => 'int',
'files_status' => 'int',
'files_progress' => 'int',
'files_last_creation' => '\DateTime',
'files_count' => 'int',
'created_at' => '\DateTime',
'updated_at' => '\DateTime'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'name' => null,
'staging_directory' => null,
'anonymizing' => null,
'use_cron_job' => null,
'db_server' => null,
'db_port' => 'int64',
'db_name' => null,
'db_user' => null,
'db_password' => null,
'dirs_excluded' => null,
'dirs_initial' => null,
'secret' => null,
'maintenance_mode' => null,
'access_user' => null,
'access_pass' => null,
'debugging' => null,
'caching' => null,
'block_robots' => null,
'block_mails' => null,
'db_status' => 'int64',
'db_progress' => 'int64',
'db_last_creation' => 'date-time',
'db_count' => 'int64',
'files_status' => 'int64',
'files_progress' => 'int64',
'files_last_creation' => 'date-time',
'files_count' => 'int64',
'created_at' => 'date-time',
'updated_at' => 'date-time'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'name' => 'name',
'staging_directory' => 'stagingDirectory',
'anonymizing' => 'anonymizing',
'use_cron_job' => 'useCronJob',
'db_server' => 'dbServer',
'db_port' => 'dbPort',
'db_name' => 'dbName',
'db_user' => 'dbUser',
'db_password' => 'dbPassword',
'dirs_excluded' => 'dirsExcluded',
'dirs_initial' => 'dirsInitial',
'secret' => 'secret',
'maintenance_mode' => 'maintenanceMode',
'access_user' => 'accessUser',
'access_pass' => 'accessPass',
'debugging' => 'debugging',
'caching' => 'caching',
'block_robots' => 'blockRobots',
'block_mails' => 'blockMails',
'db_status' => 'dbStatus',
'db_progress' => 'dbProgress',
'db_last_creation' => 'dbLastCreation',
'db_count' => 'dbCount',
'files_status' => 'filesStatus',
'files_progress' => 'filesProgress',
'files_last_creation' => 'filesLastCreation',
'files_count' => 'filesCount',
'created_at' => 'createdAt',
'updated_at' => 'updatedAt'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'name' => 'setName',
'staging_directory' => 'setStagingDirectory',
'anonymizing' => 'setAnonymizing',
'use_cron_job' => 'setUseCronJob',
'db_server' => 'setDbServer',
'db_port' => 'setDbPort',
'db_name' => 'setDbName',
'db_user' => 'setDbUser',
'db_password' => 'setDbPassword',
'dirs_excluded' => 'setDirsExcluded',
'dirs_initial' => 'setDirsInitial',
'secret' => 'setSecret',
'maintenance_mode' => 'setMaintenanceMode',
'access_user' => 'setAccessUser',
'access_pass' => 'setAccessPass',
'debugging' => 'setDebugging',
'caching' => 'setCaching',
'block_robots' => 'setBlockRobots',
'block_mails' => 'setBlockMails',
'db_status' => 'setDbStatus',
'db_progress' => 'setDbProgress',
'db_last_creation' => 'setDbLastCreation',
'db_count' => 'setDbCount',
'files_status' => 'setFilesStatus',
'files_progress' => 'setFilesProgress',
'files_last_creation' => 'setFilesLastCreation',
'files_count' => 'setFilesCount',
'created_at' => 'setCreatedAt',
'updated_at' => 'setUpdatedAt'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'name' => 'getName',
'staging_directory' => 'getStagingDirectory',
'anonymizing' => 'getAnonymizing',
'use_cron_job' => 'getUseCronJob',
'db_server' => 'getDbServer',
'db_port' => 'getDbPort',
'db_name' => 'getDbName',
'db_user' => 'getDbUser',
'db_password' => 'getDbPassword',
'dirs_excluded' => 'getDirsExcluded',
'dirs_initial' => 'getDirsInitial',
'secret' => 'getSecret',
'maintenance_mode' => 'getMaintenanceMode',
'access_user' => 'getAccessUser',
'access_pass' => 'getAccessPass',
'debugging' => 'getDebugging',
'caching' => 'getCaching',
'block_robots' => 'getBlockRobots',
'block_mails' => 'getBlockMails',
'db_status' => 'getDbStatus',
'db_progress' => 'getDbProgress',
'db_last_creation' => 'getDbLastCreation',
'db_count' => 'getDbCount',
'files_status' => 'getFilesStatus',
'files_progress' => 'getFilesProgress',
'files_last_creation' => 'getFilesLastCreation',
'files_count' => 'getFilesCount',
'created_at' => 'getCreatedAt',
'updated_at' => 'getUpdatedAt'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['staging_directory'] = isset($data['staging_directory']) ? $data['staging_directory'] : null;
        $this->container['anonymizing'] = isset($data['anonymizing']) ? $data['anonymizing'] : null;
        $this->container['use_cron_job'] = isset($data['use_cron_job']) ? $data['use_cron_job'] : null;
        $this->container['db_server'] = isset($data['db_server']) ? $data['db_server'] : null;
        $this->container['db_port'] = isset($data['db_port']) ? $data['db_port'] : null;
        $this->container['db_name'] = isset($data['db_name']) ? $data['db_name'] : null;
        $this->container['db_user'] = isset($data['db_user']) ? $data['db_user'] : null;
        $this->container['db_password'] = isset($data['db_password']) ? $data['db_password'] : null;
        $this->container['dirs_excluded'] = isset($data['dirs_excluded']) ? $data['dirs_excluded'] : null;
        $this->container['dirs_initial'] = isset($data['dirs_initial']) ? $data['dirs_initial'] : null;
        $this->container['secret'] = isset($data['secret']) ? $data['secret'] : null;
        $this->container['maintenance_mode'] = isset($data['maintenance_mode']) ? $data['maintenance_mode'] : null;
        $this->container['access_user'] = isset($data['access_user']) ? $data['access_user'] : null;
        $this->container['access_pass'] = isset($data['access_pass']) ? $data['access_pass'] : null;
        $this->container['debugging'] = isset($data['debugging']) ? $data['debugging'] : null;
        $this->container['caching'] = isset($data['caching']) ? $data['caching'] : null;
        $this->container['block_robots'] = isset($data['block_robots']) ? $data['block_robots'] : null;
        $this->container['block_mails'] = isset($data['block_mails']) ? $data['block_mails'] : null;
        $this->container['db_status'] = isset($data['db_status']) ? $data['db_status'] : null;
        $this->container['db_progress'] = isset($data['db_progress']) ? $data['db_progress'] : null;
        $this->container['db_last_creation'] = isset($data['db_last_creation']) ? $data['db_last_creation'] : null;
        $this->container['db_count'] = isset($data['db_count']) ? $data['db_count'] : null;
        $this->container['files_status'] = isset($data['files_status']) ? $data['files_status'] : null;
        $this->container['files_progress'] = isset($data['files_progress']) ? $data['files_progress'] : null;
        $this->container['files_last_creation'] = isset($data['files_last_creation']) ? $data['files_last_creation'] : null;
        $this->container['files_count'] = isset($data['files_count']) ? $data['files_count'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['staging_directory'] === null) {
            $invalidProperties[] = "'staging_directory' can't be null";
        }
        if ($this->container['db_server'] === null) {
            $invalidProperties[] = "'db_server' can't be null";
        }
        if ($this->container['db_name'] === null) {
            $invalidProperties[] = "'db_name' can't be null";
        }
        if ($this->container['db_user'] === null) {
            $invalidProperties[] = "'db_user' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets staging_directory
     *
     * @return string
     */
    public function getStagingDirectory()
    {
        return $this->container['staging_directory'];
    }

    /**
     * Sets staging_directory
     *
     * @param string $staging_directory staging_directory
     *
     * @return $this
     */
    public function setStagingDirectory($staging_directory)
    {
        $this->container['staging_directory'] = $staging_directory;

        return $this;
    }

    /**
     * Gets anonymizing
     *
     * @return string
     */
    public function getAnonymizing()
    {
        return $this->container['anonymizing'];
    }

    /**
     * Sets anonymizing
     *
     * @param string $anonymizing anonymizing
     *
     * @return $this
     */
    public function setAnonymizing($anonymizing)
    {
        $this->container['anonymizing'] = $anonymizing;

        return $this;
    }

    /**
     * Gets use_cron_job
     *
     * @return bool
     */
    public function getUseCronJob()
    {
        return $this->container['use_cron_job'];
    }

    /**
     * Sets use_cron_job
     *
     * @param bool $use_cron_job use_cron_job
     *
     * @return $this
     */
    public function setUseCronJob($use_cron_job)
    {
        $this->container['use_cron_job'] = $use_cron_job;

        return $this;
    }

    /**
     * Gets db_server
     *
     * @return string
     */
    public function getDbServer()
    {
        return $this->container['db_server'];
    }

    /**
     * Sets db_server
     *
     * @param string $db_server db_server
     *
     * @return $this
     */
    public function setDbServer($db_server)
    {
        $this->container['db_server'] = $db_server;

        return $this;
    }

    /**
     * Gets db_port
     *
     * @return int
     */
    public function getDbPort()
    {
        return $this->container['db_port'];
    }

    /**
     * Sets db_port
     *
     * @param int $db_port db_port
     *
     * @return $this
     */
    public function setDbPort($db_port)
    {
        $this->container['db_port'] = $db_port;

        return $this;
    }

    /**
     * Gets db_name
     *
     * @return string
     */
    public function getDbName()
    {
        return $this->container['db_name'];
    }

    /**
     * Sets db_name
     *
     * @param string $db_name db_name
     *
     * @return $this
     */
    public function setDbName($db_name)
    {
        $this->container['db_name'] = $db_name;

        return $this;
    }

    /**
     * Gets db_user
     *
     * @return string
     */
    public function getDbUser()
    {
        return $this->container['db_user'];
    }

    /**
     * Sets db_user
     *
     * @param string $db_user db_user
     *
     * @return $this
     */
    public function setDbUser($db_user)
    {
        $this->container['db_user'] = $db_user;

        return $this;
    }

    /**
     * Gets db_password
     *
     * @return string
     */
    public function getDbPassword()
    {
        return $this->container['db_password'];
    }

    /**
     * Sets db_password
     *
     * @param string $db_password db_password
     *
     * @return $this
     */
    public function setDbPassword($db_password)
    {
        $this->container['db_password'] = $db_password;

        return $this;
    }

    /**
     * Gets dirs_excluded
     *
     * @return string
     */
    public function getDirsExcluded()
    {
        return $this->container['dirs_excluded'];
    }

    /**
     * Sets dirs_excluded
     *
     * @param string $dirs_excluded dirs_excluded
     *
     * @return $this
     */
    public function setDirsExcluded($dirs_excluded)
    {
        $this->container['dirs_excluded'] = $dirs_excluded;

        return $this;
    }

    /**
     * Gets dirs_initial
     *
     * @return string
     */
    public function getDirsInitial()
    {
        return $this->container['dirs_initial'];
    }

    /**
     * Sets dirs_initial
     *
     * @param string $dirs_initial dirs_initial
     *
     * @return $this
     */
    public function setDirsInitial($dirs_initial)
    {
        $this->container['dirs_initial'] = $dirs_initial;

        return $this;
    }

    /**
     * Gets secret
     *
     * @return string
     */
    public function getSecret()
    {
        return $this->container['secret'];
    }

    /**
     * Sets secret
     *
     * @param string $secret secret
     *
     * @return $this
     */
    public function setSecret($secret)
    {
        $this->container['secret'] = $secret;

        return $this;
    }

    /**
     * Gets maintenance_mode
     *
     * @return bool
     */
    public function getMaintenanceMode()
    {
        return $this->container['maintenance_mode'];
    }

    /**
     * Sets maintenance_mode
     *
     * @param bool $maintenance_mode maintenance_mode
     *
     * @return $this
     */
    public function setMaintenanceMode($maintenance_mode)
    {
        $this->container['maintenance_mode'] = $maintenance_mode;

        return $this;
    }

    /**
     * Gets access_user
     *
     * @return string
     */
    public function getAccessUser()
    {
        return $this->container['access_user'];
    }

    /**
     * Sets access_user
     *
     * @param string $access_user access_user
     *
     * @return $this
     */
    public function setAccessUser($access_user)
    {
        $this->container['access_user'] = $access_user;

        return $this;
    }

    /**
     * Gets access_pass
     *
     * @return string
     */
    public function getAccessPass()
    {
        return $this->container['access_pass'];
    }

    /**
     * Sets access_pass
     *
     * @param string $access_pass access_pass
     *
     * @return $this
     */
    public function setAccessPass($access_pass)
    {
        $this->container['access_pass'] = $access_pass;

        return $this;
    }

    /**
     * Gets debugging
     *
     * @return bool
     */
    public function getDebugging()
    {
        return $this->container['debugging'];
    }

    /**
     * Sets debugging
     *
     * @param bool $debugging debugging
     *
     * @return $this
     */
    public function setDebugging($debugging)
    {
        $this->container['debugging'] = $debugging;

        return $this;
    }

    /**
     * Gets caching
     *
     * @return bool
     */
    public function getCaching()
    {
        return $this->container['caching'];
    }

    /**
     * Sets caching
     *
     * @param bool $caching caching
     *
     * @return $this
     */
    public function setCaching($caching)
    {
        $this->container['caching'] = $caching;

        return $this;
    }

    /**
     * Gets block_robots
     *
     * @return bool
     */
    public function getBlockRobots()
    {
        return $this->container['block_robots'];
    }

    /**
     * Sets block_robots
     *
     * @param bool $block_robots block_robots
     *
     * @return $this
     */
    public function setBlockRobots($block_robots)
    {
        $this->container['block_robots'] = $block_robots;

        return $this;
    }

    /**
     * Gets block_mails
     *
     * @return bool
     */
    public function getBlockMails()
    {
        return $this->container['block_mails'];
    }

    /**
     * Sets block_mails
     *
     * @param bool $block_mails block_mails
     *
     * @return $this
     */
    public function setBlockMails($block_mails)
    {
        $this->container['block_mails'] = $block_mails;

        return $this;
    }

    /**
     * Gets db_status
     *
     * @return int
     */
    public function getDbStatus()
    {
        return $this->container['db_status'];
    }

    /**
     * Sets db_status
     *
     * @param int $db_status db_status
     *
     * @return $this
     */
    public function setDbStatus($db_status)
    {
        $this->container['db_status'] = $db_status;

        return $this;
    }

    /**
     * Gets db_progress
     *
     * @return int
     */
    public function getDbProgress()
    {
        return $this->container['db_progress'];
    }

    /**
     * Sets db_progress
     *
     * @param int $db_progress db_progress
     *
     * @return $this
     */
    public function setDbProgress($db_progress)
    {
        $this->container['db_progress'] = $db_progress;

        return $this;
    }

    /**
     * Gets db_last_creation
     *
     * @return \DateTime
     */
    public function getDbLastCreation()
    {
        return $this->container['db_last_creation'];
    }

    /**
     * Sets db_last_creation
     *
     * @param \DateTime $db_last_creation db_last_creation
     *
     * @return $this
     */
    public function setDbLastCreation($db_last_creation)
    {
        $this->container['db_last_creation'] = $db_last_creation;

        return $this;
    }

    /**
     * Gets db_count
     *
     * @return int
     */
    public function getDbCount()
    {
        return $this->container['db_count'];
    }

    /**
     * Sets db_count
     *
     * @param int $db_count db_count
     *
     * @return $this
     */
    public function setDbCount($db_count)
    {
        $this->container['db_count'] = $db_count;

        return $this;
    }

    /**
     * Gets files_status
     *
     * @return int
     */
    public function getFilesStatus()
    {
        return $this->container['files_status'];
    }

    /**
     * Sets files_status
     *
     * @param int $files_status files_status
     *
     * @return $this
     */
    public function setFilesStatus($files_status)
    {
        $this->container['files_status'] = $files_status;

        return $this;
    }

    /**
     * Gets files_progress
     *
     * @return int
     */
    public function getFilesProgress()
    {
        return $this->container['files_progress'];
    }

    /**
     * Sets files_progress
     *
     * @param int $files_progress files_progress
     *
     * @return $this
     */
    public function setFilesProgress($files_progress)
    {
        $this->container['files_progress'] = $files_progress;

        return $this;
    }

    /**
     * Gets files_last_creation
     *
     * @return \DateTime
     */
    public function getFilesLastCreation()
    {
        return $this->container['files_last_creation'];
    }

    /**
     * Sets files_last_creation
     *
     * @param \DateTime $files_last_creation files_last_creation
     *
     * @return $this
     */
    public function setFilesLastCreation($files_last_creation)
    {
        $this->container['files_last_creation'] = $files_last_creation;

        return $this;
    }

    /**
     * Gets files_count
     *
     * @return int
     */
    public function getFilesCount()
    {
        return $this->container['files_count'];
    }

    /**
     * Sets files_count
     *
     * @param int $files_count files_count
     *
     * @return $this
     */
    public function setFilesCount($files_count)
    {
        $this->container['files_count'] = $files_count;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
