<?php
/**
 * LanguageJsonApiRelationships
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shopware Admin API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Admin API.  For a better overview, all CRUD-endpoints are hidden by default. If you want to show also CRUD-endpoints add the query parameter `type=jsonapi`.
 *
 * OpenAPI spec version: 6.4.7.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.31
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * LanguageJsonApiRelationships Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LanguageJsonApiRelationships implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LanguageJsonApi_relationships';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'parent' => '\Swagger\Client\Model\LanguageJsonApiRelationshipsParent',
'locale' => '\Swagger\Client\Model\LanguageJsonApiRelationshipsLocale',
'translation_code' => '\Swagger\Client\Model\LanguageJsonApiRelationshipsTranslationCode',
'children' => '\Swagger\Client\Model\LanguageJsonApiRelationshipsChildren',
'sales_channels' => '\Swagger\Client\Model\LanguageJsonApiRelationshipsSalesChannels',
'sales_channel_default_assignments' => '\Swagger\Client\Model\LanguageJsonApiRelationshipsSalesChannelDefaultAssignments',
'sales_channel_domains' => '\Swagger\Client\Model\LanguageJsonApiRelationshipsSalesChannelDomains',
'customers' => '\Swagger\Client\Model\LanguageJsonApiRelationshipsCustomers',
'newsletter_recipients' => '\Swagger\Client\Model\LanguageJsonApiRelationshipsNewsletterRecipients',
'orders' => '\Swagger\Client\Model\LanguageJsonApiRelationshipsOrders',
'product_search_keywords' => '\Swagger\Client\Model\LanguageJsonApiRelationshipsProductSearchKeywords',
'product_keyword_dictionaries' => '\Swagger\Client\Model\LanguageJsonApiRelationshipsProductKeywordDictionaries',
'product_reviews' => '\Swagger\Client\Model\LanguageJsonApiRelationshipsProductReviews',
'product_search_config' => '\Swagger\Client\Model\LanguageJsonApiRelationshipsProductSearchConfig'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'parent' => null,
'locale' => null,
'translation_code' => null,
'children' => null,
'sales_channels' => null,
'sales_channel_default_assignments' => null,
'sales_channel_domains' => null,
'customers' => null,
'newsletter_recipients' => null,
'orders' => null,
'product_search_keywords' => null,
'product_keyword_dictionaries' => null,
'product_reviews' => null,
'product_search_config' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'parent' => 'parent',
'locale' => 'locale',
'translation_code' => 'translationCode',
'children' => 'children',
'sales_channels' => 'salesChannels',
'sales_channel_default_assignments' => 'salesChannelDefaultAssignments',
'sales_channel_domains' => 'salesChannelDomains',
'customers' => 'customers',
'newsletter_recipients' => 'newsletterRecipients',
'orders' => 'orders',
'product_search_keywords' => 'productSearchKeywords',
'product_keyword_dictionaries' => 'productKeywordDictionaries',
'product_reviews' => 'productReviews',
'product_search_config' => 'productSearchConfig'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'parent' => 'setParent',
'locale' => 'setLocale',
'translation_code' => 'setTranslationCode',
'children' => 'setChildren',
'sales_channels' => 'setSalesChannels',
'sales_channel_default_assignments' => 'setSalesChannelDefaultAssignments',
'sales_channel_domains' => 'setSalesChannelDomains',
'customers' => 'setCustomers',
'newsletter_recipients' => 'setNewsletterRecipients',
'orders' => 'setOrders',
'product_search_keywords' => 'setProductSearchKeywords',
'product_keyword_dictionaries' => 'setProductKeywordDictionaries',
'product_reviews' => 'setProductReviews',
'product_search_config' => 'setProductSearchConfig'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'parent' => 'getParent',
'locale' => 'getLocale',
'translation_code' => 'getTranslationCode',
'children' => 'getChildren',
'sales_channels' => 'getSalesChannels',
'sales_channel_default_assignments' => 'getSalesChannelDefaultAssignments',
'sales_channel_domains' => 'getSalesChannelDomains',
'customers' => 'getCustomers',
'newsletter_recipients' => 'getNewsletterRecipients',
'orders' => 'getOrders',
'product_search_keywords' => 'getProductSearchKeywords',
'product_keyword_dictionaries' => 'getProductKeywordDictionaries',
'product_reviews' => 'getProductReviews',
'product_search_config' => 'getProductSearchConfig'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['parent'] = isset($data['parent']) ? $data['parent'] : null;
        $this->container['locale'] = isset($data['locale']) ? $data['locale'] : null;
        $this->container['translation_code'] = isset($data['translation_code']) ? $data['translation_code'] : null;
        $this->container['children'] = isset($data['children']) ? $data['children'] : null;
        $this->container['sales_channels'] = isset($data['sales_channels']) ? $data['sales_channels'] : null;
        $this->container['sales_channel_default_assignments'] = isset($data['sales_channel_default_assignments']) ? $data['sales_channel_default_assignments'] : null;
        $this->container['sales_channel_domains'] = isset($data['sales_channel_domains']) ? $data['sales_channel_domains'] : null;
        $this->container['customers'] = isset($data['customers']) ? $data['customers'] : null;
        $this->container['newsletter_recipients'] = isset($data['newsletter_recipients']) ? $data['newsletter_recipients'] : null;
        $this->container['orders'] = isset($data['orders']) ? $data['orders'] : null;
        $this->container['product_search_keywords'] = isset($data['product_search_keywords']) ? $data['product_search_keywords'] : null;
        $this->container['product_keyword_dictionaries'] = isset($data['product_keyword_dictionaries']) ? $data['product_keyword_dictionaries'] : null;
        $this->container['product_reviews'] = isset($data['product_reviews']) ? $data['product_reviews'] : null;
        $this->container['product_search_config'] = isset($data['product_search_config']) ? $data['product_search_config'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets parent
     *
     * @return \Swagger\Client\Model\LanguageJsonApiRelationshipsParent
     */
    public function getParent()
    {
        return $this->container['parent'];
    }

    /**
     * Sets parent
     *
     * @param \Swagger\Client\Model\LanguageJsonApiRelationshipsParent $parent parent
     *
     * @return $this
     */
    public function setParent($parent)
    {
        $this->container['parent'] = $parent;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return \Swagger\Client\Model\LanguageJsonApiRelationshipsLocale
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param \Swagger\Client\Model\LanguageJsonApiRelationshipsLocale $locale locale
     *
     * @return $this
     */
    public function setLocale($locale)
    {
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets translation_code
     *
     * @return \Swagger\Client\Model\LanguageJsonApiRelationshipsTranslationCode
     */
    public function getTranslationCode()
    {
        return $this->container['translation_code'];
    }

    /**
     * Sets translation_code
     *
     * @param \Swagger\Client\Model\LanguageJsonApiRelationshipsTranslationCode $translation_code translation_code
     *
     * @return $this
     */
    public function setTranslationCode($translation_code)
    {
        $this->container['translation_code'] = $translation_code;

        return $this;
    }

    /**
     * Gets children
     *
     * @return \Swagger\Client\Model\LanguageJsonApiRelationshipsChildren
     */
    public function getChildren()
    {
        return $this->container['children'];
    }

    /**
     * Sets children
     *
     * @param \Swagger\Client\Model\LanguageJsonApiRelationshipsChildren $children children
     *
     * @return $this
     */
    public function setChildren($children)
    {
        $this->container['children'] = $children;

        return $this;
    }

    /**
     * Gets sales_channels
     *
     * @return \Swagger\Client\Model\LanguageJsonApiRelationshipsSalesChannels
     */
    public function getSalesChannels()
    {
        return $this->container['sales_channels'];
    }

    /**
     * Sets sales_channels
     *
     * @param \Swagger\Client\Model\LanguageJsonApiRelationshipsSalesChannels $sales_channels sales_channels
     *
     * @return $this
     */
    public function setSalesChannels($sales_channels)
    {
        $this->container['sales_channels'] = $sales_channels;

        return $this;
    }

    /**
     * Gets sales_channel_default_assignments
     *
     * @return \Swagger\Client\Model\LanguageJsonApiRelationshipsSalesChannelDefaultAssignments
     */
    public function getSalesChannelDefaultAssignments()
    {
        return $this->container['sales_channel_default_assignments'];
    }

    /**
     * Sets sales_channel_default_assignments
     *
     * @param \Swagger\Client\Model\LanguageJsonApiRelationshipsSalesChannelDefaultAssignments $sales_channel_default_assignments sales_channel_default_assignments
     *
     * @return $this
     */
    public function setSalesChannelDefaultAssignments($sales_channel_default_assignments)
    {
        $this->container['sales_channel_default_assignments'] = $sales_channel_default_assignments;

        return $this;
    }

    /**
     * Gets sales_channel_domains
     *
     * @return \Swagger\Client\Model\LanguageJsonApiRelationshipsSalesChannelDomains
     */
    public function getSalesChannelDomains()
    {
        return $this->container['sales_channel_domains'];
    }

    /**
     * Sets sales_channel_domains
     *
     * @param \Swagger\Client\Model\LanguageJsonApiRelationshipsSalesChannelDomains $sales_channel_domains sales_channel_domains
     *
     * @return $this
     */
    public function setSalesChannelDomains($sales_channel_domains)
    {
        $this->container['sales_channel_domains'] = $sales_channel_domains;

        return $this;
    }

    /**
     * Gets customers
     *
     * @return \Swagger\Client\Model\LanguageJsonApiRelationshipsCustomers
     */
    public function getCustomers()
    {
        return $this->container['customers'];
    }

    /**
     * Sets customers
     *
     * @param \Swagger\Client\Model\LanguageJsonApiRelationshipsCustomers $customers customers
     *
     * @return $this
     */
    public function setCustomers($customers)
    {
        $this->container['customers'] = $customers;

        return $this;
    }

    /**
     * Gets newsletter_recipients
     *
     * @return \Swagger\Client\Model\LanguageJsonApiRelationshipsNewsletterRecipients
     */
    public function getNewsletterRecipients()
    {
        return $this->container['newsletter_recipients'];
    }

    /**
     * Sets newsletter_recipients
     *
     * @param \Swagger\Client\Model\LanguageJsonApiRelationshipsNewsletterRecipients $newsletter_recipients newsletter_recipients
     *
     * @return $this
     */
    public function setNewsletterRecipients($newsletter_recipients)
    {
        $this->container['newsletter_recipients'] = $newsletter_recipients;

        return $this;
    }

    /**
     * Gets orders
     *
     * @return \Swagger\Client\Model\LanguageJsonApiRelationshipsOrders
     */
    public function getOrders()
    {
        return $this->container['orders'];
    }

    /**
     * Sets orders
     *
     * @param \Swagger\Client\Model\LanguageJsonApiRelationshipsOrders $orders orders
     *
     * @return $this
     */
    public function setOrders($orders)
    {
        $this->container['orders'] = $orders;

        return $this;
    }

    /**
     * Gets product_search_keywords
     *
     * @return \Swagger\Client\Model\LanguageJsonApiRelationshipsProductSearchKeywords
     */
    public function getProductSearchKeywords()
    {
        return $this->container['product_search_keywords'];
    }

    /**
     * Sets product_search_keywords
     *
     * @param \Swagger\Client\Model\LanguageJsonApiRelationshipsProductSearchKeywords $product_search_keywords product_search_keywords
     *
     * @return $this
     */
    public function setProductSearchKeywords($product_search_keywords)
    {
        $this->container['product_search_keywords'] = $product_search_keywords;

        return $this;
    }

    /**
     * Gets product_keyword_dictionaries
     *
     * @return \Swagger\Client\Model\LanguageJsonApiRelationshipsProductKeywordDictionaries
     */
    public function getProductKeywordDictionaries()
    {
        return $this->container['product_keyword_dictionaries'];
    }

    /**
     * Sets product_keyword_dictionaries
     *
     * @param \Swagger\Client\Model\LanguageJsonApiRelationshipsProductKeywordDictionaries $product_keyword_dictionaries product_keyword_dictionaries
     *
     * @return $this
     */
    public function setProductKeywordDictionaries($product_keyword_dictionaries)
    {
        $this->container['product_keyword_dictionaries'] = $product_keyword_dictionaries;

        return $this;
    }

    /**
     * Gets product_reviews
     *
     * @return \Swagger\Client\Model\LanguageJsonApiRelationshipsProductReviews
     */
    public function getProductReviews()
    {
        return $this->container['product_reviews'];
    }

    /**
     * Sets product_reviews
     *
     * @param \Swagger\Client\Model\LanguageJsonApiRelationshipsProductReviews $product_reviews product_reviews
     *
     * @return $this
     */
    public function setProductReviews($product_reviews)
    {
        $this->container['product_reviews'] = $product_reviews;

        return $this;
    }

    /**
     * Gets product_search_config
     *
     * @return \Swagger\Client\Model\LanguageJsonApiRelationshipsProductSearchConfig
     */
    public function getProductSearchConfig()
    {
        return $this->container['product_search_config'];
    }

    /**
     * Sets product_search_config
     *
     * @param \Swagger\Client\Model\LanguageJsonApiRelationshipsProductSearchConfig $product_search_config product_search_config
     *
     * @return $this
     */
    public function setProductSearchConfig($product_search_config)
    {
        $this->container['product_search_config'] = $product_search_config;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
