<?php
/**
 * Promotion
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shopware Admin API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Admin API.  For a better overview, all CRUD-endpoints are hidden by default. If you want to show also CRUD-endpoints add the query parameter `type=jsonapi`.
 *
 * OpenAPI spec version: 6.4.7.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.31
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Promotion Class Doc Comment
 *
 * @category Class
 * @description Added since version: 6.0.0.0
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Promotion implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Promotion';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'name' => 'string',
'active' => 'bool',
'valid_from' => '\DateTime',
'valid_until' => '\DateTime',
'max_redemptions_global' => 'int',
'max_redemptions_per_customer' => 'int',
'exclusive' => 'bool',
'code' => 'string',
'use_codes' => 'bool',
'use_individual_codes' => 'bool',
'individual_code_pattern' => 'string',
'use_set_groups' => 'bool',
'customer_restriction' => 'bool',
'prevent_combination' => 'bool',
'order_count' => 'int',
'orders_per_customer_count' => 'object',
'exclusion_ids' => 'string[]',
'custom_fields' => 'object',
'created_at' => '\DateTime',
'updated_at' => '\DateTime',
'translated' => 'object',
'setgroups' => '\Swagger\Client\Model\PromotionSetgroup',
'sales_channels' => '\Swagger\Client\Model\PromotionSalesChannel',
'discounts' => '\Swagger\Client\Model\PromotionDiscount',
'individual_codes' => '\Swagger\Client\Model\PromotionIndividualCode',
'persona_rules' => '\Swagger\Client\Model\Rule',
'persona_customers' => '\Swagger\Client\Model\Customer',
'order_rules' => '\Swagger\Client\Model\Rule',
'cart_rules' => '\Swagger\Client\Model\Rule'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'name' => null,
'active' => null,
'valid_from' => 'date-time',
'valid_until' => 'date-time',
'max_redemptions_global' => 'int64',
'max_redemptions_per_customer' => 'int64',
'exclusive' => null,
'code' => null,
'use_codes' => null,
'use_individual_codes' => null,
'individual_code_pattern' => null,
'use_set_groups' => null,
'customer_restriction' => null,
'prevent_combination' => null,
'order_count' => 'int64',
'orders_per_customer_count' => null,
'exclusion_ids' => null,
'custom_fields' => null,
'created_at' => 'date-time',
'updated_at' => 'date-time',
'translated' => null,
'setgroups' => null,
'sales_channels' => null,
'discounts' => null,
'individual_codes' => null,
'persona_rules' => null,
'persona_customers' => null,
'order_rules' => null,
'cart_rules' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'name' => 'name',
'active' => 'active',
'valid_from' => 'validFrom',
'valid_until' => 'validUntil',
'max_redemptions_global' => 'maxRedemptionsGlobal',
'max_redemptions_per_customer' => 'maxRedemptionsPerCustomer',
'exclusive' => 'exclusive',
'code' => 'code',
'use_codes' => 'useCodes',
'use_individual_codes' => 'useIndividualCodes',
'individual_code_pattern' => 'individualCodePattern',
'use_set_groups' => 'useSetGroups',
'customer_restriction' => 'customerRestriction',
'prevent_combination' => 'preventCombination',
'order_count' => 'orderCount',
'orders_per_customer_count' => 'ordersPerCustomerCount',
'exclusion_ids' => 'exclusionIds',
'custom_fields' => 'customFields',
'created_at' => 'createdAt',
'updated_at' => 'updatedAt',
'translated' => 'translated',
'setgroups' => 'setgroups',
'sales_channels' => 'salesChannels',
'discounts' => 'discounts',
'individual_codes' => 'individualCodes',
'persona_rules' => 'personaRules',
'persona_customers' => 'personaCustomers',
'order_rules' => 'orderRules',
'cart_rules' => 'cartRules'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'name' => 'setName',
'active' => 'setActive',
'valid_from' => 'setValidFrom',
'valid_until' => 'setValidUntil',
'max_redemptions_global' => 'setMaxRedemptionsGlobal',
'max_redemptions_per_customer' => 'setMaxRedemptionsPerCustomer',
'exclusive' => 'setExclusive',
'code' => 'setCode',
'use_codes' => 'setUseCodes',
'use_individual_codes' => 'setUseIndividualCodes',
'individual_code_pattern' => 'setIndividualCodePattern',
'use_set_groups' => 'setUseSetGroups',
'customer_restriction' => 'setCustomerRestriction',
'prevent_combination' => 'setPreventCombination',
'order_count' => 'setOrderCount',
'orders_per_customer_count' => 'setOrdersPerCustomerCount',
'exclusion_ids' => 'setExclusionIds',
'custom_fields' => 'setCustomFields',
'created_at' => 'setCreatedAt',
'updated_at' => 'setUpdatedAt',
'translated' => 'setTranslated',
'setgroups' => 'setSetgroups',
'sales_channels' => 'setSalesChannels',
'discounts' => 'setDiscounts',
'individual_codes' => 'setIndividualCodes',
'persona_rules' => 'setPersonaRules',
'persona_customers' => 'setPersonaCustomers',
'order_rules' => 'setOrderRules',
'cart_rules' => 'setCartRules'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'name' => 'getName',
'active' => 'getActive',
'valid_from' => 'getValidFrom',
'valid_until' => 'getValidUntil',
'max_redemptions_global' => 'getMaxRedemptionsGlobal',
'max_redemptions_per_customer' => 'getMaxRedemptionsPerCustomer',
'exclusive' => 'getExclusive',
'code' => 'getCode',
'use_codes' => 'getUseCodes',
'use_individual_codes' => 'getUseIndividualCodes',
'individual_code_pattern' => 'getIndividualCodePattern',
'use_set_groups' => 'getUseSetGroups',
'customer_restriction' => 'getCustomerRestriction',
'prevent_combination' => 'getPreventCombination',
'order_count' => 'getOrderCount',
'orders_per_customer_count' => 'getOrdersPerCustomerCount',
'exclusion_ids' => 'getExclusionIds',
'custom_fields' => 'getCustomFields',
'created_at' => 'getCreatedAt',
'updated_at' => 'getUpdatedAt',
'translated' => 'getTranslated',
'setgroups' => 'getSetgroups',
'sales_channels' => 'getSalesChannels',
'discounts' => 'getDiscounts',
'individual_codes' => 'getIndividualCodes',
'persona_rules' => 'getPersonaRules',
'persona_customers' => 'getPersonaCustomers',
'order_rules' => 'getOrderRules',
'cart_rules' => 'getCartRules'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['valid_from'] = isset($data['valid_from']) ? $data['valid_from'] : null;
        $this->container['valid_until'] = isset($data['valid_until']) ? $data['valid_until'] : null;
        $this->container['max_redemptions_global'] = isset($data['max_redemptions_global']) ? $data['max_redemptions_global'] : null;
        $this->container['max_redemptions_per_customer'] = isset($data['max_redemptions_per_customer']) ? $data['max_redemptions_per_customer'] : null;
        $this->container['exclusive'] = isset($data['exclusive']) ? $data['exclusive'] : null;
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['use_codes'] = isset($data['use_codes']) ? $data['use_codes'] : null;
        $this->container['use_individual_codes'] = isset($data['use_individual_codes']) ? $data['use_individual_codes'] : null;
        $this->container['individual_code_pattern'] = isset($data['individual_code_pattern']) ? $data['individual_code_pattern'] : null;
        $this->container['use_set_groups'] = isset($data['use_set_groups']) ? $data['use_set_groups'] : null;
        $this->container['customer_restriction'] = isset($data['customer_restriction']) ? $data['customer_restriction'] : null;
        $this->container['prevent_combination'] = isset($data['prevent_combination']) ? $data['prevent_combination'] : null;
        $this->container['order_count'] = isset($data['order_count']) ? $data['order_count'] : null;
        $this->container['orders_per_customer_count'] = isset($data['orders_per_customer_count']) ? $data['orders_per_customer_count'] : null;
        $this->container['exclusion_ids'] = isset($data['exclusion_ids']) ? $data['exclusion_ids'] : null;
        $this->container['custom_fields'] = isset($data['custom_fields']) ? $data['custom_fields'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['translated'] = isset($data['translated']) ? $data['translated'] : null;
        $this->container['setgroups'] = isset($data['setgroups']) ? $data['setgroups'] : null;
        $this->container['sales_channels'] = isset($data['sales_channels']) ? $data['sales_channels'] : null;
        $this->container['discounts'] = isset($data['discounts']) ? $data['discounts'] : null;
        $this->container['individual_codes'] = isset($data['individual_codes']) ? $data['individual_codes'] : null;
        $this->container['persona_rules'] = isset($data['persona_rules']) ? $data['persona_rules'] : null;
        $this->container['persona_customers'] = isset($data['persona_customers']) ? $data['persona_customers'] : null;
        $this->container['order_rules'] = isset($data['order_rules']) ? $data['order_rules'] : null;
        $this->container['cart_rules'] = isset($data['cart_rules']) ? $data['cart_rules'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['active'] === null) {
            $invalidProperties[] = "'active' can't be null";
        }
        if ($this->container['exclusive'] === null) {
            $invalidProperties[] = "'exclusive' can't be null";
        }
        if ($this->container['use_codes'] === null) {
            $invalidProperties[] = "'use_codes' can't be null";
        }
        if ($this->container['use_individual_codes'] === null) {
            $invalidProperties[] = "'use_individual_codes' can't be null";
        }
        if ($this->container['use_set_groups'] === null) {
            $invalidProperties[] = "'use_set_groups' can't be null";
        }
        if ($this->container['prevent_combination'] === null) {
            $invalidProperties[] = "'prevent_combination' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active active
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets valid_from
     *
     * @return \DateTime
     */
    public function getValidFrom()
    {
        return $this->container['valid_from'];
    }

    /**
     * Sets valid_from
     *
     * @param \DateTime $valid_from valid_from
     *
     * @return $this
     */
    public function setValidFrom($valid_from)
    {
        $this->container['valid_from'] = $valid_from;

        return $this;
    }

    /**
     * Gets valid_until
     *
     * @return \DateTime
     */
    public function getValidUntil()
    {
        return $this->container['valid_until'];
    }

    /**
     * Sets valid_until
     *
     * @param \DateTime $valid_until valid_until
     *
     * @return $this
     */
    public function setValidUntil($valid_until)
    {
        $this->container['valid_until'] = $valid_until;

        return $this;
    }

    /**
     * Gets max_redemptions_global
     *
     * @return int
     */
    public function getMaxRedemptionsGlobal()
    {
        return $this->container['max_redemptions_global'];
    }

    /**
     * Sets max_redemptions_global
     *
     * @param int $max_redemptions_global max_redemptions_global
     *
     * @return $this
     */
    public function setMaxRedemptionsGlobal($max_redemptions_global)
    {
        $this->container['max_redemptions_global'] = $max_redemptions_global;

        return $this;
    }

    /**
     * Gets max_redemptions_per_customer
     *
     * @return int
     */
    public function getMaxRedemptionsPerCustomer()
    {
        return $this->container['max_redemptions_per_customer'];
    }

    /**
     * Sets max_redemptions_per_customer
     *
     * @param int $max_redemptions_per_customer max_redemptions_per_customer
     *
     * @return $this
     */
    public function setMaxRedemptionsPerCustomer($max_redemptions_per_customer)
    {
        $this->container['max_redemptions_per_customer'] = $max_redemptions_per_customer;

        return $this;
    }

    /**
     * Gets exclusive
     *
     * @return bool
     */
    public function getExclusive()
    {
        return $this->container['exclusive'];
    }

    /**
     * Sets exclusive
     *
     * @param bool $exclusive exclusive
     *
     * @return $this
     */
    public function setExclusive($exclusive)
    {
        $this->container['exclusive'] = $exclusive;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code code
     *
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets use_codes
     *
     * @return bool
     */
    public function getUseCodes()
    {
        return $this->container['use_codes'];
    }

    /**
     * Sets use_codes
     *
     * @param bool $use_codes use_codes
     *
     * @return $this
     */
    public function setUseCodes($use_codes)
    {
        $this->container['use_codes'] = $use_codes;

        return $this;
    }

    /**
     * Gets use_individual_codes
     *
     * @return bool
     */
    public function getUseIndividualCodes()
    {
        return $this->container['use_individual_codes'];
    }

    /**
     * Sets use_individual_codes
     *
     * @param bool $use_individual_codes use_individual_codes
     *
     * @return $this
     */
    public function setUseIndividualCodes($use_individual_codes)
    {
        $this->container['use_individual_codes'] = $use_individual_codes;

        return $this;
    }

    /**
     * Gets individual_code_pattern
     *
     * @return string
     */
    public function getIndividualCodePattern()
    {
        return $this->container['individual_code_pattern'];
    }

    /**
     * Sets individual_code_pattern
     *
     * @param string $individual_code_pattern individual_code_pattern
     *
     * @return $this
     */
    public function setIndividualCodePattern($individual_code_pattern)
    {
        $this->container['individual_code_pattern'] = $individual_code_pattern;

        return $this;
    }

    /**
     * Gets use_set_groups
     *
     * @return bool
     */
    public function getUseSetGroups()
    {
        return $this->container['use_set_groups'];
    }

    /**
     * Sets use_set_groups
     *
     * @param bool $use_set_groups use_set_groups
     *
     * @return $this
     */
    public function setUseSetGroups($use_set_groups)
    {
        $this->container['use_set_groups'] = $use_set_groups;

        return $this;
    }

    /**
     * Gets customer_restriction
     *
     * @return bool
     */
    public function getCustomerRestriction()
    {
        return $this->container['customer_restriction'];
    }

    /**
     * Sets customer_restriction
     *
     * @param bool $customer_restriction customer_restriction
     *
     * @return $this
     */
    public function setCustomerRestriction($customer_restriction)
    {
        $this->container['customer_restriction'] = $customer_restriction;

        return $this;
    }

    /**
     * Gets prevent_combination
     *
     * @return bool
     */
    public function getPreventCombination()
    {
        return $this->container['prevent_combination'];
    }

    /**
     * Sets prevent_combination
     *
     * @param bool $prevent_combination prevent_combination
     *
     * @return $this
     */
    public function setPreventCombination($prevent_combination)
    {
        $this->container['prevent_combination'] = $prevent_combination;

        return $this;
    }

    /**
     * Gets order_count
     *
     * @return int
     */
    public function getOrderCount()
    {
        return $this->container['order_count'];
    }

    /**
     * Sets order_count
     *
     * @param int $order_count order_count
     *
     * @return $this
     */
    public function setOrderCount($order_count)
    {
        $this->container['order_count'] = $order_count;

        return $this;
    }

    /**
     * Gets orders_per_customer_count
     *
     * @return object
     */
    public function getOrdersPerCustomerCount()
    {
        return $this->container['orders_per_customer_count'];
    }

    /**
     * Sets orders_per_customer_count
     *
     * @param object $orders_per_customer_count orders_per_customer_count
     *
     * @return $this
     */
    public function setOrdersPerCustomerCount($orders_per_customer_count)
    {
        $this->container['orders_per_customer_count'] = $orders_per_customer_count;

        return $this;
    }

    /**
     * Gets exclusion_ids
     *
     * @return string[]
     */
    public function getExclusionIds()
    {
        return $this->container['exclusion_ids'];
    }

    /**
     * Sets exclusion_ids
     *
     * @param string[] $exclusion_ids exclusion_ids
     *
     * @return $this
     */
    public function setExclusionIds($exclusion_ids)
    {
        $this->container['exclusion_ids'] = $exclusion_ids;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return object
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param object $custom_fields custom_fields
     *
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets translated
     *
     * @return object
     */
    public function getTranslated()
    {
        return $this->container['translated'];
    }

    /**
     * Sets translated
     *
     * @param object $translated translated
     *
     * @return $this
     */
    public function setTranslated($translated)
    {
        $this->container['translated'] = $translated;

        return $this;
    }

    /**
     * Gets setgroups
     *
     * @return \Swagger\Client\Model\PromotionSetgroup
     */
    public function getSetgroups()
    {
        return $this->container['setgroups'];
    }

    /**
     * Sets setgroups
     *
     * @param \Swagger\Client\Model\PromotionSetgroup $setgroups setgroups
     *
     * @return $this
     */
    public function setSetgroups($setgroups)
    {
        $this->container['setgroups'] = $setgroups;

        return $this;
    }

    /**
     * Gets sales_channels
     *
     * @return \Swagger\Client\Model\PromotionSalesChannel
     */
    public function getSalesChannels()
    {
        return $this->container['sales_channels'];
    }

    /**
     * Sets sales_channels
     *
     * @param \Swagger\Client\Model\PromotionSalesChannel $sales_channels sales_channels
     *
     * @return $this
     */
    public function setSalesChannels($sales_channels)
    {
        $this->container['sales_channels'] = $sales_channels;

        return $this;
    }

    /**
     * Gets discounts
     *
     * @return \Swagger\Client\Model\PromotionDiscount
     */
    public function getDiscounts()
    {
        return $this->container['discounts'];
    }

    /**
     * Sets discounts
     *
     * @param \Swagger\Client\Model\PromotionDiscount $discounts discounts
     *
     * @return $this
     */
    public function setDiscounts($discounts)
    {
        $this->container['discounts'] = $discounts;

        return $this;
    }

    /**
     * Gets individual_codes
     *
     * @return \Swagger\Client\Model\PromotionIndividualCode
     */
    public function getIndividualCodes()
    {
        return $this->container['individual_codes'];
    }

    /**
     * Sets individual_codes
     *
     * @param \Swagger\Client\Model\PromotionIndividualCode $individual_codes individual_codes
     *
     * @return $this
     */
    public function setIndividualCodes($individual_codes)
    {
        $this->container['individual_codes'] = $individual_codes;

        return $this;
    }

    /**
     * Gets persona_rules
     *
     * @return \Swagger\Client\Model\Rule
     */
    public function getPersonaRules()
    {
        return $this->container['persona_rules'];
    }

    /**
     * Sets persona_rules
     *
     * @param \Swagger\Client\Model\Rule $persona_rules persona_rules
     *
     * @return $this
     */
    public function setPersonaRules($persona_rules)
    {
        $this->container['persona_rules'] = $persona_rules;

        return $this;
    }

    /**
     * Gets persona_customers
     *
     * @return \Swagger\Client\Model\Customer
     */
    public function getPersonaCustomers()
    {
        return $this->container['persona_customers'];
    }

    /**
     * Sets persona_customers
     *
     * @param \Swagger\Client\Model\Customer $persona_customers persona_customers
     *
     * @return $this
     */
    public function setPersonaCustomers($persona_customers)
    {
        $this->container['persona_customers'] = $persona_customers;

        return $this;
    }

    /**
     * Gets order_rules
     *
     * @return \Swagger\Client\Model\Rule
     */
    public function getOrderRules()
    {
        return $this->container['order_rules'];
    }

    /**
     * Sets order_rules
     *
     * @param \Swagger\Client\Model\Rule $order_rules order_rules
     *
     * @return $this
     */
    public function setOrderRules($order_rules)
    {
        $this->container['order_rules'] = $order_rules;

        return $this;
    }

    /**
     * Gets cart_rules
     *
     * @return \Swagger\Client\Model\Rule
     */
    public function getCartRules()
    {
        return $this->container['cart_rules'];
    }

    /**
     * Sets cart_rules
     *
     * @param \Swagger\Client\Model\Rule $cart_rules cart_rules
     *
     * @return $this
     */
    public function setCartRules($cart_rules)
    {
        $this->container['cart_rules'] = $cart_rules;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
