<?php
/**
 * SwagPaypalV1DisputesExtensionsBillingDisputeProperties
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shopware Admin API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Admin API.  For a better overview, all CRUD-endpoints are hidden by default. If you want to show also CRUD-endpoints add the query parameter `type=jsonapi`.
 *
 * OpenAPI spec version: 6.4.7.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.31
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SwagPaypalV1DisputesExtensionsBillingDisputeProperties Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SwagPaypalV1DisputesExtensionsBillingDisputeProperties implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'swag_paypal_v1_disputes_extensions_billing_dispute_properties';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'duplicate_transaction' => '\Swagger\Client\Model\SwagPaypalV1DisputesExtensionsDuplicateTransaction',
'incorrect_transaction_amount' => '\Swagger\Client\Model\SwagPaypalV1DisputesExtensionsIncorrectTransactionAmount',
'payment_by_other_means' => '\Swagger\Client\Model\SwagPaypalV1DisputesExtensionsPaymentByOtherMeans',
'credit_not_processed' => '\Swagger\Client\Model\SwagPaypalV1DisputesExtensionsCretidNotProcessed',
'canceled_recurring_billing' => '\Swagger\Client\Model\SwagPaypalV1DisputesExtensionsCanceledRecurringBilling'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'duplicate_transaction' => null,
'incorrect_transaction_amount' => null,
'payment_by_other_means' => null,
'credit_not_processed' => null,
'canceled_recurring_billing' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'duplicate_transaction' => 'duplicateTransaction',
'incorrect_transaction_amount' => 'incorrectTransactionAmount',
'payment_by_other_means' => 'paymentByOtherMeans',
'credit_not_processed' => 'creditNotProcessed',
'canceled_recurring_billing' => 'canceledRecurringBilling'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'duplicate_transaction' => 'setDuplicateTransaction',
'incorrect_transaction_amount' => 'setIncorrectTransactionAmount',
'payment_by_other_means' => 'setPaymentByOtherMeans',
'credit_not_processed' => 'setCreditNotProcessed',
'canceled_recurring_billing' => 'setCanceledRecurringBilling'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'duplicate_transaction' => 'getDuplicateTransaction',
'incorrect_transaction_amount' => 'getIncorrectTransactionAmount',
'payment_by_other_means' => 'getPaymentByOtherMeans',
'credit_not_processed' => 'getCreditNotProcessed',
'canceled_recurring_billing' => 'getCanceledRecurringBilling'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['duplicate_transaction'] = isset($data['duplicate_transaction']) ? $data['duplicate_transaction'] : null;
        $this->container['incorrect_transaction_amount'] = isset($data['incorrect_transaction_amount']) ? $data['incorrect_transaction_amount'] : null;
        $this->container['payment_by_other_means'] = isset($data['payment_by_other_means']) ? $data['payment_by_other_means'] : null;
        $this->container['credit_not_processed'] = isset($data['credit_not_processed']) ? $data['credit_not_processed'] : null;
        $this->container['canceled_recurring_billing'] = isset($data['canceled_recurring_billing']) ? $data['canceled_recurring_billing'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets duplicate_transaction
     *
     * @return \Swagger\Client\Model\SwagPaypalV1DisputesExtensionsDuplicateTransaction
     */
    public function getDuplicateTransaction()
    {
        return $this->container['duplicate_transaction'];
    }

    /**
     * Sets duplicate_transaction
     *
     * @param \Swagger\Client\Model\SwagPaypalV1DisputesExtensionsDuplicateTransaction $duplicate_transaction duplicate_transaction
     *
     * @return $this
     */
    public function setDuplicateTransaction($duplicate_transaction)
    {
        $this->container['duplicate_transaction'] = $duplicate_transaction;

        return $this;
    }

    /**
     * Gets incorrect_transaction_amount
     *
     * @return \Swagger\Client\Model\SwagPaypalV1DisputesExtensionsIncorrectTransactionAmount
     */
    public function getIncorrectTransactionAmount()
    {
        return $this->container['incorrect_transaction_amount'];
    }

    /**
     * Sets incorrect_transaction_amount
     *
     * @param \Swagger\Client\Model\SwagPaypalV1DisputesExtensionsIncorrectTransactionAmount $incorrect_transaction_amount incorrect_transaction_amount
     *
     * @return $this
     */
    public function setIncorrectTransactionAmount($incorrect_transaction_amount)
    {
        $this->container['incorrect_transaction_amount'] = $incorrect_transaction_amount;

        return $this;
    }

    /**
     * Gets payment_by_other_means
     *
     * @return \Swagger\Client\Model\SwagPaypalV1DisputesExtensionsPaymentByOtherMeans
     */
    public function getPaymentByOtherMeans()
    {
        return $this->container['payment_by_other_means'];
    }

    /**
     * Sets payment_by_other_means
     *
     * @param \Swagger\Client\Model\SwagPaypalV1DisputesExtensionsPaymentByOtherMeans $payment_by_other_means payment_by_other_means
     *
     * @return $this
     */
    public function setPaymentByOtherMeans($payment_by_other_means)
    {
        $this->container['payment_by_other_means'] = $payment_by_other_means;

        return $this;
    }

    /**
     * Gets credit_not_processed
     *
     * @return \Swagger\Client\Model\SwagPaypalV1DisputesExtensionsCretidNotProcessed
     */
    public function getCreditNotProcessed()
    {
        return $this->container['credit_not_processed'];
    }

    /**
     * Sets credit_not_processed
     *
     * @param \Swagger\Client\Model\SwagPaypalV1DisputesExtensionsCretidNotProcessed $credit_not_processed credit_not_processed
     *
     * @return $this
     */
    public function setCreditNotProcessed($credit_not_processed)
    {
        $this->container['credit_not_processed'] = $credit_not_processed;

        return $this;
    }

    /**
     * Gets canceled_recurring_billing
     *
     * @return \Swagger\Client\Model\SwagPaypalV1DisputesExtensionsCanceledRecurringBilling
     */
    public function getCanceledRecurringBilling()
    {
        return $this->container['canceled_recurring_billing'];
    }

    /**
     * Sets canceled_recurring_billing
     *
     * @param \Swagger\Client\Model\SwagPaypalV1DisputesExtensionsCanceledRecurringBilling $canceled_recurring_billing canceled_recurring_billing
     *
     * @return $this
     */
    public function setCanceledRecurringBilling($canceled_recurring_billing)
    {
        $this->container['canceled_recurring_billing'] = $canceled_recurring_billing;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
