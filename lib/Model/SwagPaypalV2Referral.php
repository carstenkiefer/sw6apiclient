<?php
/**
 * SwagPaypalV2Referral
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shopware Admin API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Admin API.  For a better overview, all CRUD-endpoints are hidden by default. If you want to show also CRUD-endpoints add the query parameter `type=jsonapi`.
 *
 * OpenAPI spec version: 6.4.7.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.31
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SwagPaypalV2Referral Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SwagPaypalV2Referral implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'swag_paypal_v2_referral';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'business_entity' => '\Swagger\Client\Model\SwagPaypalV2ReferralBusinessEntity',
'preferred_language_code' => 'string',
'tracking_id' => 'string',
'partner_config_override' => '\Swagger\Client\Model\SwagPaypalV2ReferralPartnerConfigOverride',
'operations' => '\Swagger\Client\Model\SwagPaypalV2ReferralOperation[]',
'products' => 'string[]',
'legal_consents' => '\Swagger\Client\Model\SwagPaypalV2ReferralLegalConsent[]',
'links' => '\Swagger\Client\Model\SwagPaypalV2CommonLink[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'business_entity' => null,
'preferred_language_code' => null,
'tracking_id' => null,
'partner_config_override' => null,
'operations' => null,
'products' => null,
'legal_consents' => null,
'links' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'business_entity' => 'businessEntity',
'preferred_language_code' => 'preferredLanguageCode',
'tracking_id' => 'trackingId',
'partner_config_override' => 'partnerConfigOverride',
'operations' => 'operations',
'products' => 'products',
'legal_consents' => 'legalConsents',
'links' => 'links'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'business_entity' => 'setBusinessEntity',
'preferred_language_code' => 'setPreferredLanguageCode',
'tracking_id' => 'setTrackingId',
'partner_config_override' => 'setPartnerConfigOverride',
'operations' => 'setOperations',
'products' => 'setProducts',
'legal_consents' => 'setLegalConsents',
'links' => 'setLinks'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'business_entity' => 'getBusinessEntity',
'preferred_language_code' => 'getPreferredLanguageCode',
'tracking_id' => 'getTrackingId',
'partner_config_override' => 'getPartnerConfigOverride',
'operations' => 'getOperations',
'products' => 'getProducts',
'legal_consents' => 'getLegalConsents',
'links' => 'getLinks'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['business_entity'] = isset($data['business_entity']) ? $data['business_entity'] : null;
        $this->container['preferred_language_code'] = isset($data['preferred_language_code']) ? $data['preferred_language_code'] : null;
        $this->container['tracking_id'] = isset($data['tracking_id']) ? $data['tracking_id'] : null;
        $this->container['partner_config_override'] = isset($data['partner_config_override']) ? $data['partner_config_override'] : null;
        $this->container['operations'] = isset($data['operations']) ? $data['operations'] : null;
        $this->container['products'] = isset($data['products']) ? $data['products'] : null;
        $this->container['legal_consents'] = isset($data['legal_consents']) ? $data['legal_consents'] : null;
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets business_entity
     *
     * @return \Swagger\Client\Model\SwagPaypalV2ReferralBusinessEntity
     */
    public function getBusinessEntity()
    {
        return $this->container['business_entity'];
    }

    /**
     * Sets business_entity
     *
     * @param \Swagger\Client\Model\SwagPaypalV2ReferralBusinessEntity $business_entity business_entity
     *
     * @return $this
     */
    public function setBusinessEntity($business_entity)
    {
        $this->container['business_entity'] = $business_entity;

        return $this;
    }

    /**
     * Gets preferred_language_code
     *
     * @return string
     */
    public function getPreferredLanguageCode()
    {
        return $this->container['preferred_language_code'];
    }

    /**
     * Sets preferred_language_code
     *
     * @param string $preferred_language_code preferred_language_code
     *
     * @return $this
     */
    public function setPreferredLanguageCode($preferred_language_code)
    {
        $this->container['preferred_language_code'] = $preferred_language_code;

        return $this;
    }

    /**
     * Gets tracking_id
     *
     * @return string
     */
    public function getTrackingId()
    {
        return $this->container['tracking_id'];
    }

    /**
     * Sets tracking_id
     *
     * @param string $tracking_id tracking_id
     *
     * @return $this
     */
    public function setTrackingId($tracking_id)
    {
        $this->container['tracking_id'] = $tracking_id;

        return $this;
    }

    /**
     * Gets partner_config_override
     *
     * @return \Swagger\Client\Model\SwagPaypalV2ReferralPartnerConfigOverride
     */
    public function getPartnerConfigOverride()
    {
        return $this->container['partner_config_override'];
    }

    /**
     * Sets partner_config_override
     *
     * @param \Swagger\Client\Model\SwagPaypalV2ReferralPartnerConfigOverride $partner_config_override partner_config_override
     *
     * @return $this
     */
    public function setPartnerConfigOverride($partner_config_override)
    {
        $this->container['partner_config_override'] = $partner_config_override;

        return $this;
    }

    /**
     * Gets operations
     *
     * @return \Swagger\Client\Model\SwagPaypalV2ReferralOperation[]
     */
    public function getOperations()
    {
        return $this->container['operations'];
    }

    /**
     * Sets operations
     *
     * @param \Swagger\Client\Model\SwagPaypalV2ReferralOperation[] $operations operations
     *
     * @return $this
     */
    public function setOperations($operations)
    {
        $this->container['operations'] = $operations;

        return $this;
    }

    /**
     * Gets products
     *
     * @return string[]
     */
    public function getProducts()
    {
        return $this->container['products'];
    }

    /**
     * Sets products
     *
     * @param string[] $products products
     *
     * @return $this
     */
    public function setProducts($products)
    {
        $this->container['products'] = $products;

        return $this;
    }

    /**
     * Gets legal_consents
     *
     * @return \Swagger\Client\Model\SwagPaypalV2ReferralLegalConsent[]
     */
    public function getLegalConsents()
    {
        return $this->container['legal_consents'];
    }

    /**
     * Sets legal_consents
     *
     * @param \Swagger\Client\Model\SwagPaypalV2ReferralLegalConsent[] $legal_consents legal_consents
     *
     * @return $this
     */
    public function setLegalConsents($legal_consents)
    {
        $this->container['legal_consents'] = $legal_consents;

        return $this;
    }

    /**
     * Gets links
     *
     * @return \Swagger\Client\Model\SwagPaypalV2CommonLink[]
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \Swagger\Client\Model\SwagPaypalV2CommonLink[] $links links
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
