<?php
/**
 * PluginJsonApi
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shopware Admin API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Admin API.  For a better overview, all CRUD-endpoints are hidden by default. If you want to show also CRUD-endpoints add the query parameter `type=jsonapi`.
 *
 * OpenAPI spec version: 6.4.7.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.31
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * PluginJsonApi Class Doc Comment
 *
 * @category Class
 * @description Added since version: 6.0.0.0
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PluginJsonApi extends Resource 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PluginJsonApi';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'base_class' => 'string',
'name' => 'string',
'composer_name' => 'string',
'autoload' => 'object',
'active' => 'bool',
'managed_by_composer' => 'bool',
'path' => 'string',
'author' => 'string',
'copyright' => 'string',
'license' => 'string',
'version' => 'string',
'upgrade_version' => 'string',
'installed_at' => '\DateTime',
'upgraded_at' => '\DateTime',
'icon' => 'string',
'label' => 'string',
'description' => 'string',
'manufacturer_link' => 'string',
'support_link' => 'string',
'changelog' => 'object',
'custom_fields' => 'object',
'created_at' => '\DateTime',
'updated_at' => '\DateTime',
'translated' => 'object',
'relationships' => '\Swagger\Client\Model\PluginJsonApiRelationships'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'base_class' => null,
'name' => null,
'composer_name' => null,
'autoload' => null,
'active' => null,
'managed_by_composer' => null,
'path' => null,
'author' => null,
'copyright' => null,
'license' => null,
'version' => null,
'upgrade_version' => null,
'installed_at' => 'date-time',
'upgraded_at' => 'date-time',
'icon' => null,
'label' => null,
'description' => null,
'manufacturer_link' => null,
'support_link' => null,
'changelog' => null,
'custom_fields' => null,
'created_at' => 'date-time',
'updated_at' => 'date-time',
'translated' => null,
'relationships' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'base_class' => 'baseClass',
'name' => 'name',
'composer_name' => 'composerName',
'autoload' => 'autoload',
'active' => 'active',
'managed_by_composer' => 'managedByComposer',
'path' => 'path',
'author' => 'author',
'copyright' => 'copyright',
'license' => 'license',
'version' => 'version',
'upgrade_version' => 'upgradeVersion',
'installed_at' => 'installedAt',
'upgraded_at' => 'upgradedAt',
'icon' => 'icon',
'label' => 'label',
'description' => 'description',
'manufacturer_link' => 'manufacturerLink',
'support_link' => 'supportLink',
'changelog' => 'changelog',
'custom_fields' => 'customFields',
'created_at' => 'createdAt',
'updated_at' => 'updatedAt',
'translated' => 'translated',
'relationships' => 'relationships'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'base_class' => 'setBaseClass',
'name' => 'setName',
'composer_name' => 'setComposerName',
'autoload' => 'setAutoload',
'active' => 'setActive',
'managed_by_composer' => 'setManagedByComposer',
'path' => 'setPath',
'author' => 'setAuthor',
'copyright' => 'setCopyright',
'license' => 'setLicense',
'version' => 'setVersion',
'upgrade_version' => 'setUpgradeVersion',
'installed_at' => 'setInstalledAt',
'upgraded_at' => 'setUpgradedAt',
'icon' => 'setIcon',
'label' => 'setLabel',
'description' => 'setDescription',
'manufacturer_link' => 'setManufacturerLink',
'support_link' => 'setSupportLink',
'changelog' => 'setChangelog',
'custom_fields' => 'setCustomFields',
'created_at' => 'setCreatedAt',
'updated_at' => 'setUpdatedAt',
'translated' => 'setTranslated',
'relationships' => 'setRelationships'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'base_class' => 'getBaseClass',
'name' => 'getName',
'composer_name' => 'getComposerName',
'autoload' => 'getAutoload',
'active' => 'getActive',
'managed_by_composer' => 'getManagedByComposer',
'path' => 'getPath',
'author' => 'getAuthor',
'copyright' => 'getCopyright',
'license' => 'getLicense',
'version' => 'getVersion',
'upgrade_version' => 'getUpgradeVersion',
'installed_at' => 'getInstalledAt',
'upgraded_at' => 'getUpgradedAt',
'icon' => 'getIcon',
'label' => 'getLabel',
'description' => 'getDescription',
'manufacturer_link' => 'getManufacturerLink',
'support_link' => 'getSupportLink',
'changelog' => 'getChangelog',
'custom_fields' => 'getCustomFields',
'created_at' => 'getCreatedAt',
'updated_at' => 'getUpdatedAt',
'translated' => 'getTranslated',
'relationships' => 'getRelationships'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['base_class'] = isset($data['base_class']) ? $data['base_class'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['composer_name'] = isset($data['composer_name']) ? $data['composer_name'] : null;
        $this->container['autoload'] = isset($data['autoload']) ? $data['autoload'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['managed_by_composer'] = isset($data['managed_by_composer']) ? $data['managed_by_composer'] : null;
        $this->container['path'] = isset($data['path']) ? $data['path'] : null;
        $this->container['author'] = isset($data['author']) ? $data['author'] : null;
        $this->container['copyright'] = isset($data['copyright']) ? $data['copyright'] : null;
        $this->container['license'] = isset($data['license']) ? $data['license'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['upgrade_version'] = isset($data['upgrade_version']) ? $data['upgrade_version'] : null;
        $this->container['installed_at'] = isset($data['installed_at']) ? $data['installed_at'] : null;
        $this->container['upgraded_at'] = isset($data['upgraded_at']) ? $data['upgraded_at'] : null;
        $this->container['icon'] = isset($data['icon']) ? $data['icon'] : null;
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['manufacturer_link'] = isset($data['manufacturer_link']) ? $data['manufacturer_link'] : null;
        $this->container['support_link'] = isset($data['support_link']) ? $data['support_link'] : null;
        $this->container['changelog'] = isset($data['changelog']) ? $data['changelog'] : null;
        $this->container['custom_fields'] = isset($data['custom_fields']) ? $data['custom_fields'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['translated'] = isset($data['translated']) ? $data['translated'] : null;
        $this->container['relationships'] = isset($data['relationships']) ? $data['relationships'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['base_class'] === null) {
            $invalidProperties[] = "'base_class' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['autoload'] === null) {
            $invalidProperties[] = "'autoload' can't be null";
        }
        if ($this->container['version'] === null) {
            $invalidProperties[] = "'version' can't be null";
        }
        if ($this->container['label'] === null) {
            $invalidProperties[] = "'label' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets base_class
     *
     * @return string
     */
    public function getBaseClass()
    {
        return $this->container['base_class'];
    }

    /**
     * Sets base_class
     *
     * @param string $base_class base_class
     *
     * @return $this
     */
    public function setBaseClass($base_class)
    {
        $this->container['base_class'] = $base_class;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets composer_name
     *
     * @return string
     */
    public function getComposerName()
    {
        return $this->container['composer_name'];
    }

    /**
     * Sets composer_name
     *
     * @param string $composer_name composer_name
     *
     * @return $this
     */
    public function setComposerName($composer_name)
    {
        $this->container['composer_name'] = $composer_name;

        return $this;
    }

    /**
     * Gets autoload
     *
     * @return object
     */
    public function getAutoload()
    {
        return $this->container['autoload'];
    }

    /**
     * Sets autoload
     *
     * @param object $autoload autoload
     *
     * @return $this
     */
    public function setAutoload($autoload)
    {
        $this->container['autoload'] = $autoload;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active active
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets managed_by_composer
     *
     * @return bool
     */
    public function getManagedByComposer()
    {
        return $this->container['managed_by_composer'];
    }

    /**
     * Sets managed_by_composer
     *
     * @param bool $managed_by_composer managed_by_composer
     *
     * @return $this
     */
    public function setManagedByComposer($managed_by_composer)
    {
        $this->container['managed_by_composer'] = $managed_by_composer;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string $path path
     *
     * @return $this
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets author
     *
     * @return string
     */
    public function getAuthor()
    {
        return $this->container['author'];
    }

    /**
     * Sets author
     *
     * @param string $author author
     *
     * @return $this
     */
    public function setAuthor($author)
    {
        $this->container['author'] = $author;

        return $this;
    }

    /**
     * Gets copyright
     *
     * @return string
     */
    public function getCopyright()
    {
        return $this->container['copyright'];
    }

    /**
     * Sets copyright
     *
     * @param string $copyright copyright
     *
     * @return $this
     */
    public function setCopyright($copyright)
    {
        $this->container['copyright'] = $copyright;

        return $this;
    }

    /**
     * Gets license
     *
     * @return string
     */
    public function getLicense()
    {
        return $this->container['license'];
    }

    /**
     * Sets license
     *
     * @param string $license license
     *
     * @return $this
     */
    public function setLicense($license)
    {
        $this->container['license'] = $license;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets upgrade_version
     *
     * @return string
     */
    public function getUpgradeVersion()
    {
        return $this->container['upgrade_version'];
    }

    /**
     * Sets upgrade_version
     *
     * @param string $upgrade_version upgrade_version
     *
     * @return $this
     */
    public function setUpgradeVersion($upgrade_version)
    {
        $this->container['upgrade_version'] = $upgrade_version;

        return $this;
    }

    /**
     * Gets installed_at
     *
     * @return \DateTime
     */
    public function getInstalledAt()
    {
        return $this->container['installed_at'];
    }

    /**
     * Sets installed_at
     *
     * @param \DateTime $installed_at installed_at
     *
     * @return $this
     */
    public function setInstalledAt($installed_at)
    {
        $this->container['installed_at'] = $installed_at;

        return $this;
    }

    /**
     * Gets upgraded_at
     *
     * @return \DateTime
     */
    public function getUpgradedAt()
    {
        return $this->container['upgraded_at'];
    }

    /**
     * Sets upgraded_at
     *
     * @param \DateTime $upgraded_at upgraded_at
     *
     * @return $this
     */
    public function setUpgradedAt($upgraded_at)
    {
        $this->container['upgraded_at'] = $upgraded_at;

        return $this;
    }

    /**
     * Gets icon
     *
     * @return string
     */
    public function getIcon()
    {
        return $this->container['icon'];
    }

    /**
     * Sets icon
     *
     * @param string $icon icon
     *
     * @return $this
     */
    public function setIcon($icon)
    {
        $this->container['icon'] = $icon;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string $label label
     *
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets manufacturer_link
     *
     * @return string
     */
    public function getManufacturerLink()
    {
        return $this->container['manufacturer_link'];
    }

    /**
     * Sets manufacturer_link
     *
     * @param string $manufacturer_link manufacturer_link
     *
     * @return $this
     */
    public function setManufacturerLink($manufacturer_link)
    {
        $this->container['manufacturer_link'] = $manufacturer_link;

        return $this;
    }

    /**
     * Gets support_link
     *
     * @return string
     */
    public function getSupportLink()
    {
        return $this->container['support_link'];
    }

    /**
     * Sets support_link
     *
     * @param string $support_link support_link
     *
     * @return $this
     */
    public function setSupportLink($support_link)
    {
        $this->container['support_link'] = $support_link;

        return $this;
    }

    /**
     * Gets changelog
     *
     * @return object
     */
    public function getChangelog()
    {
        return $this->container['changelog'];
    }

    /**
     * Sets changelog
     *
     * @param object $changelog changelog
     *
     * @return $this
     */
    public function setChangelog($changelog)
    {
        $this->container['changelog'] = $changelog;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return object
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param object $custom_fields custom_fields
     *
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets translated
     *
     * @return object
     */
    public function getTranslated()
    {
        return $this->container['translated'];
    }

    /**
     * Sets translated
     *
     * @param object $translated translated
     *
     * @return $this
     */
    public function setTranslated($translated)
    {
        $this->container['translated'] = $translated;

        return $this;
    }

    /**
     * Gets relationships
     *
     * @return \Swagger\Client\Model\PluginJsonApiRelationships
     */
    public function getRelationships()
    {
        return $this->container['relationships'];
    }

    /**
     * Sets relationships
     *
     * @param \Swagger\Client\Model\PluginJsonApiRelationships $relationships relationships
     *
     * @return $this
     */
    public function setRelationships($relationships)
    {
        $this->container['relationships'] = $relationships;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
