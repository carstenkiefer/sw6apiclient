<?php
/**
 * SasBlogCategoryJsonApiRelationships
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shopware Admin API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Admin API.  For a better overview, all CRUD-endpoints are hidden by default. If you want to show also CRUD-endpoints add the query parameter `type=jsonapi`.
 *
 * OpenAPI spec version: 6.4.7.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.31
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SasBlogCategoryJsonApiRelationships Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SasBlogCategoryJsonApiRelationships implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SasBlogCategoryJsonApi_relationships';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'parent' => '\Swagger\Client\Model\SasBlogCategoryJsonApiRelationshipsParent',
'children' => '\Swagger\Client\Model\SasBlogCategoryJsonApiRelationshipsChildren',
'blogs' => '\Swagger\Client\Model\SasBlogCategoryJsonApiRelationshipsBlogs',
'navigation_sales_channels' => '\Swagger\Client\Model\SasBlogCategoryJsonApiRelationshipsNavigationSalesChannels',
'footer_sales_channels' => '\Swagger\Client\Model\SasBlogCategoryJsonApiRelationshipsFooterSalesChannels',
'service_sales_channels' => '\Swagger\Client\Model\SasBlogCategoryJsonApiRelationshipsServiceSalesChannels'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'parent' => null,
'children' => null,
'blogs' => null,
'navigation_sales_channels' => null,
'footer_sales_channels' => null,
'service_sales_channels' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'parent' => 'parent',
'children' => 'children',
'blogs' => 'blogs',
'navigation_sales_channels' => 'navigationSalesChannels',
'footer_sales_channels' => 'footerSalesChannels',
'service_sales_channels' => 'serviceSalesChannels'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'parent' => 'setParent',
'children' => 'setChildren',
'blogs' => 'setBlogs',
'navigation_sales_channels' => 'setNavigationSalesChannels',
'footer_sales_channels' => 'setFooterSalesChannels',
'service_sales_channels' => 'setServiceSalesChannels'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'parent' => 'getParent',
'children' => 'getChildren',
'blogs' => 'getBlogs',
'navigation_sales_channels' => 'getNavigationSalesChannels',
'footer_sales_channels' => 'getFooterSalesChannels',
'service_sales_channels' => 'getServiceSalesChannels'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['parent'] = isset($data['parent']) ? $data['parent'] : null;
        $this->container['children'] = isset($data['children']) ? $data['children'] : null;
        $this->container['blogs'] = isset($data['blogs']) ? $data['blogs'] : null;
        $this->container['navigation_sales_channels'] = isset($data['navigation_sales_channels']) ? $data['navigation_sales_channels'] : null;
        $this->container['footer_sales_channels'] = isset($data['footer_sales_channels']) ? $data['footer_sales_channels'] : null;
        $this->container['service_sales_channels'] = isset($data['service_sales_channels']) ? $data['service_sales_channels'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets parent
     *
     * @return \Swagger\Client\Model\SasBlogCategoryJsonApiRelationshipsParent
     */
    public function getParent()
    {
        return $this->container['parent'];
    }

    /**
     * Sets parent
     *
     * @param \Swagger\Client\Model\SasBlogCategoryJsonApiRelationshipsParent $parent parent
     *
     * @return $this
     */
    public function setParent($parent)
    {
        $this->container['parent'] = $parent;

        return $this;
    }

    /**
     * Gets children
     *
     * @return \Swagger\Client\Model\SasBlogCategoryJsonApiRelationshipsChildren
     */
    public function getChildren()
    {
        return $this->container['children'];
    }

    /**
     * Sets children
     *
     * @param \Swagger\Client\Model\SasBlogCategoryJsonApiRelationshipsChildren $children children
     *
     * @return $this
     */
    public function setChildren($children)
    {
        $this->container['children'] = $children;

        return $this;
    }

    /**
     * Gets blogs
     *
     * @return \Swagger\Client\Model\SasBlogCategoryJsonApiRelationshipsBlogs
     */
    public function getBlogs()
    {
        return $this->container['blogs'];
    }

    /**
     * Sets blogs
     *
     * @param \Swagger\Client\Model\SasBlogCategoryJsonApiRelationshipsBlogs $blogs blogs
     *
     * @return $this
     */
    public function setBlogs($blogs)
    {
        $this->container['blogs'] = $blogs;

        return $this;
    }

    /**
     * Gets navigation_sales_channels
     *
     * @return \Swagger\Client\Model\SasBlogCategoryJsonApiRelationshipsNavigationSalesChannels
     */
    public function getNavigationSalesChannels()
    {
        return $this->container['navigation_sales_channels'];
    }

    /**
     * Sets navigation_sales_channels
     *
     * @param \Swagger\Client\Model\SasBlogCategoryJsonApiRelationshipsNavigationSalesChannels $navigation_sales_channels navigation_sales_channels
     *
     * @return $this
     */
    public function setNavigationSalesChannels($navigation_sales_channels)
    {
        $this->container['navigation_sales_channels'] = $navigation_sales_channels;

        return $this;
    }

    /**
     * Gets footer_sales_channels
     *
     * @return \Swagger\Client\Model\SasBlogCategoryJsonApiRelationshipsFooterSalesChannels
     */
    public function getFooterSalesChannels()
    {
        return $this->container['footer_sales_channels'];
    }

    /**
     * Sets footer_sales_channels
     *
     * @param \Swagger\Client\Model\SasBlogCategoryJsonApiRelationshipsFooterSalesChannels $footer_sales_channels footer_sales_channels
     *
     * @return $this
     */
    public function setFooterSalesChannels($footer_sales_channels)
    {
        $this->container['footer_sales_channels'] = $footer_sales_channels;

        return $this;
    }

    /**
     * Gets service_sales_channels
     *
     * @return \Swagger\Client\Model\SasBlogCategoryJsonApiRelationshipsServiceSalesChannels
     */
    public function getServiceSalesChannels()
    {
        return $this->container['service_sales_channels'];
    }

    /**
     * Sets service_sales_channels
     *
     * @param \Swagger\Client\Model\SasBlogCategoryJsonApiRelationshipsServiceSalesChannels $service_sales_channels service_sales_channels
     *
     * @return $this
     */
    public function setServiceSalesChannels($service_sales_channels)
    {
        $this->container['service_sales_channels'] = $service_sales_channels;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
