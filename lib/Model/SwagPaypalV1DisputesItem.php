<?php
/**
 * SwagPaypalV1DisputesItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shopware Admin API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Admin API.  For a better overview, all CRUD-endpoints are hidden by default. If you want to show also CRUD-endpoints add the query parameter `type=jsonapi`.
 *
 * OpenAPI spec version: 6.4.7.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.31
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SwagPaypalV1DisputesItem Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SwagPaypalV1DisputesItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'swag_paypal_v1_disputes_item';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'dispute_id' => 'string',
'create_time' => 'string',
'update_time' => 'string',
'disputed_transactions' => '\Swagger\Client\Model\SwagPaypalV1DisputesDisputedTransaction[]',
'reason' => 'string',
'status' => 'string',
'dispute_state' => 'string',
'dispute_amount' => '\Swagger\Client\Model\SwagPaypalV1CommonMoney',
'external_reason_code' => 'string',
'dispute_outcome' => '\Swagger\Client\Model\SwagPaypalV1DisputesDisputeOutcome',
'adjudications' => '\Swagger\Client\Model\SwagPaypalV1DisputesAdjudication[]',
'money_movements' => '\Swagger\Client\Model\SwagPaypalV1DisputesMoneyMovement[]',
'dispute_life_cycle_stage' => 'string',
'dispute_channel' => 'string',
'messages' => '\Swagger\Client\Model\SwagPaypalV1DisputesMessage[]',
'extensions' => '\Swagger\Client\Model\SwagPaypalV1DisputesExtensions',
'evidences' => '\Swagger\Client\Model\SwagPaypalV1DisputesEvidence[]',
'buyer_response_due_date' => 'string',
'seller_response_due_date' => 'string',
'offer' => '\Swagger\Client\Model\SwagPaypalV1DisputesOffer',
'refund_details' => '\Swagger\Client\Model\SwagPaypalV1DisputesRefundDetails',
'communication_details' => '\Swagger\Client\Model\SwagPaypalV1DisputesCommunicationDetails',
'partner_actions' => '\Swagger\Client\Model\SwagPaypalV1DisputesPartnerAction[]',
'supporting_info' => '\Swagger\Client\Model\SwagPaypalV1DisputesSupportingInfo[]',
'links' => '\Swagger\Client\Model\SwagPaypalV1CommonLink[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'dispute_id' => null,
'create_time' => null,
'update_time' => null,
'disputed_transactions' => null,
'reason' => null,
'status' => null,
'dispute_state' => null,
'dispute_amount' => null,
'external_reason_code' => null,
'dispute_outcome' => null,
'adjudications' => null,
'money_movements' => null,
'dispute_life_cycle_stage' => null,
'dispute_channel' => null,
'messages' => null,
'extensions' => null,
'evidences' => null,
'buyer_response_due_date' => null,
'seller_response_due_date' => null,
'offer' => null,
'refund_details' => null,
'communication_details' => null,
'partner_actions' => null,
'supporting_info' => null,
'links' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'dispute_id' => 'disputeId',
'create_time' => 'createTime',
'update_time' => 'updateTime',
'disputed_transactions' => 'disputedTransactions',
'reason' => 'reason',
'status' => 'status',
'dispute_state' => 'disputeState',
'dispute_amount' => 'disputeAmount',
'external_reason_code' => 'externalReasonCode',
'dispute_outcome' => 'disputeOutcome',
'adjudications' => 'adjudications',
'money_movements' => 'moneyMovements',
'dispute_life_cycle_stage' => 'disputeLifeCycleStage',
'dispute_channel' => 'disputeChannel',
'messages' => 'messages',
'extensions' => 'extensions',
'evidences' => 'evidences',
'buyer_response_due_date' => 'buyerResponseDueDate',
'seller_response_due_date' => 'sellerResponseDueDate',
'offer' => 'offer',
'refund_details' => 'refundDetails',
'communication_details' => 'communicationDetails',
'partner_actions' => 'partnerActions',
'supporting_info' => 'supportingInfo',
'links' => 'links'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'dispute_id' => 'setDisputeId',
'create_time' => 'setCreateTime',
'update_time' => 'setUpdateTime',
'disputed_transactions' => 'setDisputedTransactions',
'reason' => 'setReason',
'status' => 'setStatus',
'dispute_state' => 'setDisputeState',
'dispute_amount' => 'setDisputeAmount',
'external_reason_code' => 'setExternalReasonCode',
'dispute_outcome' => 'setDisputeOutcome',
'adjudications' => 'setAdjudications',
'money_movements' => 'setMoneyMovements',
'dispute_life_cycle_stage' => 'setDisputeLifeCycleStage',
'dispute_channel' => 'setDisputeChannel',
'messages' => 'setMessages',
'extensions' => 'setExtensions',
'evidences' => 'setEvidences',
'buyer_response_due_date' => 'setBuyerResponseDueDate',
'seller_response_due_date' => 'setSellerResponseDueDate',
'offer' => 'setOffer',
'refund_details' => 'setRefundDetails',
'communication_details' => 'setCommunicationDetails',
'partner_actions' => 'setPartnerActions',
'supporting_info' => 'setSupportingInfo',
'links' => 'setLinks'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'dispute_id' => 'getDisputeId',
'create_time' => 'getCreateTime',
'update_time' => 'getUpdateTime',
'disputed_transactions' => 'getDisputedTransactions',
'reason' => 'getReason',
'status' => 'getStatus',
'dispute_state' => 'getDisputeState',
'dispute_amount' => 'getDisputeAmount',
'external_reason_code' => 'getExternalReasonCode',
'dispute_outcome' => 'getDisputeOutcome',
'adjudications' => 'getAdjudications',
'money_movements' => 'getMoneyMovements',
'dispute_life_cycle_stage' => 'getDisputeLifeCycleStage',
'dispute_channel' => 'getDisputeChannel',
'messages' => 'getMessages',
'extensions' => 'getExtensions',
'evidences' => 'getEvidences',
'buyer_response_due_date' => 'getBuyerResponseDueDate',
'seller_response_due_date' => 'getSellerResponseDueDate',
'offer' => 'getOffer',
'refund_details' => 'getRefundDetails',
'communication_details' => 'getCommunicationDetails',
'partner_actions' => 'getPartnerActions',
'supporting_info' => 'getSupportingInfo',
'links' => 'getLinks'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['dispute_id'] = isset($data['dispute_id']) ? $data['dispute_id'] : null;
        $this->container['create_time'] = isset($data['create_time']) ? $data['create_time'] : null;
        $this->container['update_time'] = isset($data['update_time']) ? $data['update_time'] : null;
        $this->container['disputed_transactions'] = isset($data['disputed_transactions']) ? $data['disputed_transactions'] : null;
        $this->container['reason'] = isset($data['reason']) ? $data['reason'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['dispute_state'] = isset($data['dispute_state']) ? $data['dispute_state'] : null;
        $this->container['dispute_amount'] = isset($data['dispute_amount']) ? $data['dispute_amount'] : null;
        $this->container['external_reason_code'] = isset($data['external_reason_code']) ? $data['external_reason_code'] : null;
        $this->container['dispute_outcome'] = isset($data['dispute_outcome']) ? $data['dispute_outcome'] : null;
        $this->container['adjudications'] = isset($data['adjudications']) ? $data['adjudications'] : null;
        $this->container['money_movements'] = isset($data['money_movements']) ? $data['money_movements'] : null;
        $this->container['dispute_life_cycle_stage'] = isset($data['dispute_life_cycle_stage']) ? $data['dispute_life_cycle_stage'] : null;
        $this->container['dispute_channel'] = isset($data['dispute_channel']) ? $data['dispute_channel'] : null;
        $this->container['messages'] = isset($data['messages']) ? $data['messages'] : null;
        $this->container['extensions'] = isset($data['extensions']) ? $data['extensions'] : null;
        $this->container['evidences'] = isset($data['evidences']) ? $data['evidences'] : null;
        $this->container['buyer_response_due_date'] = isset($data['buyer_response_due_date']) ? $data['buyer_response_due_date'] : null;
        $this->container['seller_response_due_date'] = isset($data['seller_response_due_date']) ? $data['seller_response_due_date'] : null;
        $this->container['offer'] = isset($data['offer']) ? $data['offer'] : null;
        $this->container['refund_details'] = isset($data['refund_details']) ? $data['refund_details'] : null;
        $this->container['communication_details'] = isset($data['communication_details']) ? $data['communication_details'] : null;
        $this->container['partner_actions'] = isset($data['partner_actions']) ? $data['partner_actions'] : null;
        $this->container['supporting_info'] = isset($data['supporting_info']) ? $data['supporting_info'] : null;
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets dispute_id
     *
     * @return string
     */
    public function getDisputeId()
    {
        return $this->container['dispute_id'];
    }

    /**
     * Sets dispute_id
     *
     * @param string $dispute_id dispute_id
     *
     * @return $this
     */
    public function setDisputeId($dispute_id)
    {
        $this->container['dispute_id'] = $dispute_id;

        return $this;
    }

    /**
     * Gets create_time
     *
     * @return string
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param string $create_time create_time
     *
     * @return $this
     */
    public function setCreateTime($create_time)
    {
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return string
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param string $update_time update_time
     *
     * @return $this
     */
    public function setUpdateTime($update_time)
    {
        $this->container['update_time'] = $update_time;

        return $this;
    }

    /**
     * Gets disputed_transactions
     *
     * @return \Swagger\Client\Model\SwagPaypalV1DisputesDisputedTransaction[]
     */
    public function getDisputedTransactions()
    {
        return $this->container['disputed_transactions'];
    }

    /**
     * Sets disputed_transactions
     *
     * @param \Swagger\Client\Model\SwagPaypalV1DisputesDisputedTransaction[] $disputed_transactions disputed_transactions
     *
     * @return $this
     */
    public function setDisputedTransactions($disputed_transactions)
    {
        $this->container['disputed_transactions'] = $disputed_transactions;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string $reason reason
     *
     * @return $this
     */
    public function setReason($reason)
    {
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets dispute_state
     *
     * @return string
     */
    public function getDisputeState()
    {
        return $this->container['dispute_state'];
    }

    /**
     * Sets dispute_state
     *
     * @param string $dispute_state dispute_state
     *
     * @return $this
     */
    public function setDisputeState($dispute_state)
    {
        $this->container['dispute_state'] = $dispute_state;

        return $this;
    }

    /**
     * Gets dispute_amount
     *
     * @return \Swagger\Client\Model\SwagPaypalV1CommonMoney
     */
    public function getDisputeAmount()
    {
        return $this->container['dispute_amount'];
    }

    /**
     * Sets dispute_amount
     *
     * @param \Swagger\Client\Model\SwagPaypalV1CommonMoney $dispute_amount dispute_amount
     *
     * @return $this
     */
    public function setDisputeAmount($dispute_amount)
    {
        $this->container['dispute_amount'] = $dispute_amount;

        return $this;
    }

    /**
     * Gets external_reason_code
     *
     * @return string
     */
    public function getExternalReasonCode()
    {
        return $this->container['external_reason_code'];
    }

    /**
     * Sets external_reason_code
     *
     * @param string $external_reason_code external_reason_code
     *
     * @return $this
     */
    public function setExternalReasonCode($external_reason_code)
    {
        $this->container['external_reason_code'] = $external_reason_code;

        return $this;
    }

    /**
     * Gets dispute_outcome
     *
     * @return \Swagger\Client\Model\SwagPaypalV1DisputesDisputeOutcome
     */
    public function getDisputeOutcome()
    {
        return $this->container['dispute_outcome'];
    }

    /**
     * Sets dispute_outcome
     *
     * @param \Swagger\Client\Model\SwagPaypalV1DisputesDisputeOutcome $dispute_outcome dispute_outcome
     *
     * @return $this
     */
    public function setDisputeOutcome($dispute_outcome)
    {
        $this->container['dispute_outcome'] = $dispute_outcome;

        return $this;
    }

    /**
     * Gets adjudications
     *
     * @return \Swagger\Client\Model\SwagPaypalV1DisputesAdjudication[]
     */
    public function getAdjudications()
    {
        return $this->container['adjudications'];
    }

    /**
     * Sets adjudications
     *
     * @param \Swagger\Client\Model\SwagPaypalV1DisputesAdjudication[] $adjudications adjudications
     *
     * @return $this
     */
    public function setAdjudications($adjudications)
    {
        $this->container['adjudications'] = $adjudications;

        return $this;
    }

    /**
     * Gets money_movements
     *
     * @return \Swagger\Client\Model\SwagPaypalV1DisputesMoneyMovement[]
     */
    public function getMoneyMovements()
    {
        return $this->container['money_movements'];
    }

    /**
     * Sets money_movements
     *
     * @param \Swagger\Client\Model\SwagPaypalV1DisputesMoneyMovement[] $money_movements money_movements
     *
     * @return $this
     */
    public function setMoneyMovements($money_movements)
    {
        $this->container['money_movements'] = $money_movements;

        return $this;
    }

    /**
     * Gets dispute_life_cycle_stage
     *
     * @return string
     */
    public function getDisputeLifeCycleStage()
    {
        return $this->container['dispute_life_cycle_stage'];
    }

    /**
     * Sets dispute_life_cycle_stage
     *
     * @param string $dispute_life_cycle_stage dispute_life_cycle_stage
     *
     * @return $this
     */
    public function setDisputeLifeCycleStage($dispute_life_cycle_stage)
    {
        $this->container['dispute_life_cycle_stage'] = $dispute_life_cycle_stage;

        return $this;
    }

    /**
     * Gets dispute_channel
     *
     * @return string
     */
    public function getDisputeChannel()
    {
        return $this->container['dispute_channel'];
    }

    /**
     * Sets dispute_channel
     *
     * @param string $dispute_channel dispute_channel
     *
     * @return $this
     */
    public function setDisputeChannel($dispute_channel)
    {
        $this->container['dispute_channel'] = $dispute_channel;

        return $this;
    }

    /**
     * Gets messages
     *
     * @return \Swagger\Client\Model\SwagPaypalV1DisputesMessage[]
     */
    public function getMessages()
    {
        return $this->container['messages'];
    }

    /**
     * Sets messages
     *
     * @param \Swagger\Client\Model\SwagPaypalV1DisputesMessage[] $messages messages
     *
     * @return $this
     */
    public function setMessages($messages)
    {
        $this->container['messages'] = $messages;

        return $this;
    }

    /**
     * Gets extensions
     *
     * @return \Swagger\Client\Model\SwagPaypalV1DisputesExtensions
     */
    public function getExtensions()
    {
        return $this->container['extensions'];
    }

    /**
     * Sets extensions
     *
     * @param \Swagger\Client\Model\SwagPaypalV1DisputesExtensions $extensions extensions
     *
     * @return $this
     */
    public function setExtensions($extensions)
    {
        $this->container['extensions'] = $extensions;

        return $this;
    }

    /**
     * Gets evidences
     *
     * @return \Swagger\Client\Model\SwagPaypalV1DisputesEvidence[]
     */
    public function getEvidences()
    {
        return $this->container['evidences'];
    }

    /**
     * Sets evidences
     *
     * @param \Swagger\Client\Model\SwagPaypalV1DisputesEvidence[] $evidences evidences
     *
     * @return $this
     */
    public function setEvidences($evidences)
    {
        $this->container['evidences'] = $evidences;

        return $this;
    }

    /**
     * Gets buyer_response_due_date
     *
     * @return string
     */
    public function getBuyerResponseDueDate()
    {
        return $this->container['buyer_response_due_date'];
    }

    /**
     * Sets buyer_response_due_date
     *
     * @param string $buyer_response_due_date buyer_response_due_date
     *
     * @return $this
     */
    public function setBuyerResponseDueDate($buyer_response_due_date)
    {
        $this->container['buyer_response_due_date'] = $buyer_response_due_date;

        return $this;
    }

    /**
     * Gets seller_response_due_date
     *
     * @return string
     */
    public function getSellerResponseDueDate()
    {
        return $this->container['seller_response_due_date'];
    }

    /**
     * Sets seller_response_due_date
     *
     * @param string $seller_response_due_date seller_response_due_date
     *
     * @return $this
     */
    public function setSellerResponseDueDate($seller_response_due_date)
    {
        $this->container['seller_response_due_date'] = $seller_response_due_date;

        return $this;
    }

    /**
     * Gets offer
     *
     * @return \Swagger\Client\Model\SwagPaypalV1DisputesOffer
     */
    public function getOffer()
    {
        return $this->container['offer'];
    }

    /**
     * Sets offer
     *
     * @param \Swagger\Client\Model\SwagPaypalV1DisputesOffer $offer offer
     *
     * @return $this
     */
    public function setOffer($offer)
    {
        $this->container['offer'] = $offer;

        return $this;
    }

    /**
     * Gets refund_details
     *
     * @return \Swagger\Client\Model\SwagPaypalV1DisputesRefundDetails
     */
    public function getRefundDetails()
    {
        return $this->container['refund_details'];
    }

    /**
     * Sets refund_details
     *
     * @param \Swagger\Client\Model\SwagPaypalV1DisputesRefundDetails $refund_details refund_details
     *
     * @return $this
     */
    public function setRefundDetails($refund_details)
    {
        $this->container['refund_details'] = $refund_details;

        return $this;
    }

    /**
     * Gets communication_details
     *
     * @return \Swagger\Client\Model\SwagPaypalV1DisputesCommunicationDetails
     */
    public function getCommunicationDetails()
    {
        return $this->container['communication_details'];
    }

    /**
     * Sets communication_details
     *
     * @param \Swagger\Client\Model\SwagPaypalV1DisputesCommunicationDetails $communication_details communication_details
     *
     * @return $this
     */
    public function setCommunicationDetails($communication_details)
    {
        $this->container['communication_details'] = $communication_details;

        return $this;
    }

    /**
     * Gets partner_actions
     *
     * @return \Swagger\Client\Model\SwagPaypalV1DisputesPartnerAction[]
     */
    public function getPartnerActions()
    {
        return $this->container['partner_actions'];
    }

    /**
     * Sets partner_actions
     *
     * @param \Swagger\Client\Model\SwagPaypalV1DisputesPartnerAction[] $partner_actions partner_actions
     *
     * @return $this
     */
    public function setPartnerActions($partner_actions)
    {
        $this->container['partner_actions'] = $partner_actions;

        return $this;
    }

    /**
     * Gets supporting_info
     *
     * @return \Swagger\Client\Model\SwagPaypalV1DisputesSupportingInfo[]
     */
    public function getSupportingInfo()
    {
        return $this->container['supporting_info'];
    }

    /**
     * Sets supporting_info
     *
     * @param \Swagger\Client\Model\SwagPaypalV1DisputesSupportingInfo[] $supporting_info supporting_info
     *
     * @return $this
     */
    public function setSupportingInfo($supporting_info)
    {
        $this->container['supporting_info'] = $supporting_info;

        return $this;
    }

    /**
     * Gets links
     *
     * @return \Swagger\Client\Model\SwagPaypalV1CommonLink[]
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \Swagger\Client\Model\SwagPaypalV1CommonLink[] $links links
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
