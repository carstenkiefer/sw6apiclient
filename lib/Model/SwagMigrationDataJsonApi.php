<?php
/**
 * SwagMigrationDataJsonApi
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shopware Admin API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Admin API.  For a better overview, all CRUD-endpoints are hidden by default. If you want to show also CRUD-endpoints add the query parameter `type=jsonapi`.
 *
 * OpenAPI spec version: 6.4.7.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.31
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * SwagMigrationDataJsonApi Class Doc Comment
 *
 * @category Class
 * @description Added since version:
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SwagMigrationDataJsonApi extends Resource 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SwagMigrationDataJsonApi';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'run_id' => 'string',
'auto_increment' => 'int',
'entity' => 'string',
'raw' => 'object',
'converted' => 'object',
'unmapped' => 'object',
'mapping_uuid' => 'string',
'written' => 'bool',
'convert_failure' => 'bool',
'write_failure' => 'bool',
'created_at' => '\DateTime',
'updated_at' => '\DateTime',
'relationships' => '\Swagger\Client\Model\SwagMigrationDataJsonApiRelationships'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'run_id' => null,
'auto_increment' => 'int64',
'entity' => null,
'raw' => null,
'converted' => null,
'unmapped' => null,
'mapping_uuid' => null,
'written' => null,
'convert_failure' => null,
'write_failure' => null,
'created_at' => 'date-time',
'updated_at' => 'date-time',
'relationships' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'run_id' => 'runId',
'auto_increment' => 'autoIncrement',
'entity' => 'entity',
'raw' => 'raw',
'converted' => 'converted',
'unmapped' => 'unmapped',
'mapping_uuid' => 'mappingUuid',
'written' => 'written',
'convert_failure' => 'convertFailure',
'write_failure' => 'writeFailure',
'created_at' => 'createdAt',
'updated_at' => 'updatedAt',
'relationships' => 'relationships'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'run_id' => 'setRunId',
'auto_increment' => 'setAutoIncrement',
'entity' => 'setEntity',
'raw' => 'setRaw',
'converted' => 'setConverted',
'unmapped' => 'setUnmapped',
'mapping_uuid' => 'setMappingUuid',
'written' => 'setWritten',
'convert_failure' => 'setConvertFailure',
'write_failure' => 'setWriteFailure',
'created_at' => 'setCreatedAt',
'updated_at' => 'setUpdatedAt',
'relationships' => 'setRelationships'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'run_id' => 'getRunId',
'auto_increment' => 'getAutoIncrement',
'entity' => 'getEntity',
'raw' => 'getRaw',
'converted' => 'getConverted',
'unmapped' => 'getUnmapped',
'mapping_uuid' => 'getMappingUuid',
'written' => 'getWritten',
'convert_failure' => 'getConvertFailure',
'write_failure' => 'getWriteFailure',
'created_at' => 'getCreatedAt',
'updated_at' => 'getUpdatedAt',
'relationships' => 'getRelationships'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['run_id'] = isset($data['run_id']) ? $data['run_id'] : null;
        $this->container['auto_increment'] = isset($data['auto_increment']) ? $data['auto_increment'] : null;
        $this->container['entity'] = isset($data['entity']) ? $data['entity'] : null;
        $this->container['raw'] = isset($data['raw']) ? $data['raw'] : null;
        $this->container['converted'] = isset($data['converted']) ? $data['converted'] : null;
        $this->container['unmapped'] = isset($data['unmapped']) ? $data['unmapped'] : null;
        $this->container['mapping_uuid'] = isset($data['mapping_uuid']) ? $data['mapping_uuid'] : null;
        $this->container['written'] = isset($data['written']) ? $data['written'] : null;
        $this->container['convert_failure'] = isset($data['convert_failure']) ? $data['convert_failure'] : null;
        $this->container['write_failure'] = isset($data['write_failure']) ? $data['write_failure'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['relationships'] = isset($data['relationships']) ? $data['relationships'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        if ($this->container['run_id'] === null) {
            $invalidProperties[] = "'run_id' can't be null";
        }
        if ($this->container['entity'] === null) {
            $invalidProperties[] = "'entity' can't be null";
        }
        if ($this->container['raw'] === null) {
            $invalidProperties[] = "'raw' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets run_id
     *
     * @return string
     */
    public function getRunId()
    {
        return $this->container['run_id'];
    }

    /**
     * Sets run_id
     *
     * @param string $run_id run_id
     *
     * @return $this
     */
    public function setRunId($run_id)
    {
        $this->container['run_id'] = $run_id;

        return $this;
    }

    /**
     * Gets auto_increment
     *
     * @return int
     */
    public function getAutoIncrement()
    {
        return $this->container['auto_increment'];
    }

    /**
     * Sets auto_increment
     *
     * @param int $auto_increment auto_increment
     *
     * @return $this
     */
    public function setAutoIncrement($auto_increment)
    {
        $this->container['auto_increment'] = $auto_increment;

        return $this;
    }

    /**
     * Gets entity
     *
     * @return string
     */
    public function getEntity()
    {
        return $this->container['entity'];
    }

    /**
     * Sets entity
     *
     * @param string $entity entity
     *
     * @return $this
     */
    public function setEntity($entity)
    {
        $this->container['entity'] = $entity;

        return $this;
    }

    /**
     * Gets raw
     *
     * @return object
     */
    public function getRaw()
    {
        return $this->container['raw'];
    }

    /**
     * Sets raw
     *
     * @param object $raw raw
     *
     * @return $this
     */
    public function setRaw($raw)
    {
        $this->container['raw'] = $raw;

        return $this;
    }

    /**
     * Gets converted
     *
     * @return object
     */
    public function getConverted()
    {
        return $this->container['converted'];
    }

    /**
     * Sets converted
     *
     * @param object $converted converted
     *
     * @return $this
     */
    public function setConverted($converted)
    {
        $this->container['converted'] = $converted;

        return $this;
    }

    /**
     * Gets unmapped
     *
     * @return object
     */
    public function getUnmapped()
    {
        return $this->container['unmapped'];
    }

    /**
     * Sets unmapped
     *
     * @param object $unmapped unmapped
     *
     * @return $this
     */
    public function setUnmapped($unmapped)
    {
        $this->container['unmapped'] = $unmapped;

        return $this;
    }

    /**
     * Gets mapping_uuid
     *
     * @return string
     */
    public function getMappingUuid()
    {
        return $this->container['mapping_uuid'];
    }

    /**
     * Sets mapping_uuid
     *
     * @param string $mapping_uuid mapping_uuid
     *
     * @return $this
     */
    public function setMappingUuid($mapping_uuid)
    {
        $this->container['mapping_uuid'] = $mapping_uuid;

        return $this;
    }

    /**
     * Gets written
     *
     * @return bool
     */
    public function getWritten()
    {
        return $this->container['written'];
    }

    /**
     * Sets written
     *
     * @param bool $written written
     *
     * @return $this
     */
    public function setWritten($written)
    {
        $this->container['written'] = $written;

        return $this;
    }

    /**
     * Gets convert_failure
     *
     * @return bool
     */
    public function getConvertFailure()
    {
        return $this->container['convert_failure'];
    }

    /**
     * Sets convert_failure
     *
     * @param bool $convert_failure convert_failure
     *
     * @return $this
     */
    public function setConvertFailure($convert_failure)
    {
        $this->container['convert_failure'] = $convert_failure;

        return $this;
    }

    /**
     * Gets write_failure
     *
     * @return bool
     */
    public function getWriteFailure()
    {
        return $this->container['write_failure'];
    }

    /**
     * Sets write_failure
     *
     * @param bool $write_failure write_failure
     *
     * @return $this
     */
    public function setWriteFailure($write_failure)
    {
        $this->container['write_failure'] = $write_failure;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets relationships
     *
     * @return \Swagger\Client\Model\SwagMigrationDataJsonApiRelationships
     */
    public function getRelationships()
    {
        return $this->container['relationships'];
    }

    /**
     * Sets relationships
     *
     * @param \Swagger\Client\Model\SwagMigrationDataJsonApiRelationships $relationships relationships
     *
     * @return $this
     */
    public function setRelationships($relationships)
    {
        $this->container['relationships'] = $relationships;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
