<?php
/**
 * SwagPaypalV2OrderCapture
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shopware Admin API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Admin API.  For a better overview, all CRUD-endpoints are hidden by default. If you want to show also CRUD-endpoints add the query parameter `type=jsonapi`.
 *
 * OpenAPI spec version: 6.4.7.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.31
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * SwagPaypalV2OrderCapture Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SwagPaypalV2OrderCapture extends SwagPaypalV2OrderPayment 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'swag_paypal_v2_order_capture';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'invoice_id' => 'string',
'note_to_payer' => 'string',
'seller_protection' => '\Swagger\Client\Model\SwagPaypalV2OrderCaptureSellerProtection',
'final_capture' => 'bool',
'seller_receivable_breakdown' => '\Swagger\Client\Model\SwagPaypalV2OrderCaptureSellerReceivableBreakdown',
'disbursement_mode' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'invoice_id' => null,
'note_to_payer' => null,
'seller_protection' => null,
'final_capture' => null,
'seller_receivable_breakdown' => null,
'disbursement_mode' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'invoice_id' => 'invoiceId',
'note_to_payer' => 'noteToPayer',
'seller_protection' => 'sellerProtection',
'final_capture' => 'finalCapture',
'seller_receivable_breakdown' => 'sellerReceivableBreakdown',
'disbursement_mode' => 'disbursementMode'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'invoice_id' => 'setInvoiceId',
'note_to_payer' => 'setNoteToPayer',
'seller_protection' => 'setSellerProtection',
'final_capture' => 'setFinalCapture',
'seller_receivable_breakdown' => 'setSellerReceivableBreakdown',
'disbursement_mode' => 'setDisbursementMode'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'invoice_id' => 'getInvoiceId',
'note_to_payer' => 'getNoteToPayer',
'seller_protection' => 'getSellerProtection',
'final_capture' => 'getFinalCapture',
'seller_receivable_breakdown' => 'getSellerReceivableBreakdown',
'disbursement_mode' => 'getDisbursementMode'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['invoice_id'] = isset($data['invoice_id']) ? $data['invoice_id'] : null;
        $this->container['note_to_payer'] = isset($data['note_to_payer']) ? $data['note_to_payer'] : null;
        $this->container['seller_protection'] = isset($data['seller_protection']) ? $data['seller_protection'] : null;
        $this->container['final_capture'] = isset($data['final_capture']) ? $data['final_capture'] : null;
        $this->container['seller_receivable_breakdown'] = isset($data['seller_receivable_breakdown']) ? $data['seller_receivable_breakdown'] : null;
        $this->container['disbursement_mode'] = isset($data['disbursement_mode']) ? $data['disbursement_mode'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets invoice_id
     *
     * @return string
     */
    public function getInvoiceId()
    {
        return $this->container['invoice_id'];
    }

    /**
     * Sets invoice_id
     *
     * @param string $invoice_id invoice_id
     *
     * @return $this
     */
    public function setInvoiceId($invoice_id)
    {
        $this->container['invoice_id'] = $invoice_id;

        return $this;
    }

    /**
     * Gets note_to_payer
     *
     * @return string
     */
    public function getNoteToPayer()
    {
        return $this->container['note_to_payer'];
    }

    /**
     * Sets note_to_payer
     *
     * @param string $note_to_payer note_to_payer
     *
     * @return $this
     */
    public function setNoteToPayer($note_to_payer)
    {
        $this->container['note_to_payer'] = $note_to_payer;

        return $this;
    }

    /**
     * Gets seller_protection
     *
     * @return \Swagger\Client\Model\SwagPaypalV2OrderCaptureSellerProtection
     */
    public function getSellerProtection()
    {
        return $this->container['seller_protection'];
    }

    /**
     * Sets seller_protection
     *
     * @param \Swagger\Client\Model\SwagPaypalV2OrderCaptureSellerProtection $seller_protection seller_protection
     *
     * @return $this
     */
    public function setSellerProtection($seller_protection)
    {
        $this->container['seller_protection'] = $seller_protection;

        return $this;
    }

    /**
     * Gets final_capture
     *
     * @return bool
     */
    public function getFinalCapture()
    {
        return $this->container['final_capture'];
    }

    /**
     * Sets final_capture
     *
     * @param bool $final_capture final_capture
     *
     * @return $this
     */
    public function setFinalCapture($final_capture)
    {
        $this->container['final_capture'] = $final_capture;

        return $this;
    }

    /**
     * Gets seller_receivable_breakdown
     *
     * @return \Swagger\Client\Model\SwagPaypalV2OrderCaptureSellerReceivableBreakdown
     */
    public function getSellerReceivableBreakdown()
    {
        return $this->container['seller_receivable_breakdown'];
    }

    /**
     * Sets seller_receivable_breakdown
     *
     * @param \Swagger\Client\Model\SwagPaypalV2OrderCaptureSellerReceivableBreakdown $seller_receivable_breakdown seller_receivable_breakdown
     *
     * @return $this
     */
    public function setSellerReceivableBreakdown($seller_receivable_breakdown)
    {
        $this->container['seller_receivable_breakdown'] = $seller_receivable_breakdown;

        return $this;
    }

    /**
     * Gets disbursement_mode
     *
     * @return string
     */
    public function getDisbursementMode()
    {
        return $this->container['disbursement_mode'];
    }

    /**
     * Sets disbursement_mode
     *
     * @param string $disbursement_mode disbursement_mode
     *
     * @return $this
     */
    public function setDisbursementMode($disbursement_mode)
    {
        $this->container['disbursement_mode'] = $disbursement_mode;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
