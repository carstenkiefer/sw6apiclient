<?php
/**
 * SalesChannelDomainJsonApiRelationships
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shopware Admin API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Admin API.  For a better overview, all CRUD-endpoints are hidden by default. If you want to show also CRUD-endpoints add the query parameter `type=jsonapi`.
 *
 * OpenAPI spec version: 6.4.7.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.31
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SalesChannelDomainJsonApiRelationships Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SalesChannelDomainJsonApiRelationships implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SalesChannelDomainJsonApi_relationships';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'sales_channel' => '\Swagger\Client\Model\SalesChannelDomainJsonApiRelationshipsSalesChannel',
'language' => '\Swagger\Client\Model\SalesChannelDomainJsonApiRelationshipsLanguage',
'currency' => '\Swagger\Client\Model\SalesChannelDomainJsonApiRelationshipsCurrency',
'snippet_set' => '\Swagger\Client\Model\SalesChannelDomainJsonApiRelationshipsSnippetSet',
'sales_channel_default_hreflang' => '\Swagger\Client\Model\SalesChannelDomainJsonApiRelationshipsSalesChannelDefaultHreflang',
'product_exports' => '\Swagger\Client\Model\SalesChannelDomainJsonApiRelationshipsProductExports'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'sales_channel' => null,
'language' => null,
'currency' => null,
'snippet_set' => null,
'sales_channel_default_hreflang' => null,
'product_exports' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sales_channel' => 'salesChannel',
'language' => 'language',
'currency' => 'currency',
'snippet_set' => 'snippetSet',
'sales_channel_default_hreflang' => 'salesChannelDefaultHreflang',
'product_exports' => 'productExports'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sales_channel' => 'setSalesChannel',
'language' => 'setLanguage',
'currency' => 'setCurrency',
'snippet_set' => 'setSnippetSet',
'sales_channel_default_hreflang' => 'setSalesChannelDefaultHreflang',
'product_exports' => 'setProductExports'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sales_channel' => 'getSalesChannel',
'language' => 'getLanguage',
'currency' => 'getCurrency',
'snippet_set' => 'getSnippetSet',
'sales_channel_default_hreflang' => 'getSalesChannelDefaultHreflang',
'product_exports' => 'getProductExports'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sales_channel'] = isset($data['sales_channel']) ? $data['sales_channel'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['snippet_set'] = isset($data['snippet_set']) ? $data['snippet_set'] : null;
        $this->container['sales_channel_default_hreflang'] = isset($data['sales_channel_default_hreflang']) ? $data['sales_channel_default_hreflang'] : null;
        $this->container['product_exports'] = isset($data['product_exports']) ? $data['product_exports'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sales_channel
     *
     * @return \Swagger\Client\Model\SalesChannelDomainJsonApiRelationshipsSalesChannel
     */
    public function getSalesChannel()
    {
        return $this->container['sales_channel'];
    }

    /**
     * Sets sales_channel
     *
     * @param \Swagger\Client\Model\SalesChannelDomainJsonApiRelationshipsSalesChannel $sales_channel sales_channel
     *
     * @return $this
     */
    public function setSalesChannel($sales_channel)
    {
        $this->container['sales_channel'] = $sales_channel;

        return $this;
    }

    /**
     * Gets language
     *
     * @return \Swagger\Client\Model\SalesChannelDomainJsonApiRelationshipsLanguage
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param \Swagger\Client\Model\SalesChannelDomainJsonApiRelationshipsLanguage $language language
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \Swagger\Client\Model\SalesChannelDomainJsonApiRelationshipsCurrency
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \Swagger\Client\Model\SalesChannelDomainJsonApiRelationshipsCurrency $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets snippet_set
     *
     * @return \Swagger\Client\Model\SalesChannelDomainJsonApiRelationshipsSnippetSet
     */
    public function getSnippetSet()
    {
        return $this->container['snippet_set'];
    }

    /**
     * Sets snippet_set
     *
     * @param \Swagger\Client\Model\SalesChannelDomainJsonApiRelationshipsSnippetSet $snippet_set snippet_set
     *
     * @return $this
     */
    public function setSnippetSet($snippet_set)
    {
        $this->container['snippet_set'] = $snippet_set;

        return $this;
    }

    /**
     * Gets sales_channel_default_hreflang
     *
     * @return \Swagger\Client\Model\SalesChannelDomainJsonApiRelationshipsSalesChannelDefaultHreflang
     */
    public function getSalesChannelDefaultHreflang()
    {
        return $this->container['sales_channel_default_hreflang'];
    }

    /**
     * Sets sales_channel_default_hreflang
     *
     * @param \Swagger\Client\Model\SalesChannelDomainJsonApiRelationshipsSalesChannelDefaultHreflang $sales_channel_default_hreflang sales_channel_default_hreflang
     *
     * @return $this
     */
    public function setSalesChannelDefaultHreflang($sales_channel_default_hreflang)
    {
        $this->container['sales_channel_default_hreflang'] = $sales_channel_default_hreflang;

        return $this;
    }

    /**
     * Gets product_exports
     *
     * @return \Swagger\Client\Model\SalesChannelDomainJsonApiRelationshipsProductExports
     */
    public function getProductExports()
    {
        return $this->container['product_exports'];
    }

    /**
     * Sets product_exports
     *
     * @param \Swagger\Client\Model\SalesChannelDomainJsonApiRelationshipsProductExports $product_exports product_exports
     *
     * @return $this
     */
    public function setProductExports($product_exports)
    {
        $this->container['product_exports'] = $product_exports;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
