<?php
/**
 * SwagPaypalV1Payment
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shopware Admin API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Admin API.  For a better overview, all CRUD-endpoints are hidden by default. If you want to show also CRUD-endpoints add the query parameter `type=jsonapi`.
 *
 * OpenAPI spec version: 6.4.7.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.31
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SwagPaypalV1Payment Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SwagPaypalV1Payment implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'swag_paypal_v1_payment';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'intent' => 'string',
'state' => 'string',
'cart' => 'string',
'payer' => '\Swagger\Client\Model\SwagPaypalV1PaymentPayer',
'transactions' => '\Swagger\Client\Model\SwagPaypalV1PaymentTransaction[]',
'create_time' => 'string',
'update_time' => 'string',
'links' => '\Swagger\Client\Model\SwagPaypalV1CommonLink[]',
'redirect_urls' => '\Swagger\Client\Model\SwagPaypalV1PaymentRedirectUrls',
'application_context' => '\Swagger\Client\Model\SwagPaypalV1PaymentApplicationContext',
'payment_instruction' => '\Swagger\Client\Model\SwagPaypalV1PaymentPaymentInstruction'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'intent' => null,
'state' => null,
'cart' => null,
'payer' => null,
'transactions' => null,
'create_time' => null,
'update_time' => null,
'links' => null,
'redirect_urls' => null,
'application_context' => null,
'payment_instruction' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'intent' => 'intent',
'state' => 'state',
'cart' => 'cart',
'payer' => 'payer',
'transactions' => 'transactions',
'create_time' => 'createTime',
'update_time' => 'updateTime',
'links' => 'links',
'redirect_urls' => 'redirectUrls',
'application_context' => 'applicationContext',
'payment_instruction' => 'paymentInstruction'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'intent' => 'setIntent',
'state' => 'setState',
'cart' => 'setCart',
'payer' => 'setPayer',
'transactions' => 'setTransactions',
'create_time' => 'setCreateTime',
'update_time' => 'setUpdateTime',
'links' => 'setLinks',
'redirect_urls' => 'setRedirectUrls',
'application_context' => 'setApplicationContext',
'payment_instruction' => 'setPaymentInstruction'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'intent' => 'getIntent',
'state' => 'getState',
'cart' => 'getCart',
'payer' => 'getPayer',
'transactions' => 'getTransactions',
'create_time' => 'getCreateTime',
'update_time' => 'getUpdateTime',
'links' => 'getLinks',
'redirect_urls' => 'getRedirectUrls',
'application_context' => 'getApplicationContext',
'payment_instruction' => 'getPaymentInstruction'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['intent'] = isset($data['intent']) ? $data['intent'] : 'sale';
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['cart'] = isset($data['cart']) ? $data['cart'] : null;
        $this->container['payer'] = isset($data['payer']) ? $data['payer'] : null;
        $this->container['transactions'] = isset($data['transactions']) ? $data['transactions'] : null;
        $this->container['create_time'] = isset($data['create_time']) ? $data['create_time'] : null;
        $this->container['update_time'] = isset($data['update_time']) ? $data['update_time'] : null;
        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['redirect_urls'] = isset($data['redirect_urls']) ? $data['redirect_urls'] : null;
        $this->container['application_context'] = isset($data['application_context']) ? $data['application_context'] : null;
        $this->container['payment_instruction'] = isset($data['payment_instruction']) ? $data['payment_instruction'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets intent
     *
     * @return string
     */
    public function getIntent()
    {
        return $this->container['intent'];
    }

    /**
     * Sets intent
     *
     * @param string $intent intent
     *
     * @return $this
     */
    public function setIntent($intent)
    {
        $this->container['intent'] = $intent;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state state
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets cart
     *
     * @return string
     */
    public function getCart()
    {
        return $this->container['cart'];
    }

    /**
     * Sets cart
     *
     * @param string $cart cart
     *
     * @return $this
     */
    public function setCart($cart)
    {
        $this->container['cart'] = $cart;

        return $this;
    }

    /**
     * Gets payer
     *
     * @return \Swagger\Client\Model\SwagPaypalV1PaymentPayer
     */
    public function getPayer()
    {
        return $this->container['payer'];
    }

    /**
     * Sets payer
     *
     * @param \Swagger\Client\Model\SwagPaypalV1PaymentPayer $payer payer
     *
     * @return $this
     */
    public function setPayer($payer)
    {
        $this->container['payer'] = $payer;

        return $this;
    }

    /**
     * Gets transactions
     *
     * @return \Swagger\Client\Model\SwagPaypalV1PaymentTransaction[]
     */
    public function getTransactions()
    {
        return $this->container['transactions'];
    }

    /**
     * Sets transactions
     *
     * @param \Swagger\Client\Model\SwagPaypalV1PaymentTransaction[] $transactions transactions
     *
     * @return $this
     */
    public function setTransactions($transactions)
    {
        $this->container['transactions'] = $transactions;

        return $this;
    }

    /**
     * Gets create_time
     *
     * @return string
     */
    public function getCreateTime()
    {
        return $this->container['create_time'];
    }

    /**
     * Sets create_time
     *
     * @param string $create_time create_time
     *
     * @return $this
     */
    public function setCreateTime($create_time)
    {
        $this->container['create_time'] = $create_time;

        return $this;
    }

    /**
     * Gets update_time
     *
     * @return string
     */
    public function getUpdateTime()
    {
        return $this->container['update_time'];
    }

    /**
     * Sets update_time
     *
     * @param string $update_time update_time
     *
     * @return $this
     */
    public function setUpdateTime($update_time)
    {
        $this->container['update_time'] = $update_time;

        return $this;
    }

    /**
     * Gets links
     *
     * @return \Swagger\Client\Model\SwagPaypalV1CommonLink[]
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \Swagger\Client\Model\SwagPaypalV1CommonLink[] $links links
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets redirect_urls
     *
     * @return \Swagger\Client\Model\SwagPaypalV1PaymentRedirectUrls
     */
    public function getRedirectUrls()
    {
        return $this->container['redirect_urls'];
    }

    /**
     * Sets redirect_urls
     *
     * @param \Swagger\Client\Model\SwagPaypalV1PaymentRedirectUrls $redirect_urls redirect_urls
     *
     * @return $this
     */
    public function setRedirectUrls($redirect_urls)
    {
        $this->container['redirect_urls'] = $redirect_urls;

        return $this;
    }

    /**
     * Gets application_context
     *
     * @return \Swagger\Client\Model\SwagPaypalV1PaymentApplicationContext
     */
    public function getApplicationContext()
    {
        return $this->container['application_context'];
    }

    /**
     * Sets application_context
     *
     * @param \Swagger\Client\Model\SwagPaypalV1PaymentApplicationContext $application_context application_context
     *
     * @return $this
     */
    public function setApplicationContext($application_context)
    {
        $this->container['application_context'] = $application_context;

        return $this;
    }

    /**
     * Gets payment_instruction
     *
     * @return \Swagger\Client\Model\SwagPaypalV1PaymentPaymentInstruction
     */
    public function getPaymentInstruction()
    {
        return $this->container['payment_instruction'];
    }

    /**
     * Sets payment_instruction
     *
     * @param \Swagger\Client\Model\SwagPaypalV1PaymentPaymentInstruction $payment_instruction payment_instruction
     *
     * @return $this
     */
    public function setPaymentInstruction($payment_instruction)
    {
        $this->container['payment_instruction'] = $payment_instruction;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
