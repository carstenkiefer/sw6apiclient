<?php
/**
 * MailtemplateSendBody
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shopware Admin API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Admin API.  For a better overview, all CRUD-endpoints are hidden by default. If you want to show also CRUD-endpoints add the query parameter `type=jsonapi`.
 *
 * OpenAPI spec version: 6.4.7.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.31
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * MailtemplateSendBody Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MailtemplateSendBody implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'mailtemplate_send_body';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'recipients' => 'map[string,string]',
'sales_channel_id' => 'string',
'content_html' => 'string',
'content_plain' => 'string',
'subject' => 'string',
'sender_name' => 'string',
'sender_email' => 'string',
'media_ids' => 'string[]',
'bin_attachments' => '\Swagger\Client\Model\ActionmailtemplatesendBinAttachments[]',
'recipients_bcc' => 'map[string,string]',
'recipients_cc' => 'map[string,string]',
'reply_to' => 'map[string,string]',
'return_path' => 'map[string,string]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'recipients' => null,
'sales_channel_id' => null,
'content_html' => null,
'content_plain' => null,
'subject' => null,
'sender_name' => null,
'sender_email' => null,
'media_ids' => null,
'bin_attachments' => null,
'recipients_bcc' => null,
'recipients_cc' => null,
'reply_to' => null,
'return_path' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'recipients' => 'recipients',
'sales_channel_id' => 'salesChannelId',
'content_html' => 'contentHtml',
'content_plain' => 'contentPlain',
'subject' => 'subject',
'sender_name' => 'senderName',
'sender_email' => 'senderEmail',
'media_ids' => 'mediaIds',
'bin_attachments' => 'binAttachments',
'recipients_bcc' => 'recipientsBcc',
'recipients_cc' => 'recipientsCc',
'reply_to' => 'replyTo',
'return_path' => 'returnPath'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'recipients' => 'setRecipients',
'sales_channel_id' => 'setSalesChannelId',
'content_html' => 'setContentHtml',
'content_plain' => 'setContentPlain',
'subject' => 'setSubject',
'sender_name' => 'setSenderName',
'sender_email' => 'setSenderEmail',
'media_ids' => 'setMediaIds',
'bin_attachments' => 'setBinAttachments',
'recipients_bcc' => 'setRecipientsBcc',
'recipients_cc' => 'setRecipientsCc',
'reply_to' => 'setReplyTo',
'return_path' => 'setReturnPath'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'recipients' => 'getRecipients',
'sales_channel_id' => 'getSalesChannelId',
'content_html' => 'getContentHtml',
'content_plain' => 'getContentPlain',
'subject' => 'getSubject',
'sender_name' => 'getSenderName',
'sender_email' => 'getSenderEmail',
'media_ids' => 'getMediaIds',
'bin_attachments' => 'getBinAttachments',
'recipients_bcc' => 'getRecipientsBcc',
'recipients_cc' => 'getRecipientsCc',
'reply_to' => 'getReplyTo',
'return_path' => 'getReturnPath'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['recipients'] = isset($data['recipients']) ? $data['recipients'] : null;
        $this->container['sales_channel_id'] = isset($data['sales_channel_id']) ? $data['sales_channel_id'] : null;
        $this->container['content_html'] = isset($data['content_html']) ? $data['content_html'] : null;
        $this->container['content_plain'] = isset($data['content_plain']) ? $data['content_plain'] : null;
        $this->container['subject'] = isset($data['subject']) ? $data['subject'] : null;
        $this->container['sender_name'] = isset($data['sender_name']) ? $data['sender_name'] : null;
        $this->container['sender_email'] = isset($data['sender_email']) ? $data['sender_email'] : null;
        $this->container['media_ids'] = isset($data['media_ids']) ? $data['media_ids'] : null;
        $this->container['bin_attachments'] = isset($data['bin_attachments']) ? $data['bin_attachments'] : null;
        $this->container['recipients_bcc'] = isset($data['recipients_bcc']) ? $data['recipients_bcc'] : null;
        $this->container['recipients_cc'] = isset($data['recipients_cc']) ? $data['recipients_cc'] : null;
        $this->container['reply_to'] = isset($data['reply_to']) ? $data['reply_to'] : null;
        $this->container['return_path'] = isset($data['return_path']) ? $data['return_path'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['recipients'] === null) {
            $invalidProperties[] = "'recipients' can't be null";
        }
        if ($this->container['sales_channel_id'] === null) {
            $invalidProperties[] = "'sales_channel_id' can't be null";
        }
        if ($this->container['content_html'] === null) {
            $invalidProperties[] = "'content_html' can't be null";
        }
        if ($this->container['content_plain'] === null) {
            $invalidProperties[] = "'content_plain' can't be null";
        }
        if ($this->container['subject'] === null) {
            $invalidProperties[] = "'subject' can't be null";
        }
        if ($this->container['sender_name'] === null) {
            $invalidProperties[] = "'sender_name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets recipients
     *
     * @return map[string,string]
     */
    public function getRecipients()
    {
        return $this->container['recipients'];
    }

    /**
     * Sets recipients
     *
     * @param map[string,string] $recipients A list of recipients with name and mail address.
     *
     * @return $this
     */
    public function setRecipients($recipients)
    {
        $this->container['recipients'] = $recipients;

        return $this;
    }

    /**
     * Gets sales_channel_id
     *
     * @return string
     */
    public function getSalesChannelId()
    {
        return $this->container['sales_channel_id'];
    }

    /**
     * Sets sales_channel_id
     *
     * @param string $sales_channel_id Identifier of the sales channel from which the mail should be send.
     *
     * @return $this
     */
    public function setSalesChannelId($sales_channel_id)
    {
        $this->container['sales_channel_id'] = $sales_channel_id;

        return $this;
    }

    /**
     * Gets content_html
     *
     * @return string
     */
    public function getContentHtml()
    {
        return $this->container['content_html'];
    }

    /**
     * Sets content_html
     *
     * @param string $content_html The content of the mail in HTML format.
     *
     * @return $this
     */
    public function setContentHtml($content_html)
    {
        $this->container['content_html'] = $content_html;

        return $this;
    }

    /**
     * Gets content_plain
     *
     * @return string
     */
    public function getContentPlain()
    {
        return $this->container['content_plain'];
    }

    /**
     * Sets content_plain
     *
     * @param string $content_plain The content of the mail as plain text.
     *
     * @return $this
     */
    public function setContentPlain($content_plain)
    {
        $this->container['content_plain'] = $content_plain;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject Subject of the mail.
     *
     * @return $this
     */
    public function setSubject($subject)
    {
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets sender_name
     *
     * @return string
     */
    public function getSenderName()
    {
        return $this->container['sender_name'];
    }

    /**
     * Sets sender_name
     *
     * @param string $sender_name Name of the sender.
     *
     * @return $this
     */
    public function setSenderName($sender_name)
    {
        $this->container['sender_name'] = $sender_name;

        return $this;
    }

    /**
     * Gets sender_email
     *
     * @return string
     */
    public function getSenderEmail()
    {
        return $this->container['sender_email'];
    }

    /**
     * Sets sender_email
     *
     * @param string $sender_email Mail address of the sender. If not set, `core.basicInformation.email` or `core.mailerSettings.senderAddress` will be used from the shop configuration.
     *
     * @return $this
     */
    public function setSenderEmail($sender_email)
    {
        $this->container['sender_email'] = $sender_email;

        return $this;
    }

    /**
     * Gets media_ids
     *
     * @return string[]
     */
    public function getMediaIds()
    {
        return $this->container['media_ids'];
    }

    /**
     * Sets media_ids
     *
     * @param string[] $media_ids List of media identifiers which should be attached to the mail.
     *
     * @return $this
     */
    public function setMediaIds($media_ids)
    {
        $this->container['media_ids'] = $media_ids;

        return $this;
    }

    /**
     * Gets bin_attachments
     *
     * @return \Swagger\Client\Model\ActionmailtemplatesendBinAttachments[]
     */
    public function getBinAttachments()
    {
        return $this->container['bin_attachments'];
    }

    /**
     * Sets bin_attachments
     *
     * @param \Swagger\Client\Model\ActionmailtemplatesendBinAttachments[] $bin_attachments A list of binary attachments which should be added to the mail.
     *
     * @return $this
     */
    public function setBinAttachments($bin_attachments)
    {
        $this->container['bin_attachments'] = $bin_attachments;

        return $this;
    }

    /**
     * Gets recipients_bcc
     *
     * @return map[string,string]
     */
    public function getRecipientsBcc()
    {
        return $this->container['recipients_bcc'];
    }

    /**
     * Sets recipients_bcc
     *
     * @param map[string,string] $recipients_bcc A list of recipients with name and mail address to be set in BCC.
     *
     * @return $this
     */
    public function setRecipientsBcc($recipients_bcc)
    {
        $this->container['recipients_bcc'] = $recipients_bcc;

        return $this;
    }

    /**
     * Gets recipients_cc
     *
     * @return map[string,string]
     */
    public function getRecipientsCc()
    {
        return $this->container['recipients_cc'];
    }

    /**
     * Sets recipients_cc
     *
     * @param map[string,string] $recipients_cc A list of recipients with name and mail address to be set in CC.
     *
     * @return $this
     */
    public function setRecipientsCc($recipients_cc)
    {
        $this->container['recipients_cc'] = $recipients_cc;

        return $this;
    }

    /**
     * Gets reply_to
     *
     * @return map[string,string]
     */
    public function getReplyTo()
    {
        return $this->container['reply_to'];
    }

    /**
     * Sets reply_to
     *
     * @param map[string,string] $reply_to A list of mail addresses with name and mail address to be set in reply to.
     *
     * @return $this
     */
    public function setReplyTo($reply_to)
    {
        $this->container['reply_to'] = $reply_to;

        return $this;
    }

    /**
     * Gets return_path
     *
     * @return map[string,string]
     */
    public function getReturnPath()
    {
        return $this->container['return_path'];
    }

    /**
     * Sets return_path
     *
     * @param map[string,string] $return_path A list of mail addresses with name and mail address to be set in return path.
     *
     * @return $this
     */
    public function setReturnPath($return_path)
    {
        $this->container['return_path'] = $return_path;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
