<?php
/**
 * SwagPaypalPosSalesChannel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shopware Admin API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Admin API.  For a better overview, all CRUD-endpoints are hidden by default. If you want to show also CRUD-endpoints add the query parameter `type=jsonapi`.
 *
 * OpenAPI spec version: 6.4.7.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.31
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SwagPaypalPosSalesChannel Class Doc Comment
 *
 * @category Class
 * @description Added since version:
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SwagPaypalPosSalesChannel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SwagPaypalPosSalesChannel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'sales_channel_id' => 'string',
'product_stream_id' => 'string',
'api_key' => 'string',
'media_domain' => 'string',
'webhook_signing_key' => 'string',
'sync_prices' => 'bool',
'replace' => 'int',
'created_at' => '\DateTime',
'updated_at' => '\DateTime',
'sales_channel' => '\Swagger\Client\Model\SalesChannel',
'product_stream' => '\Swagger\Client\Model\ProductStream'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'sales_channel_id' => null,
'product_stream_id' => null,
'api_key' => null,
'media_domain' => null,
'webhook_signing_key' => null,
'sync_prices' => null,
'replace' => 'int64',
'created_at' => 'date-time',
'updated_at' => 'date-time',
'sales_channel' => null,
'product_stream' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'sales_channel_id' => 'salesChannelId',
'product_stream_id' => 'productStreamId',
'api_key' => 'apiKey',
'media_domain' => 'mediaDomain',
'webhook_signing_key' => 'webhookSigningKey',
'sync_prices' => 'syncPrices',
'replace' => 'replace',
'created_at' => 'createdAt',
'updated_at' => 'updatedAt',
'sales_channel' => 'salesChannel',
'product_stream' => 'productStream'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'sales_channel_id' => 'setSalesChannelId',
'product_stream_id' => 'setProductStreamId',
'api_key' => 'setApiKey',
'media_domain' => 'setMediaDomain',
'webhook_signing_key' => 'setWebhookSigningKey',
'sync_prices' => 'setSyncPrices',
'replace' => 'setReplace',
'created_at' => 'setCreatedAt',
'updated_at' => 'setUpdatedAt',
'sales_channel' => 'setSalesChannel',
'product_stream' => 'setProductStream'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'sales_channel_id' => 'getSalesChannelId',
'product_stream_id' => 'getProductStreamId',
'api_key' => 'getApiKey',
'media_domain' => 'getMediaDomain',
'webhook_signing_key' => 'getWebhookSigningKey',
'sync_prices' => 'getSyncPrices',
'replace' => 'getReplace',
'created_at' => 'getCreatedAt',
'updated_at' => 'getUpdatedAt',
'sales_channel' => 'getSalesChannel',
'product_stream' => 'getProductStream'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['sales_channel_id'] = isset($data['sales_channel_id']) ? $data['sales_channel_id'] : null;
        $this->container['product_stream_id'] = isset($data['product_stream_id']) ? $data['product_stream_id'] : null;
        $this->container['api_key'] = isset($data['api_key']) ? $data['api_key'] : null;
        $this->container['media_domain'] = isset($data['media_domain']) ? $data['media_domain'] : null;
        $this->container['webhook_signing_key'] = isset($data['webhook_signing_key']) ? $data['webhook_signing_key'] : null;
        $this->container['sync_prices'] = isset($data['sync_prices']) ? $data['sync_prices'] : null;
        $this->container['replace'] = isset($data['replace']) ? $data['replace'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['sales_channel'] = isset($data['sales_channel']) ? $data['sales_channel'] : null;
        $this->container['product_stream'] = isset($data['product_stream']) ? $data['product_stream'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['sales_channel_id'] === null) {
            $invalidProperties[] = "'sales_channel_id' can't be null";
        }
        if ($this->container['api_key'] === null) {
            $invalidProperties[] = "'api_key' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets sales_channel_id
     *
     * @return string
     */
    public function getSalesChannelId()
    {
        return $this->container['sales_channel_id'];
    }

    /**
     * Sets sales_channel_id
     *
     * @param string $sales_channel_id sales_channel_id
     *
     * @return $this
     */
    public function setSalesChannelId($sales_channel_id)
    {
        $this->container['sales_channel_id'] = $sales_channel_id;

        return $this;
    }

    /**
     * Gets product_stream_id
     *
     * @return string
     */
    public function getProductStreamId()
    {
        return $this->container['product_stream_id'];
    }

    /**
     * Sets product_stream_id
     *
     * @param string $product_stream_id product_stream_id
     *
     * @return $this
     */
    public function setProductStreamId($product_stream_id)
    {
        $this->container['product_stream_id'] = $product_stream_id;

        return $this;
    }

    /**
     * Gets api_key
     *
     * @return string
     */
    public function getApiKey()
    {
        return $this->container['api_key'];
    }

    /**
     * Sets api_key
     *
     * @param string $api_key api_key
     *
     * @return $this
     */
    public function setApiKey($api_key)
    {
        $this->container['api_key'] = $api_key;

        return $this;
    }

    /**
     * Gets media_domain
     *
     * @return string
     */
    public function getMediaDomain()
    {
        return $this->container['media_domain'];
    }

    /**
     * Sets media_domain
     *
     * @param string $media_domain media_domain
     *
     * @return $this
     */
    public function setMediaDomain($media_domain)
    {
        $this->container['media_domain'] = $media_domain;

        return $this;
    }

    /**
     * Gets webhook_signing_key
     *
     * @return string
     */
    public function getWebhookSigningKey()
    {
        return $this->container['webhook_signing_key'];
    }

    /**
     * Sets webhook_signing_key
     *
     * @param string $webhook_signing_key webhook_signing_key
     *
     * @return $this
     */
    public function setWebhookSigningKey($webhook_signing_key)
    {
        $this->container['webhook_signing_key'] = $webhook_signing_key;

        return $this;
    }

    /**
     * Gets sync_prices
     *
     * @return bool
     */
    public function getSyncPrices()
    {
        return $this->container['sync_prices'];
    }

    /**
     * Sets sync_prices
     *
     * @param bool $sync_prices sync_prices
     *
     * @return $this
     */
    public function setSyncPrices($sync_prices)
    {
        $this->container['sync_prices'] = $sync_prices;

        return $this;
    }

    /**
     * Gets replace
     *
     * @return int
     */
    public function getReplace()
    {
        return $this->container['replace'];
    }

    /**
     * Sets replace
     *
     * @param int $replace replace
     *
     * @return $this
     */
    public function setReplace($replace)
    {
        $this->container['replace'] = $replace;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets sales_channel
     *
     * @return \Swagger\Client\Model\SalesChannel
     */
    public function getSalesChannel()
    {
        return $this->container['sales_channel'];
    }

    /**
     * Sets sales_channel
     *
     * @param \Swagger\Client\Model\SalesChannel $sales_channel sales_channel
     *
     * @return $this
     */
    public function setSalesChannel($sales_channel)
    {
        $this->container['sales_channel'] = $sales_channel;

        return $this;
    }

    /**
     * Gets product_stream
     *
     * @return \Swagger\Client\Model\ProductStream
     */
    public function getProductStream()
    {
        return $this->container['product_stream'];
    }

    /**
     * Sets product_stream
     *
     * @param \Swagger\Client\Model\ProductStream $product_stream product_stream
     *
     * @return $this
     */
    public function setProductStream($product_stream)
    {
        $this->container['product_stream'] = $product_stream;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
