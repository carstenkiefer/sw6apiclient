<?php
/**
 * Country
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shopware Admin API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Admin API.  For a better overview, all CRUD-endpoints are hidden by default. If you want to show also CRUD-endpoints add the query parameter `type=jsonapi`.
 *
 * OpenAPI spec version: 6.4.7.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.31
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Country Class Doc Comment
 *
 * @category Class
 * @description Added since version: 6.0.0.0
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Country implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Country';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'name' => 'string',
'iso' => 'string',
'position' => 'int',
'tax_free' => 'bool',
'active' => 'bool',
'shipping_available' => 'bool',
'iso3' => 'string',
'display_state_in_registration' => 'bool',
'force_state_in_registration' => 'bool',
'company_tax_free' => 'bool',
'check_vat_id_pattern' => 'bool',
'vat_id_required' => 'bool',
'vat_id_pattern' => 'string',
'custom_fields' => 'object',
'customer_tax' => '\Swagger\Client\Model\CountryJsonApiCustomerTax',
'company_tax' => '\Swagger\Client\Model\CountryJsonApiCustomerTax',
'created_at' => '\DateTime',
'updated_at' => '\DateTime',
'translated' => 'object',
'states' => '\Swagger\Client\Model\CountryState',
'customer_addresses' => '\Swagger\Client\Model\CustomerAddress',
'order_addresses' => '\Swagger\Client\Model\OrderAddress',
'sales_channel_default_assignments' => '\Swagger\Client\Model\SalesChannel',
'sales_channels' => '\Swagger\Client\Model\SalesChannel',
'tax_rules' => '\Swagger\Client\Model\TaxRule',
'currency_country_roundings' => '\Swagger\Client\Model\CurrencyCountryRounding'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'name' => null,
'iso' => null,
'position' => 'int64',
'tax_free' => null,
'active' => null,
'shipping_available' => null,
'iso3' => null,
'display_state_in_registration' => null,
'force_state_in_registration' => null,
'company_tax_free' => null,
'check_vat_id_pattern' => null,
'vat_id_required' => null,
'vat_id_pattern' => null,
'custom_fields' => null,
'customer_tax' => null,
'company_tax' => null,
'created_at' => 'date-time',
'updated_at' => 'date-time',
'translated' => null,
'states' => null,
'customer_addresses' => null,
'order_addresses' => null,
'sales_channel_default_assignments' => null,
'sales_channels' => null,
'tax_rules' => null,
'currency_country_roundings' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'name' => 'name',
'iso' => 'iso',
'position' => 'position',
'tax_free' => 'taxFree',
'active' => 'active',
'shipping_available' => 'shippingAvailable',
'iso3' => 'iso3',
'display_state_in_registration' => 'displayStateInRegistration',
'force_state_in_registration' => 'forceStateInRegistration',
'company_tax_free' => 'companyTaxFree',
'check_vat_id_pattern' => 'checkVatIdPattern',
'vat_id_required' => 'vatIdRequired',
'vat_id_pattern' => 'vatIdPattern',
'custom_fields' => 'customFields',
'customer_tax' => 'customerTax',
'company_tax' => 'companyTax',
'created_at' => 'createdAt',
'updated_at' => 'updatedAt',
'translated' => 'translated',
'states' => 'states',
'customer_addresses' => 'customerAddresses',
'order_addresses' => 'orderAddresses',
'sales_channel_default_assignments' => 'salesChannelDefaultAssignments',
'sales_channels' => 'salesChannels',
'tax_rules' => 'taxRules',
'currency_country_roundings' => 'currencyCountryRoundings'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'name' => 'setName',
'iso' => 'setIso',
'position' => 'setPosition',
'tax_free' => 'setTaxFree',
'active' => 'setActive',
'shipping_available' => 'setShippingAvailable',
'iso3' => 'setIso3',
'display_state_in_registration' => 'setDisplayStateInRegistration',
'force_state_in_registration' => 'setForceStateInRegistration',
'company_tax_free' => 'setCompanyTaxFree',
'check_vat_id_pattern' => 'setCheckVatIdPattern',
'vat_id_required' => 'setVatIdRequired',
'vat_id_pattern' => 'setVatIdPattern',
'custom_fields' => 'setCustomFields',
'customer_tax' => 'setCustomerTax',
'company_tax' => 'setCompanyTax',
'created_at' => 'setCreatedAt',
'updated_at' => 'setUpdatedAt',
'translated' => 'setTranslated',
'states' => 'setStates',
'customer_addresses' => 'setCustomerAddresses',
'order_addresses' => 'setOrderAddresses',
'sales_channel_default_assignments' => 'setSalesChannelDefaultAssignments',
'sales_channels' => 'setSalesChannels',
'tax_rules' => 'setTaxRules',
'currency_country_roundings' => 'setCurrencyCountryRoundings'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'name' => 'getName',
'iso' => 'getIso',
'position' => 'getPosition',
'tax_free' => 'getTaxFree',
'active' => 'getActive',
'shipping_available' => 'getShippingAvailable',
'iso3' => 'getIso3',
'display_state_in_registration' => 'getDisplayStateInRegistration',
'force_state_in_registration' => 'getForceStateInRegistration',
'company_tax_free' => 'getCompanyTaxFree',
'check_vat_id_pattern' => 'getCheckVatIdPattern',
'vat_id_required' => 'getVatIdRequired',
'vat_id_pattern' => 'getVatIdPattern',
'custom_fields' => 'getCustomFields',
'customer_tax' => 'getCustomerTax',
'company_tax' => 'getCompanyTax',
'created_at' => 'getCreatedAt',
'updated_at' => 'getUpdatedAt',
'translated' => 'getTranslated',
'states' => 'getStates',
'customer_addresses' => 'getCustomerAddresses',
'order_addresses' => 'getOrderAddresses',
'sales_channel_default_assignments' => 'getSalesChannelDefaultAssignments',
'sales_channels' => 'getSalesChannels',
'tax_rules' => 'getTaxRules',
'currency_country_roundings' => 'getCurrencyCountryRoundings'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['iso'] = isset($data['iso']) ? $data['iso'] : null;
        $this->container['position'] = isset($data['position']) ? $data['position'] : null;
        $this->container['tax_free'] = isset($data['tax_free']) ? $data['tax_free'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['shipping_available'] = isset($data['shipping_available']) ? $data['shipping_available'] : null;
        $this->container['iso3'] = isset($data['iso3']) ? $data['iso3'] : null;
        $this->container['display_state_in_registration'] = isset($data['display_state_in_registration']) ? $data['display_state_in_registration'] : null;
        $this->container['force_state_in_registration'] = isset($data['force_state_in_registration']) ? $data['force_state_in_registration'] : null;
        $this->container['company_tax_free'] = isset($data['company_tax_free']) ? $data['company_tax_free'] : null;
        $this->container['check_vat_id_pattern'] = isset($data['check_vat_id_pattern']) ? $data['check_vat_id_pattern'] : null;
        $this->container['vat_id_required'] = isset($data['vat_id_required']) ? $data['vat_id_required'] : null;
        $this->container['vat_id_pattern'] = isset($data['vat_id_pattern']) ? $data['vat_id_pattern'] : null;
        $this->container['custom_fields'] = isset($data['custom_fields']) ? $data['custom_fields'] : null;
        $this->container['customer_tax'] = isset($data['customer_tax']) ? $data['customer_tax'] : null;
        $this->container['company_tax'] = isset($data['company_tax']) ? $data['company_tax'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['translated'] = isset($data['translated']) ? $data['translated'] : null;
        $this->container['states'] = isset($data['states']) ? $data['states'] : null;
        $this->container['customer_addresses'] = isset($data['customer_addresses']) ? $data['customer_addresses'] : null;
        $this->container['order_addresses'] = isset($data['order_addresses']) ? $data['order_addresses'] : null;
        $this->container['sales_channel_default_assignments'] = isset($data['sales_channel_default_assignments']) ? $data['sales_channel_default_assignments'] : null;
        $this->container['sales_channels'] = isset($data['sales_channels']) ? $data['sales_channels'] : null;
        $this->container['tax_rules'] = isset($data['tax_rules']) ? $data['tax_rules'] : null;
        $this->container['currency_country_roundings'] = isset($data['currency_country_roundings']) ? $data['currency_country_roundings'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets iso
     *
     * @return string
     */
    public function getIso()
    {
        return $this->container['iso'];
    }

    /**
     * Sets iso
     *
     * @param string $iso iso
     *
     * @return $this
     */
    public function setIso($iso)
    {
        $this->container['iso'] = $iso;

        return $this;
    }

    /**
     * Gets position
     *
     * @return int
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param int $position position
     *
     * @return $this
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets tax_free
     *
     * @return bool
     */
    public function getTaxFree()
    {
        return $this->container['tax_free'];
    }

    /**
     * Sets tax_free
     *
     * @param bool $tax_free tax_free
     *
     * @return $this
     */
    public function setTaxFree($tax_free)
    {
        $this->container['tax_free'] = $tax_free;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active active
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets shipping_available
     *
     * @return bool
     */
    public function getShippingAvailable()
    {
        return $this->container['shipping_available'];
    }

    /**
     * Sets shipping_available
     *
     * @param bool $shipping_available shipping_available
     *
     * @return $this
     */
    public function setShippingAvailable($shipping_available)
    {
        $this->container['shipping_available'] = $shipping_available;

        return $this;
    }

    /**
     * Gets iso3
     *
     * @return string
     */
    public function getIso3()
    {
        return $this->container['iso3'];
    }

    /**
     * Sets iso3
     *
     * @param string $iso3 iso3
     *
     * @return $this
     */
    public function setIso3($iso3)
    {
        $this->container['iso3'] = $iso3;

        return $this;
    }

    /**
     * Gets display_state_in_registration
     *
     * @return bool
     */
    public function getDisplayStateInRegistration()
    {
        return $this->container['display_state_in_registration'];
    }

    /**
     * Sets display_state_in_registration
     *
     * @param bool $display_state_in_registration display_state_in_registration
     *
     * @return $this
     */
    public function setDisplayStateInRegistration($display_state_in_registration)
    {
        $this->container['display_state_in_registration'] = $display_state_in_registration;

        return $this;
    }

    /**
     * Gets force_state_in_registration
     *
     * @return bool
     */
    public function getForceStateInRegistration()
    {
        return $this->container['force_state_in_registration'];
    }

    /**
     * Sets force_state_in_registration
     *
     * @param bool $force_state_in_registration force_state_in_registration
     *
     * @return $this
     */
    public function setForceStateInRegistration($force_state_in_registration)
    {
        $this->container['force_state_in_registration'] = $force_state_in_registration;

        return $this;
    }

    /**
     * Gets company_tax_free
     *
     * @return bool
     */
    public function getCompanyTaxFree()
    {
        return $this->container['company_tax_free'];
    }

    /**
     * Sets company_tax_free
     *
     * @param bool $company_tax_free company_tax_free
     *
     * @return $this
     */
    public function setCompanyTaxFree($company_tax_free)
    {
        $this->container['company_tax_free'] = $company_tax_free;

        return $this;
    }

    /**
     * Gets check_vat_id_pattern
     *
     * @return bool
     */
    public function getCheckVatIdPattern()
    {
        return $this->container['check_vat_id_pattern'];
    }

    /**
     * Sets check_vat_id_pattern
     *
     * @param bool $check_vat_id_pattern check_vat_id_pattern
     *
     * @return $this
     */
    public function setCheckVatIdPattern($check_vat_id_pattern)
    {
        $this->container['check_vat_id_pattern'] = $check_vat_id_pattern;

        return $this;
    }

    /**
     * Gets vat_id_required
     *
     * @return bool
     */
    public function getVatIdRequired()
    {
        return $this->container['vat_id_required'];
    }

    /**
     * Sets vat_id_required
     *
     * @param bool $vat_id_required vat_id_required
     *
     * @return $this
     */
    public function setVatIdRequired($vat_id_required)
    {
        $this->container['vat_id_required'] = $vat_id_required;

        return $this;
    }

    /**
     * Gets vat_id_pattern
     *
     * @return string
     */
    public function getVatIdPattern()
    {
        return $this->container['vat_id_pattern'];
    }

    /**
     * Sets vat_id_pattern
     *
     * @param string $vat_id_pattern vat_id_pattern
     *
     * @return $this
     */
    public function setVatIdPattern($vat_id_pattern)
    {
        $this->container['vat_id_pattern'] = $vat_id_pattern;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return object
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param object $custom_fields custom_fields
     *
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets customer_tax
     *
     * @return \Swagger\Client\Model\CountryJsonApiCustomerTax
     */
    public function getCustomerTax()
    {
        return $this->container['customer_tax'];
    }

    /**
     * Sets customer_tax
     *
     * @param \Swagger\Client\Model\CountryJsonApiCustomerTax $customer_tax customer_tax
     *
     * @return $this
     */
    public function setCustomerTax($customer_tax)
    {
        $this->container['customer_tax'] = $customer_tax;

        return $this;
    }

    /**
     * Gets company_tax
     *
     * @return \Swagger\Client\Model\CountryJsonApiCustomerTax
     */
    public function getCompanyTax()
    {
        return $this->container['company_tax'];
    }

    /**
     * Sets company_tax
     *
     * @param \Swagger\Client\Model\CountryJsonApiCustomerTax $company_tax company_tax
     *
     * @return $this
     */
    public function setCompanyTax($company_tax)
    {
        $this->container['company_tax'] = $company_tax;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets translated
     *
     * @return object
     */
    public function getTranslated()
    {
        return $this->container['translated'];
    }

    /**
     * Sets translated
     *
     * @param object $translated translated
     *
     * @return $this
     */
    public function setTranslated($translated)
    {
        $this->container['translated'] = $translated;

        return $this;
    }

    /**
     * Gets states
     *
     * @return \Swagger\Client\Model\CountryState
     */
    public function getStates()
    {
        return $this->container['states'];
    }

    /**
     * Sets states
     *
     * @param \Swagger\Client\Model\CountryState $states states
     *
     * @return $this
     */
    public function setStates($states)
    {
        $this->container['states'] = $states;

        return $this;
    }

    /**
     * Gets customer_addresses
     *
     * @return \Swagger\Client\Model\CustomerAddress
     */
    public function getCustomerAddresses()
    {
        return $this->container['customer_addresses'];
    }

    /**
     * Sets customer_addresses
     *
     * @param \Swagger\Client\Model\CustomerAddress $customer_addresses customer_addresses
     *
     * @return $this
     */
    public function setCustomerAddresses($customer_addresses)
    {
        $this->container['customer_addresses'] = $customer_addresses;

        return $this;
    }

    /**
     * Gets order_addresses
     *
     * @return \Swagger\Client\Model\OrderAddress
     */
    public function getOrderAddresses()
    {
        return $this->container['order_addresses'];
    }

    /**
     * Sets order_addresses
     *
     * @param \Swagger\Client\Model\OrderAddress $order_addresses order_addresses
     *
     * @return $this
     */
    public function setOrderAddresses($order_addresses)
    {
        $this->container['order_addresses'] = $order_addresses;

        return $this;
    }

    /**
     * Gets sales_channel_default_assignments
     *
     * @return \Swagger\Client\Model\SalesChannel
     */
    public function getSalesChannelDefaultAssignments()
    {
        return $this->container['sales_channel_default_assignments'];
    }

    /**
     * Sets sales_channel_default_assignments
     *
     * @param \Swagger\Client\Model\SalesChannel $sales_channel_default_assignments sales_channel_default_assignments
     *
     * @return $this
     */
    public function setSalesChannelDefaultAssignments($sales_channel_default_assignments)
    {
        $this->container['sales_channel_default_assignments'] = $sales_channel_default_assignments;

        return $this;
    }

    /**
     * Gets sales_channels
     *
     * @return \Swagger\Client\Model\SalesChannel
     */
    public function getSalesChannels()
    {
        return $this->container['sales_channels'];
    }

    /**
     * Sets sales_channels
     *
     * @param \Swagger\Client\Model\SalesChannel $sales_channels sales_channels
     *
     * @return $this
     */
    public function setSalesChannels($sales_channels)
    {
        $this->container['sales_channels'] = $sales_channels;

        return $this;
    }

    /**
     * Gets tax_rules
     *
     * @return \Swagger\Client\Model\TaxRule
     */
    public function getTaxRules()
    {
        return $this->container['tax_rules'];
    }

    /**
     * Sets tax_rules
     *
     * @param \Swagger\Client\Model\TaxRule $tax_rules tax_rules
     *
     * @return $this
     */
    public function setTaxRules($tax_rules)
    {
        $this->container['tax_rules'] = $tax_rules;

        return $this;
    }

    /**
     * Gets currency_country_roundings
     *
     * @return \Swagger\Client\Model\CurrencyCountryRounding
     */
    public function getCurrencyCountryRoundings()
    {
        return $this->container['currency_country_roundings'];
    }

    /**
     * Sets currency_country_roundings
     *
     * @param \Swagger\Client\Model\CurrencyCountryRounding $currency_country_roundings currency_country_roundings
     *
     * @return $this
     */
    public function setCurrencyCountryRoundings($currency_country_roundings)
    {
        $this->container['currency_country_roundings'] = $currency_country_roundings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
