<?php
/**
 * SwagPaypalV1SubscriptionBillingInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Shopware Admin API
 *
 * This endpoint reference contains an overview of all endpoints comprising the Shopware Admin API.  For a better overview, all CRUD-endpoints are hidden by default. If you want to show also CRUD-endpoints add the query parameter `type=jsonapi`.
 *
 * OpenAPI spec version: 6.4.7.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.31
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SwagPaypalV1SubscriptionBillingInfo Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SwagPaypalV1SubscriptionBillingInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'swag_paypal_v1_subscription_billing_info';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'outstanding_balance' => '\Swagger\Client\Model\SwagPaypalV1CommonMoney',
'cycle_executions' => '\Swagger\Client\Model\SwagPaypalV1SubscriptionCycleExecution[]',
'last_payment' => '\Swagger\Client\Model\SwagPaypalV1SubscriptionLastPayment',
'next_billing_time' => 'string',
'failed_payments_count' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'outstanding_balance' => null,
'cycle_executions' => null,
'last_payment' => null,
'next_billing_time' => null,
'failed_payments_count' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'outstanding_balance' => 'outstandingBalance',
'cycle_executions' => 'cycleExecutions',
'last_payment' => 'lastPayment',
'next_billing_time' => 'nextBillingTime',
'failed_payments_count' => 'failedPaymentsCount'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'outstanding_balance' => 'setOutstandingBalance',
'cycle_executions' => 'setCycleExecutions',
'last_payment' => 'setLastPayment',
'next_billing_time' => 'setNextBillingTime',
'failed_payments_count' => 'setFailedPaymentsCount'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'outstanding_balance' => 'getOutstandingBalance',
'cycle_executions' => 'getCycleExecutions',
'last_payment' => 'getLastPayment',
'next_billing_time' => 'getNextBillingTime',
'failed_payments_count' => 'getFailedPaymentsCount'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['outstanding_balance'] = isset($data['outstanding_balance']) ? $data['outstanding_balance'] : null;
        $this->container['cycle_executions'] = isset($data['cycle_executions']) ? $data['cycle_executions'] : null;
        $this->container['last_payment'] = isset($data['last_payment']) ? $data['last_payment'] : null;
        $this->container['next_billing_time'] = isset($data['next_billing_time']) ? $data['next_billing_time'] : null;
        $this->container['failed_payments_count'] = isset($data['failed_payments_count']) ? $data['failed_payments_count'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets outstanding_balance
     *
     * @return \Swagger\Client\Model\SwagPaypalV1CommonMoney
     */
    public function getOutstandingBalance()
    {
        return $this->container['outstanding_balance'];
    }

    /**
     * Sets outstanding_balance
     *
     * @param \Swagger\Client\Model\SwagPaypalV1CommonMoney $outstanding_balance outstanding_balance
     *
     * @return $this
     */
    public function setOutstandingBalance($outstanding_balance)
    {
        $this->container['outstanding_balance'] = $outstanding_balance;

        return $this;
    }

    /**
     * Gets cycle_executions
     *
     * @return \Swagger\Client\Model\SwagPaypalV1SubscriptionCycleExecution[]
     */
    public function getCycleExecutions()
    {
        return $this->container['cycle_executions'];
    }

    /**
     * Sets cycle_executions
     *
     * @param \Swagger\Client\Model\SwagPaypalV1SubscriptionCycleExecution[] $cycle_executions cycle_executions
     *
     * @return $this
     */
    public function setCycleExecutions($cycle_executions)
    {
        $this->container['cycle_executions'] = $cycle_executions;

        return $this;
    }

    /**
     * Gets last_payment
     *
     * @return \Swagger\Client\Model\SwagPaypalV1SubscriptionLastPayment
     */
    public function getLastPayment()
    {
        return $this->container['last_payment'];
    }

    /**
     * Sets last_payment
     *
     * @param \Swagger\Client\Model\SwagPaypalV1SubscriptionLastPayment $last_payment last_payment
     *
     * @return $this
     */
    public function setLastPayment($last_payment)
    {
        $this->container['last_payment'] = $last_payment;

        return $this;
    }

    /**
     * Gets next_billing_time
     *
     * @return string
     */
    public function getNextBillingTime()
    {
        return $this->container['next_billing_time'];
    }

    /**
     * Sets next_billing_time
     *
     * @param string $next_billing_time next_billing_time
     *
     * @return $this
     */
    public function setNextBillingTime($next_billing_time)
    {
        $this->container['next_billing_time'] = $next_billing_time;

        return $this;
    }

    /**
     * Gets failed_payments_count
     *
     * @return int
     */
    public function getFailedPaymentsCount()
    {
        return $this->container['failed_payments_count'];
    }

    /**
     * Sets failed_payments_count
     *
     * @param int $failed_payments_count failed_payments_count
     *
     * @return $this
     */
    public function setFailedPaymentsCount($failed_payments_count)
    {
        $this->container['failed_payments_count'] = $failed_payments_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
